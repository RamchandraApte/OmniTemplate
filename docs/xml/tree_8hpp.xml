<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="tree_8hpp" kind="file" language="C++">
    <compoundname>tree.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="graph_2all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/all.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="7">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/tree/tree.hpp</label>
        <link refid="tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/tree/tree.hpp</label>
        <link refid="tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="tree_8hpp_1a202200d4d06aea05b7638be837590286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; array&lt; <ref refid="structll" kindref="compound">ll</ref>, 2 &gt;, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>pair&lt;array&lt;ll, 2&gt;, ll&gt; tree_diameter</definition>
        <argsstring>(const GraphAdj &amp;g)</argsstring>
        <name>tree_diameter</name>
        <param>
          <type>const GraphAdj &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Find tree diameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns diameter and center of a tree :param: g </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/tree/tree.hpp" line="5" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/tree/tree.hpp" bodystart="5" bodyend="15"/>
        <references refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a">graph_theory::BFS</references>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="36">fo</references>
        <referencedby refid="tree_8hpp_1a3723e2fdc7693c4777b321d0619f189d" compoundref="tree_8hpp" startline="16" endline="38">test_tree_diameter</referencedby>
      </memberdef>
      <memberdef kind="function" id="tree_8hpp_1a3723e2fdc7693c4777b321d0619f189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_tree_diameter</definition>
        <argsstring>()</argsstring>
        <name>test_tree_diameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/tree/tree.hpp" line="16" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/tree/tree.hpp" bodystart="16" bodyend="38"/>
        <references refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="core_2all_8hpp" startline="38">al</references>
        <references refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" compoundref="tree_8hpp" startline="5" endline="15">tree_diameter</references>
        <referencedby refid="namespacegraph__theory_1_1test_1a147e0cf4f86928e4e422c6b9198a2371" compoundref="test__all_8hpp" startline="73" endline="87">graph_theory::test::test_graph_theory</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight></codeline>
<codeline lineno="5" refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" refkind="member"><highlight class="normal">pair&lt;array&lt;ll,<sp/>2&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>&gt;<sp/><ref refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;g)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" kindref="member">BFS</ref><sp/>b{g};</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>b();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>b.queue.back();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" kindref="member">BFS</ref><sp/>b2{g};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>b2(u);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>b2.queue.back();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>b2.distance[v]<sp/>/<sp/>2)<sp/>{<sp/>c<sp/>=<sp/>b2.parent[c];<sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{u,<sp/>v},<sp/>c};</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16" refid="tree_8hpp_1a3723e2fdc7693c4777b321d0619f189d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tree_8hpp_1a3723e2fdc7693c4777b321d0619f189d" kindref="member">test_tree_diameter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>graph(5);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(1,<sp/>3);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(3,<sp/>2);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(2,<sp/>0);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(0,<sp/>4);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(graph);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(ret.first));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((ret.first<sp/>==<sp/>array&lt;ll,<sp/>2&gt;{1,<sp/>4}));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret.second<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>graph(5);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(1,<sp/>3);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(3,<sp/>2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(2,<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.add_edge(3,<sp/>4);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(graph).first;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(ret));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/graph/tree/tree.hpp"/>
  </compounddef>
</doxygen>
