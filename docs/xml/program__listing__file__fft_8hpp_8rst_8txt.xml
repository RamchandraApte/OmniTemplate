<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__fft_8hpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_fft.hpp.rst.txt</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt</label>
        <link refid="program__listing__file__fft_8hpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__fft_8hpp_8rst_8txt_1a1e217b9973526dd83d3dc7a71f4f223a" prot="public" static="no" mutable="no">
        <type>_program_listing_file_fft</type>
        <definition>_program_listing_file_fft hpp</definition>
        <argsstring></argsstring>
        <name>hpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="2" column="27" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__fft_8hpp_8rst_8txt_1af19e5901b80c70602cfd6a64ebd0e124" prot="public" static="no" mutable="no">
        <type>return</type>
        <definition>return f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="68" column="15" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a6934816724c193d3f37314a7ddb1c234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(n==1)</argsstring>
        <name>if</name>
        <param>
          <type>n</type>
          <defval>=1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="54" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a9ca873ac79de45f51e7fb49365f8036b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v</type>
        <definition>v resize</definition>
        <argsstring>(n)</argsstring>
        <name>resize</name>
        <param>
          <type>n</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="57" column="9" declfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" declline="57" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a1ef6e59d159022a0e1d0d2c7eaf1962e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; vector&lt; com &gt; &gt;</type>
        <definition>vector&lt;vector&lt;com&gt; &gt; vs</definition>
        <argsstring>(2, vector&lt; com &gt;(n/2))</argsstring>
        <name>vs</name>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>vector&lt; com &gt;</type>
          <array>n/2</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="58" column="15" declfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a92efe421cf2f6b268977a8b70b156e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fo</definition>
        <argsstring>(i, n)</argsstring>
        <name>fo</name>
        <param>
          <type>i</type>
        </param>
        <param>
          <type>n</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="59" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a2ee6f871890015a8b994c5dbd0e2d39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>for</definition>
        <argsstring>(auto &amp;x :vs)</argsstring>
        <name>for</name>
        <param>
          <type>auto &amp;x :vs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="60" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a3918f46fb8e3b557d7830c99166ef0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; com &gt;</type>
        <definition>vector&lt;com&gt; f</definition>
        <argsstring>(n)</argsstring>
        <name>f</name>
        <param>
          <type>n</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="63" column="15" declfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1a28d153b484ecc2f9d502afe1d517e549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fo</definition>
        <argsstring>(i2, n)</argsstring>
        <name>fo</name>
        <param>
          <type>i2</type>
        </param>
        <param>
          <type>n</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="64" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1af359fe1ab295171c84c1da7bdfc95018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>vector&lt; com &gt;</type>
        <definition>vector&lt;com&gt; ifft</definition>
        <argsstring>(Cont v)</argsstring>
        <name>ifft</name>
        <param>
          <type>Cont</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="70" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__fft_8hpp_8rst_8txt_1ad433b30dd657e617f55a72340fcefd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto conv</definition>
        <argsstring>(const Cont &amp;a, const Cont &amp;b)</argsstring>
        <name>conv</name>
        <param>
          <type>const Cont &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Cont &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" line="80" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt" bodystart="80" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_fft.hpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/>fft.hpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_fft.hpp&gt;`<sp/>(``fft.hpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>FFTN2</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fft(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v,<sp/>df(d,<sp/>1LL),<sp/>df(s,<sp/>0LL))<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.size()<sp/>==<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>nx2(v.size());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(n);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft(v,<sp/>2*d,<sp/>s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft(v,<sp/>2*d,<sp/>s+d);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>exp(com{-</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">{tau}<sp/>*<sp/>1.0i<sp/>/<sp/>(n<sp/>/<sp/>d)});</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>com{1};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vc&lt;com&gt;<sp/>out(n<sp/>/<sp/>d);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fo(j,n/(2*d)){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>od<sp/>=<sp/>p*v[i+d];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[j]<sp/>=<sp/>v[i]+od;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[j+n/(2*d)]<sp/>=<sp/>v[i]-od;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p*=e;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i+=2*d;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x:out){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i+=d;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ifft(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>v){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse(begin(v)+1,<sp/>end(v));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fft(v);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x:<sp/>v){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>com(v.size());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/>vector&lt;com&gt;<sp/>fft(Cont<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>bit_ceil(v.size());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(n);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;com&gt;&gt;<sp/>vs(2,<sp/>vector&lt;com&gt;(n<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fo(i,<sp/>n)<sp/>{<sp/>vs[i<sp/>%<sp/>2][i<sp/>/<sp/>2]<sp/>=<sp/>v[i];<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>vs)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>fft(x);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;com&gt;<sp/>f(n);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fo(i2,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>i2<sp/>%<sp/>(n<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f[i2]<sp/>=<sp/>vs[0][i]<sp/>+<sp/>exp(-com{0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">{tau}<sp/>*<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">{i2<sp/>/<sp/>n}})<sp/>*<sp/>vs[1][i];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/>vector&lt;com&gt;<sp/>ifft(Cont<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse(begin(v)<sp/>+<sp/>1,<sp/>end(v));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>fft(v);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>/=<sp/>com{v.size()};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Cont<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Cont<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ifft(fft(a)<sp/>*<sp/>fft(b));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_fft.hpp.rst.txt"/>
  </compounddef>
</doxygen>
