<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="graph_2all_8hpp" kind="file" language="C++">
    <compoundname>all.hpp</compoundname>
    <includes refid="linear__algebra_8hpp" local="yes">algebra/linear_algebra.hpp</includes>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includes refid="dsu_8hpp" local="yes">ds/dsu.hpp</includes>
    <includes refid="biconnected_8hpp" local="yes">biconnected.hpp</includes>
    <includes refid="bipartite_8hpp" local="yes">bipartite.hpp</includes>
    <includes refid="flow_8hpp" local="yes">flow.hpp</includes>
    <includes refid="graph__view_8hpp" local="yes">graph_view.hpp</includes>
    <includes refid="test__flow_8hpp" local="yes">test_flow.hpp</includes>
    <includes refid="tree_8hpp" local="yes">tree/tree.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="2sat_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/2sat.hpp</includedby>
    <includedby refid="test__all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/test_all.hpp</includedby>
    <includedby refid="hld_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/tree/hld.hpp</includedby>
    <includedby refid="graph__draw_8hpp" local="yes">/home/ram/OmniTemplate/src/utility/graph_draw.hpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="13">
        <label>polynomial.hpp</label>
        <link refid="polynomial_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algebra/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="9">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>test_biconnected.hpp</label>
        <link refid="test__biconnected_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>biconnected.hpp</label>
        <link refid="biconnected_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>test_flow.hpp</label>
        <link refid="test__flow_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>bipartite.hpp</label>
        <link refid="bipartite_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>graph_view.hpp</label>
        <link refid="graph__view_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>tree/tree.hpp</label>
        <link refid="tree_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>flow.hpp</label>
        <link refid="flow_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ds/dsu.hpp</label>
        <link refid="dsu_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structgraph__theory_1_1edge" prot="public">graph_theory::edge</innerclass>
    <innerclass refid="structgraph__theory_1_1GeneralSearch" prot="public">graph_theory::GeneralSearch</innerclass>
    <innerclass refid="structgraph__theory_1_1DFS" prot="public">graph_theory::DFS</innerclass>
    <innerclass refid="structgraph__theory_1_1BFS" prot="public">graph_theory::BFS</innerclass>
    <innernamespace refid="namespacegraph__theory">graph_theory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linear__algebra_8hpp" kindref="compound">algebra/linear_algebra.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dsu_8hpp" kindref="compound">ds/dsu.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="namespacegraph__theory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory" kindref="compound">graph_theory</ref><sp/>{</highlight></codeline>
<codeline lineno="7" refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>=<sp/>vector&lt;vector&lt;ll&gt;&gt;;</highlight></codeline>
<codeline lineno="9" refid="structgraph__theory_1_1edge" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>{</highlight></codeline>
<codeline lineno="10" refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" kindref="member">weight</ref>,<sp/><ref refid="structgraph__theory_1_1edge_1ae8364c3bd91a36e17fc27897682b793b" kindref="member">a</ref>,<sp/><ref refid="structgraph__theory_1_1edge_1a57daf64fddd9cbc445c13c4a828a2a06" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="11" refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{<ref refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" kindref="member">weight</ref>,<sp/><ref refid="structgraph__theory_1_1edge_1ae8364c3bd91a36e17fc27897682b793b" kindref="member">a</ref>,<sp/><ref refid="structgraph__theory_1_1edge_1a57daf64fddd9cbc445c13c4a828a2a06" kindref="member">b</ref>};<sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14" refid="namespacegraph__theory_1a4dbe54e2a6c2e93add66dc32c647c876" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a4dbe54e2a6c2e93add66dc32c647c876" kindref="member">operator&lt;</ref>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()<sp/>&lt;<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>.to_tuple();</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17" refid="namespacegraph__theory_1a9112d064de59f0aa5737bc1d90e9bf32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a9112d064de59f0aa5737bc1d90e9bf32" kindref="member">operator==</ref>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()<sp/>==<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>.to_tuple();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21" refid="namespacegraph__theory_1a283db7058efe0355744471a1532e4960" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacegraph__theory_1a283db7058efe0355744471a1532e4960" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;edge{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1ae8364c3bd91a36e17fc27897682b793b" kindref="member">a</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" kindref="member">weight</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1a57daf64fddd9cbc445c13c4a828a2a06" kindref="member">b</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25" refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[u].push_back(v);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[v].push_back(u);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29" refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(vector&lt;vector&lt;pr&gt;&gt;<sp/>graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>d(graph.size(),<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>),<sp/>pv(graph.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1ac0b978e8ffc2c44656160a679f86e22a" kindref="member">prio_queue_t&lt;pr, greater&lt;&gt;</ref>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>d[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>d.size())<sp/>{<sp/>q.push({d[i],<sp/>i});<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q.size())<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[di,<sp/>a]<sp/>=<sp/>q.top();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.pop();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di<sp/>!=<sp/>d[a])<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>:<sp/>graph[a])<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>,<sp/>w]<sp/>=<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nw<sp/>=<sp/>di<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nw<sp/>&lt;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv[<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.push({x,<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>});</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array&lt;vector&lt;ll&gt;,<sp/>2&gt;{d,<sp/>pv};</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60" refid="namespacegraph__theory_1ae6ad3f54671798a8d8f3c4253ea83db4" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>do<sp/>we<sp/>want<sp/>to<sp/>consider<sp/>zero-length<sp/>paths?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(graph.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>graph.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>graph;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[i][j];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>min(x,<sp/>d[i][k]<sp/>+<sp/>d[k][j]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76" refid="namespacegraph__theory_1a43f33335bd84b91252969b3b17f8b09d" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a43f33335bd84b91252969b3b17f8b09d" kindref="member">mst</ref>(vector&lt;edge&gt;<sp/>edges,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(edges));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>d{n};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;edge&gt;<sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;e<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d.join(e.a,<sp/>e.b))<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref>.push_back(e);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89" refid="structgraph__theory_1_1GeneralSearch" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Searcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref><sp/>{</highlight></codeline>
<codeline lineno="90" refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Graph<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>;</highlight></codeline>
<codeline lineno="91" refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>;<sp/></highlight></codeline>
<codeline lineno="92" refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>deque&lt;ll&gt;<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="93" refid="structgraph__theory_1_1GeneralSearch_1a3ed9b9d45c85402850e22f6e98055045" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a3ed9b9d45c85402850e22f6e98055045" kindref="member">parent</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94" refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" kindref="member">distance</ref>;<sp/></highlight></codeline>
<codeline lineno="95" refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" kindref="member">GeneralSearch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph<sp/>&amp;g_)<sp/>:<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>(g_),<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>(<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>.size()),<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a3ed9b9d45c85402850e22f6e98055045" kindref="member">parent</ref>(<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>.size(),<sp/>-1),<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" kindref="member">distance</ref>(<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>.size(),<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="96" refid="structgraph__theory_1_1GeneralSearch_1aba4f495d3fd8c83c5e28e27315e8d920" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aba4f495d3fd8c83c5e28e27315e8d920" kindref="member">operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Run<sp/>the<sp/>searcher<sp/>on<sp/>all<sp/>vertices.<sp/>Useful<sp/>for<sp/>visiting<sp/>the</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>entire<sp/>graph,<sp/>and<sp/>not<sp/>just<sp/>one<sp/>connected<sp/>component.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Searcher<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))(i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105" refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>child,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>par)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" kindref="member">distance</ref>[child]<sp/>=<sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" kindref="member">distance</ref>[par]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a3ed9b9d45c85402850e22f6e98055045" kindref="member">parent</ref>[child]<sp/>=<sp/>par;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113" refid="namespacegraph__theory_1a1fa8a9b42e79b9ce10e89e4659164f8d" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Searcher&gt;<sp/>vector&lt;ll&gt;<sp/><ref refid="namespacegraph__theory_1a1fa8a9b42e79b9ce10e89e4659164f8d" kindref="member">get_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Searcher<sp/>&amp;search)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="namespacetree_1abbd5aff5c7f9d3fd17bb986aae13ca53" kindref="member">sz</ref>(search.parent.size(),<sp/>1);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/><ref refid="range_8hpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(search.queue))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search.parent[idx]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetree_1abbd5aff5c7f9d3fd17bb986aae13ca53" kindref="member">sz</ref>[search.parent[idx]]<sp/>+=<sp/><ref refid="namespacetree_1abbd5aff5c7f9d3fd17bb986aae13ca53" kindref="member">sz</ref>[idx];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetree_1abbd5aff5c7f9d3fd17bb986aae13ca53" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123" refid="structgraph__theory_1_1DFS" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph<sp/>=<sp/>GraphAdj&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref>&lt;DFS&lt;Graph&gt;,<sp/>Graph&gt;<sp/>{</highlight></codeline>
<codeline lineno="124" refid="structgraph__theory_1_1DFS_1a71954b9b77a8dd543923250a39461b06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch_t</ref><sp/>=<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch&lt;DFS, Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GeneralSearch_t::operator(),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" kindref="member">GeneralSearch_t::GeneralSearch</ref>;</highlight></codeline>
<codeline lineno="126" refid="structgraph__theory_1_1DFS_1a7a852aab8ddbe3b598770dd45073ff83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1DFS_1a7a852aab8ddbe3b598770dd45073ff83" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>[source])<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[j])<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" kindref="member">add</ref>(j,<sp/>source);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">(j);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>.push_front(source);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/><ref refid="namespacegraph__theory_1a7ffa7c1e75caecd92d5c385d41eb313d" kindref="member">DFS</ref>(Graph)<sp/>-&gt;<sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS&lt;Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="140" refid="structgraph__theory_1_1BFS" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph<sp/>=<sp/>GraphAdj&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>:<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref>&lt;BFS&lt;Graph&gt;,<sp/>Graph&gt;<sp/>{</highlight></codeline>
<codeline lineno="141" refid="structgraph__theory_1_1BFS_1ad85eddd9caeb226e88c6712cf3b86dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch_t</ref><sp/>=<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch&lt;BFS, Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GeneralSearch_t::operator(),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" kindref="member">GeneralSearch_t::GeneralSearch</ref>;</highlight></codeline>
<codeline lineno="143" refid="structgraph__theory_1_1BFS_1ad5324017ef8da193e0e6387715d5a597" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1BFS_1ad5324017ef8da193e0e6387715d5a597" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>old_size<sp/>=<sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>.size();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>.push_back(source);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1aadc7aa595d1aa3509f0ba6ee8489cf36" kindref="member">distance</ref>[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>idx<sp/>=<sp/>old_size;<sp/>idx<sp/>&lt;<sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>.size();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>[idx];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8ce5f9c8c5cba4adbbb66eb804363456" kindref="member">graph</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[j])<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1ab65b2c9f98ace39d40abfaf399c135a7" kindref="member">queue</ref>.push_back(j);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a8f85e90fb507ef03e5280a38c01a72cb" kindref="member">visited</ref>[j]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.<ref refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" kindref="member">add</ref>(j,<sp/>i);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/><ref refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" kindref="member">BFS</ref>(Graph)<sp/>-&gt;<sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS&lt;Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="163" refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>h(graph.size());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[j].push_back(i);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174" refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" kindref="member">scc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(graph);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>comp(size(graph),<sp/>-1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>assign<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;assign,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp[u]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp[u]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>v<sp/>:<sp/>h[u])<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(v,<sp/>c);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>dfs{graph};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>dfs();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>:<sp/>dfs.queue)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(i,<sp/>i);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193" refid="namespacegraph__theory_1aa68bcc78bd4d2bbd33ce272bbb2d5f33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1aa68bcc78bd4d2bbd33ce272bbb2d5f33" kindref="member">graph_in</ref>(<ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;g,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/>v;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>u<sp/>&gt;&gt;<sp/>v;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>--u,<sp/>--v);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_theory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory" kindref="compound">graph_theory</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="biconnected_8hpp" kindref="compound">biconnected.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bipartite_8hpp" kindref="compound">bipartite.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="flow_8hpp" kindref="compound">flow.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graph__view_8hpp" kindref="compound">graph_view.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__flow_8hpp" kindref="compound">test_flow.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tree_8hpp" kindref="compound">tree/tree.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/graph/all.hpp"/>
  </compounddef>
</doxygen>
