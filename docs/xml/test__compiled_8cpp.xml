<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__compiled_8cpp" kind="file" language="C++">
    <compoundname>test_compiled.cpp</compoundname>
    <includes local="no">bits/stdc++.h</includes>
    <includes local="no">experimental/iterator</includes>
    <includes local="no">experimental/source_location</includes>
    <incdepgraph>
      <node id="2">
        <label>bits/stdc++.h</label>
      </node>
      <node id="4">
        <label>experimental/source_location</label>
      </node>
      <node id="3">
        <label>experimental/iterator</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/test/test_compiled.cpp</label>
        <link refid="test__compiled_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structlets__add" prot="public">lets_add</innerclass>
    <innerclass refid="structit__base" prot="public">it_base</innerclass>
    <innerclass refid="structint__it" prot="public">int_it</innerclass>
    <innerclass refid="structrange" prot="public">range</innerclass>
    <innerclass refid="structrin" prot="public">rin</innerclass>
    <innerclass refid="structutility_1_1with" prot="public">utility::with</innerclass>
    <innerclass refid="structutility_1_1fix" prot="public">utility::fix</innerclass>
    <innerclass refid="structutility_1_1ar" prot="public">utility::ar</innerclass>
    <innerclass refid="structutility_1_1ar_3_01T_0fn_0e_4" prot="public">utility::ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="structutility_1_1random__device__patch" prot="public">utility::random_device_patch</innerclass>
    <innerclass refid="structutility_1_1Empty" prot="public">utility::Empty</innerclass>
    <innerclass refid="structmodulo__namespace_1_1no__mod" prot="public">modulo_namespace::no_mod</innerclass>
    <innerclass refid="structmodulo__namespace_1_1modulo" prot="public">modulo_namespace::modulo</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innerclass refid="classpolynomial__ns_1_1Polynomial" prot="public">polynomial_ns::Polynomial</innerclass>
    <innerclass refid="structlinear__algebra_1_1matrix" prot="public">linear_algebra::matrix</innerclass>
    <innerclass refid="classpermutation_1_1Permutation" prot="public">permutation::Permutation</innerclass>
    <innerclass refid="structtime__tools_1_1timer" prot="public">time_tools::timer</innerclass>
    <innerclass refid="classBIT" prot="public">BIT</innerclass>
    <innerclass refid="structconvex__hull__trick_1_1CHT" prot="public">convex_hull_trick::CHT</innerclass>
    <innerclass refid="structdsu__ds_1_1dsu" prot="public">dsu_ds::dsu</innerclass>
    <innerclass refid="classqueue__tools_1_1QueueAdaptor" prot="public">queue_tools::QueueAdaptor</innerclass>
    <innerclass refid="classqueue__tools_1_1MinStack" prot="public">queue_tools::MinStack</innerclass>
    <innerclass refid="classqueue__tools_1_1MinQueue" prot="public">queue_tools::MinQueue</innerclass>
    <innerclass refid="classsegment__tree_1_1SegmentTree" prot="public">segment_tree::SegmentTree</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1LazyPart" prot="public">segment_tree::SegmentTree::LazyPart</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1NodeCore" prot="public">segment_tree::SegmentTree::NodeCore</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" prot="public">segment_tree::SegmentTree::NodeExp</innerclass>
    <innerclass refid="classsparse__table_1_1SparseTable" prot="public">sparse_table::SparseTable</innerclass>
    <innerclass refid="classsparse__table_1_1DisjointSparseTable" prot="public">sparse_table::DisjointSparseTable</innerclass>
    <innerclass refid="structsplay__tree_1_1PathParent" prot="public">splay_tree::PathParent</innerclass>
    <innerclass refid="structsplay__tree_1_1SplayNode" prot="public">splay_tree::SplayNode</innerclass>
    <innerclass refid="structsplay__tree_1_1SplayTree" prot="public">splay_tree::SplayTree</innerclass>
    <innerclass refid="structsplay__tree_1_1SplayTree_1_1iterator" prot="public">splay_tree::SplayTree::iterator</innerclass>
    <innerclass refid="structgraph__theory_1_1edge" prot="public">graph_theory::edge</innerclass>
    <innerclass refid="structgraph__theory_1_1GeneralSearch" prot="public">graph_theory::GeneralSearch</innerclass>
    <innerclass refid="structgraph__theory_1_1DFS" prot="public">graph_theory::DFS</innerclass>
    <innerclass refid="structgraph__theory_1_1BFS" prot="public">graph_theory::BFS</innerclass>
    <innerclass refid="structflow_1_1FlowEdge" prot="public">flow::FlowEdge</innerclass>
    <innerclass refid="structSubgraph" prot="public">Subgraph</innerclass>
    <innerclass refid="structSubgraph_1_1iterator" prot="public">Subgraph::iterator</innerclass>
    <innerclass refid="classhld_1_1HLD" prot="public">hld::HLD</innerclass>
    <innerclass refid="structstring__tools_1_1Trie" prot="public">string_tools::Trie</innerclass>
    <innerclass refid="structstring__tools_1_1hash__str" prot="public">string_tools::hash_str</innerclass>
    <innerclass refid="structstring__tools_1_1bytehash" prot="public">string_tools::bytehash</innerclass>
    <innerclass refid="structstring__tools_1_1search__it" prot="public">string_tools::search_it</innerclass>
    <innernamespace refid="namespacedebug__tools">debug_tools</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespaceutility">utility</innernamespace>
    <innernamespace refid="namespacemodulo__namespace">modulo_namespace</innernamespace>
    <innernamespace refid="namespacepolynomial__ns">polynomial_ns</innernamespace>
    <innernamespace refid="namespacelinear__algebra">linear_algebra</innernamespace>
    <innernamespace refid="namespacelinear__algebra_1_1test">linear_algebra::test</innernamespace>
    <innernamespace refid="namespacepolynomial__ns_1_1test">polynomial_ns::test</innernamespace>
    <innernamespace refid="namespacecombinatorics">combinatorics</innernamespace>
    <innernamespace refid="namespacecombinatorics_1_1test">combinatorics::test</innernamespace>
    <innernamespace refid="namespacepermutation">permutation</innernamespace>
    <innernamespace refid="namespacepermutation_1_1test">permutation::test</innernamespace>
    <innernamespace refid="namespacetime__tools">time_tools</innernamespace>
    <innernamespace refid="namespaceutility_1_1test">utility::test</innernamespace>
    <innernamespace refid="namespaceconvex__hull__trick">convex_hull_trick</innernamespace>
    <innernamespace refid="namespaceconvex__hull__trick_1_1test">convex_hull_trick::test</innernamespace>
    <innernamespace refid="namespacedsu__ds">dsu_ds</innernamespace>
    <innernamespace refid="namespacedsu__ds_1_1test">dsu_ds::test</innernamespace>
    <innernamespace refid="namespacequeue__tools">queue_tools</innernamespace>
    <innernamespace refid="namespacequeue__tools_1_1test">queue_tools::test</innernamespace>
    <innernamespace refid="namespacesegment__tree">segment_tree</innernamespace>
    <innernamespace refid="namespacesegment__tree_1_1test">segment_tree::test</innernamespace>
    <innernamespace refid="namespacesparse__table">sparse_table</innernamespace>
    <innernamespace refid="namespacesparse__table_1_1test">sparse_table::test</innernamespace>
    <innernamespace refid="namespacesplay__tree">splay_tree</innernamespace>
    <innernamespace refid="namespacesplay__tree_1_1test">splay_tree::test</innernamespace>
    <innernamespace refid="namespacegraph__theory">graph_theory</innernamespace>
    <innernamespace refid="namespacegraph__theory_1_1bipartite">graph_theory::bipartite</innernamespace>
    <innernamespace refid="namespaceflow">flow</innernamespace>
    <innernamespace refid="namespaceflow_1_1test">flow::test</innernamespace>
    <innernamespace refid="namespacesat2">sat2</innernamespace>
    <innernamespace refid="namespacesat2_1_1test">sat2::test</innernamespace>
    <innernamespace refid="namespacegraph__theory_1_1bipartite_1_1test">graph_theory::bipartite::test</innernamespace>
    <innernamespace refid="namespacegraph__theory_1_1test">graph_theory::test</innernamespace>
    <innernamespace refid="namespacehld">hld</innernamespace>
    <innernamespace refid="namespacehld_1_1test">hld::test</innernamespace>
    <innernamespace refid="namespacelink__cut">link_cut</innernamespace>
    <innernamespace refid="namespacelink__cut_1_1test">link_cut::test</innernamespace>
    <innernamespace refid="namespacemodulo__namespace_1_1test">modulo_namespace::test</innernamespace>
    <innernamespace refid="namespacestring__tools">string_tools</innernamespace>
    <innernamespace refid="namespacestring__tools_1_1test">string_tools::test</innernamespace>
    <innernamespace refid="namespacecoroutine">coroutine</innernamespace>
    <innernamespace refid="namespacecoroutine_1_1test">coroutine::test</innernamespace>
    <innernamespace refid="namespacegraph__draw">graph_draw</innernamespace>
    <innernamespace refid="namespacegraph__draw_1_1test">graph_draw::test</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__compiled_8cpp_1a349316092037fdd0773335fab4e15ee8" prot="public" static="no">
        <name>PRE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains core files for the template </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="16" column="16" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" prot="public" static="no">
        <name>fo</name>
        <param><defname>i</defname></param>
        <param><defname>...</defname></param>
        <initializer>for ([[maybe_unused]] const auto i : <ref refid="range_8hpp_1a6288a170c5a67a2c0b45c858a043722a" kindref="member">ra</ref>{__VA_ARGS__})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains core files for the template </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="39" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a7b724588414fb77283c807a1ad82313c" prot="public" static="no">
        <name>fr</name>
        <param><defname>i</defname></param>
        <param><defname>...</defname></param>
        <initializer>for ([[maybe_unused]] const auto i : <ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(<ref refid="range_8hpp_1a6288a170c5a67a2c0b45c858a043722a" kindref="member">ra</ref>{__VA_ARGS__}))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="40" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" prot="public" static="no">
        <name>al</name>
        <param><defname>v</defname></param>
        <initializer>begin(v), end(v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="41" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a7f10cc81a560bb73b2eb647dfb10c9db" prot="public" static="no">
        <name>rel_assert</name>
        <param><defname>...</defname></param>
        <initializer>s</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="44" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a108d6c5c51dd46e82a62b262394f0242" prot="public" static="no">
        <name>WARN</name>
        <param><defname>msg</defname></param>
        <initializer>[[deprecated(msg)]] auto warn = []() { <ref refid="test__compiled_8cpp_1a7f10cc81a560bb73b2eb647dfb10c9db" kindref="member">rel_assert</ref>(msg); }; warn();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="45" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1ad47194c03eba4b38147c9d01c0166802" prot="public" static="no">
        <name>TODO</name>
        <param><defname>msg</defname></param>
        <initializer><ref refid="test__compiled_8cpp_1a108d6c5c51dd46e82a62b262394f0242" kindref="member">WARN</ref>(&quot;TODO: &quot; msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="48" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a38dec4d2a6700e0c88ced9eeebb3dfaa" prot="public" static="no">
        <name>paste2</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x ##y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="49" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a396f7338a30cd5803df5ae220da88711" prot="public" static="no">
        <name>paste</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="test__compiled_8cpp_1a38dec4d2a6700e0c88ced9eeebb3dfaa" kindref="member">paste2</ref>(x, y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="50" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a5f81e19fe0a4c7a463bf91e49e641270" prot="public" static="no">
        <name>lets_count</name>
        <initializer><ref refid="structlets__add" kindref="compound">lets_add</ref> <ref refid="test__compiled_8cpp_1a396f7338a30cd5803df5ae220da88711" kindref="member">paste</ref>(_l, __COUNTER__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="51" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" prot="public" static="no">
        <name>let</name>
        <param><defname>a</defname></param>
        <param><defname>...</defname></param>
        <initializer>using a = __VA_ARGS__; <ref refid="test__compiled_8cpp_1a5f81e19fe0a4c7a463bf91e49e641270" kindref="member">lets_count</ref>{#__VA_ARGS__, #a};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="52" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a7796040cab730b2436f078c78d117cab" prot="public" static="no">
        <name>import</name>
        <param><defname>a</defname></param>
        <initializer>using namespace a; <ref refid="test__compiled_8cpp_1a5f81e19fe0a4c7a463bf91e49e641270" kindref="member">lets_count</ref>{#a &quot;::&quot;, &quot;&quot;};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="55" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" prot="public" static="no">
        <name>bin</name>
        <param><defname>op</defname></param>
        <param><defname>Tp</defname></param>
        <initializer>auto operator op(Tp const &amp;a, Tp const &amp;b) { return a.x op b.x; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="137" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" prot="public" static="no">
        <name>aug</name>
        <param><defname>op</defname></param>
        <initializer>template &lt;typename T1, typename T2&gt; auto operator op ##=(T1 &amp;a, const T2 &amp;b) { return a = a op b; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="198" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1aef20301df3ed18a53843fb3a5b69bd5b" prot="public" static="no">
        <name>FUNCTOR</name>
        <param><defname>func</defname></param>
        <initializer>struct { template &lt;typename... Ts&gt; decltype(auto) operator()(Ts &amp;&amp;... args) const { return (func)(forward&lt;decltype(args)&gt;(args)...); } }</initializer>
        <briefdescription>
<para>Expands to a functor type that calls func. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="284" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a8de3ed741dadc9c979a4ff17c0a9116e" prot="public" static="no">
        <name>NDEBUG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="305" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a49bc164f30e64702250d2cbea09bf86c" prot="public" static="no">
        <name>dbg</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="306" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a76cdb96860b77886867832efcffeeb32" prot="public" static="no">
        <name>lambda</name>
        <param><defname>f</defname></param>
        <initializer>[](auto &amp;&amp;... args) -&gt; decltype(auto) { return f(forward&lt;decltype(args)&gt;(args)...); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="453" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a28bca63adefcbb2c4a2dbf5e9e9a57fe" prot="public" static="no">
        <name>DEFINE_FUNC_EQ</name>
        <param><defname>func</defname></param>
        <initializer>template &lt;typename T&gt; void func ##_eq(T &amp;x, const T &amp;y) { x = func(x, y); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="455" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a4072e106efe575805c4864dbbd387090" prot="public" static="no">
        <name>USE_RANDOM_DEVICE_PATCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="576" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a07a24840ac2854166f541e047362d0bf" prot="public" static="no">
        <name>CO_SWITCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4400" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a1672ec864a13c8374fa9bfc6595e67d6" prot="public" static="no">
        <name>cobegin</name>
        <initializer>static <ref refid="structll" kindref="compound">ll</ref> pos = 0; switch (pos) { case 0:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4402" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a904227d8e8b2e67adef1e140e9990a5c" prot="public" static="no">
        <name>coend</name>
        <initializer>default: throw out_of_range(&quot;Coroutine reached end.&quot;); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4406" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__compiled_8cpp_1a40b2517161c64f0179823b67d4af0242" prot="public" static="no">
        <name>coreturn</name>
        <param><defname>x</defname></param>
        <initializer>pos = __LINE__; return x; case __LINE__:;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4410" column="9" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4410" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78" prot="public" static="no" strong="no">
        <type></type>
        <name>isect</name>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="168" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="168" bodyend="168"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="test__compiled_8cpp_1a25adbdf7a4a6b491d22ca84426e075c6" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>using ull =  unsigned long long</definition>
        <argsstring></argsstring>
        <name>ull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="76" column="46" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" prot="public" static="no">
        <type>long long</type>
        <definition>using ll =  long long</definition>
        <argsstring></argsstring>
        <name>ll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="78" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a2e2e73e53fc509e05f252ef083503838" prot="public" static="no">
        <type>long double</type>
        <definition>using ld =  long double</definition>
        <argsstring></argsstring>
        <name>ld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="79" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a58e2677d80a09b5be0f0e56ef70d4507" prot="public" static="no">
        <type>pair&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using pr =  pair&lt;ll, ll&gt;</definition>
        <argsstring></argsstring>
        <name>pr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="80" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1ac6774acaa7fff278845893bd84e35525" prot="public" static="no">
        <type>complex&lt; double &gt;</type>
        <definition>using com =  complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>com</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="81" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1ae6bbe80dfafc6e30f518f3de1cafec50" prot="public" static="no">
        <type>complex&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using point =  complex&lt;ll&gt;</definition>
        <argsstring></argsstring>
        <name>point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="82" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1ac0b978e8ffc2c44656160a679f86e22a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>std::priority_queue&lt; T, vector&lt; T &gt;, Comp &gt;</type>
        <definition>using prio_queue_t =  std::priority_queue&lt;T, vector&lt;T&gt;, Comp&gt;</definition>
        <argsstring></argsstring>
        <name>prio_queue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="84" column="15" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a71fb2247d044e41f5345bcdb26020926" prot="public" static="no">
        <type>high_resolution_clock</type>
        <definition>using clock_ =  high_resolution_clock</definition>
        <argsstring></argsstring>
        <name>clock_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="85" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a6288a170c5a67a2c0b45c858a043722a" prot="public" static="no">
        <type><ref refid="structrange" kindref="compound">range</ref>&lt; <ref refid="structint__it" kindref="compound">int_it</ref>&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt;</type>
        <definition>using ra =  range&lt;int_it&lt;ll&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="163" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a8ca39513ee57e00e1d6eecf32fd87035" prot="public" static="no">
        <type>struct { template&lt; typename... Ts &gt; decltype(auto) operator()(Ts &amp;&amp;... args) const { return(max)(forward&lt; decltype(args)&gt;(args)...)</type>
        <definition>using Max =  struct { template &lt;typename... Ts&gt; decltype(auto) operator()(Ts &amp;&amp;... args) const { return ( max )(forward&lt;decltype(args)&gt;(args)...)</definition>
        <argsstring></argsstring>
        <name>Max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="290" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="test__compiled_8cpp_1a6e5336c573515260e7a624f1f72924a1" prot="public" static="no">
        <type>struct { template&lt; typename... Ts &gt; decltype(auto) operator()(Ts &amp;&amp;... args) const { return(min)(forward&lt; decltype(args)&gt;(args)...)</type>
        <definition>using Min =  struct { template &lt;typename... Ts&gt; decltype(auto) operator()(Ts &amp;&amp;... args) const { return ( min )(forward&lt;decltype(args)&gt;(args)...)</definition>
        <argsstring></argsstring>
        <name>Min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="291" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool debug_mode</definition>
        <argsstring></argsstring>
        <name>debug_mode</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="42" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="42" bodyend="-1"/>
        <referencedby refid="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="test__compiled_8cpp" startline="1142" endline="1169">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1a10aff294e2147e1cfe921bc2648b4399" prot="public" static="no" mutable="no">
        <type>vector&lt; pair&lt; string, string &gt; &gt;</type>
        <definition>vector&lt;pair&lt;string, string&gt; &gt; lets</definition>
        <argsstring></argsstring>
        <name>lets</name>
        <initializer>{
    {&quot;__debug::&quot;, &quot;&quot;}, {&quot;const &quot;, &quot;&quot;}, {&quot;__cxx11::basic_string&lt;char&gt;&quot;, &quot;string&quot;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="59" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="59" bodyend="-1"/>
        <referencedby refid="structlets__add_1a0ec85cd9b6101f88a531cd43e6aa5f87" compoundref="test__compiled_8cpp" startline="62" endline="62">lets_add::lets_add</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1aa3bd6940ab68cd10b31ac2ff2495ffab" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l__COUNTER__</definition>
        <argsstring></argsstring>
        <name>_l__COUNTER__</name>
        <initializer>{&quot;std&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="69" column="30" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto inf</definition>
        <argsstring></argsstring>
        <name>inf</name>
        <initializer>= <ref refid="structll" kindref="compound">ll</ref>(numeric_limits&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;::max()) / 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Infinity </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="93" column="16" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="93" bodyend="-1"/>
        <referencedby refid="test__compiled_8cpp_1a19000e539a20acfdcd7e8fdce1d970f4" compoundref="test__compiled_8cpp" startline="294" endline="294">identity</referencedby>
        <referencedby refid="classpolynomial__ns_1_1Polynomial_1a07d232f6e14fade387c39fe8ea8e6b96" compoundref="test__compiled_8cpp" startline="694" endline="703">polynomial_ns::Polynomial&lt; T &gt;::degree</referencedby>
        <referencedby refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" compoundref="test__compiled_8cpp" startline="1594" endline="1594">queue_tools::MinStack&lt; T &gt;::min</referencedby>
        <referencedby refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" compoundref="test__compiled_8cpp" startline="2474" endline="2520">biconnected</referencedby>
        <referencedby refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="test__compiled_8cpp" startline="3292" endline="3335">centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" prot="public" static="no" mutable="no">
        <type>auto const</type>
        <definition>auto const delim</definition>
        <argsstring></argsstring>
        <name>delim</name>
        <initializer>= &quot;, &quot;s</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delimiter for debug output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="94" column="12" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="94" bodyend="-1"/>
        <referencedby refid="test__compiled_8cpp_1affce1f2cffc83e9e4ecc9203fdd32d29" compoundref="test__compiled_8cpp" startline="379" endline="387">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1a989a29f26fc8591b33ecf33d4d2c7029" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <initializer>= 2 * 3.1415926535897932384626433L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pi </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="95" column="16" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool multitest</definition>
        <argsstring></argsstring>
        <name>multitest</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4494" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4494" bodyend="-1" declfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" declline="96" declcolumn="13"/>
        <referencedby refid="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="test__compiled_8cpp" startline="1142" endline="1169">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" prot="public" static="no" mutable="no">
        <type>auto &amp;</type>
        <definition>auto&amp; in</definition>
        <argsstring></argsstring>
        <name>in</name>
        <initializer>= cin</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="1140" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="1140" bodyend="-1"/>
        <referencedby refid="structrin_1ac54363dcbc7ce811509e7ff360b78dad" compoundref="test__compiled_8cpp" startline="360" endline="365">rin::operator&lt;&lt;</referencedby>
        <referencedby refid="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="test__compiled_8cpp" startline="1142" endline="1169">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>vector&lt;ll&gt; divs</definition>
        <argsstring></argsstring>
        <name>divs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3703" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3703" bodyend="-1"/>
        <referencedby refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" compoundref="test__compiled_8cpp" startline="3705" endline="3731">prime</referencedby>
        <referencedby refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="test__compiled_8cpp" startline="3775" endline="3797">fac</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator==</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="139" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="140" column="13" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a5b1fcbc62cc963f6ab2598b13f114dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="153" column="13" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="153" bodyend="155"/>
        <references refid="structrange_1a626638a2956ba810e53246d756b2e653" compoundref="range_8hpp" startline="42">range&lt; T &gt;::bg</references>
        <references refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" compoundref="range_8hpp" startline="42">range&lt; T &gt;::ed</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a295cbb09d532a8eeeaab519fd1db0928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&amp;</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="156" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="156" bodyend="158"/>
        <references refid="structrange_1a626638a2956ba810e53246d756b2e653" compoundref="range_8hpp" startline="42">range&lt; T &gt;::bg</references>
        <references refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" compoundref="range_8hpp" startline="42">range&lt; T &gt;::ed</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rev</definition>
        <argsstring>(const Range &amp;r)</argsstring>
        <name>rev</name>
        <param>
          <type>const Range &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="159" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="159" bodyend="162"/>
        <referencedby refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" compoundref="test__compiled_8cpp" startline="2474" endline="2520">biconnected</referencedby>
        <referencedby refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="test__compiled_8cpp" startline="3292" endline="3335">centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt;</type>
        <definition>int_it&lt;T&gt; operator+</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="164" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="164" bodyend="166"/>
        <references refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" compoundref="range_8hpp" startline="11">int_it&lt; T &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt;</type>
        <definition>int_it&lt;T&gt; operator-</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="167" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="167" bodyend="167"/>
        <references refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" compoundref="range_8hpp" startline="11">int_it&lt; T &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto intersect</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="169" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="169" bodyend="183"/>
        <references refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" compoundref="test__compiled_8cpp" startline="168">cont</references>
        <references refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" compoundref="test__compiled_8cpp" startline="168">dis</references>
        <references refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" compoundref="test__compiled_8cpp" startline="168">eq</references>
        <references refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" compoundref="test__compiled_8cpp" startline="168">null</references>
        <references refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" compoundref="test__compiled_8cpp" startline="168">over</references>
        <referencedby refid="test__compiled_8cpp_1a2e6b26fca3ba13b074816e7b97f8245d" compoundref="test__compiled_8cpp" startline="184" endline="186">operator^</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a2e6b26fca3ba13b074816e7b97f8245d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator^</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="184" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="184" bodyend="186"/>
        <references refid="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" compoundref="test__compiled_8cpp" startline="169" endline="183">intersect</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a3eb62dcf88ab5afad4d62c6fea4bb570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto filter</definition>
        <argsstring>(vector&lt; ra &gt; &amp;v)</argsstring>
        <name>filter</name>
        <param>
          <type>vector&lt; <ref refid="range_8hpp_1a6288a170c5a67a2c0b45c858a043722a" kindref="member">ra</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="187" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="187" bodyend="195"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a141476c36a8f609ac7c776be162abb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator+=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="202" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a566f5b78944cfa1ff2b470ecd0522ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator-=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="203" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ac66e5f2d4fb3a7d5076a44e419736713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator*=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="204" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a35c5f7ec97de94c93f2301e16d3f7efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator/=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="205" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_floating_point_v&lt; T &gt;, T &gt;</type>
        <definition>enable_if_t&lt;is_floating_point_v&lt;T&gt;, T&gt; invert</definition>
        <argsstring>(multiplies&lt;&gt;, const T &amp;x)</argsstring>
        <name>invert</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="206" column="25" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="206" bodyend="208"/>
        <referencedby refid="test__compiled_8cpp_1ae9e59a2d15287021fd21d14d2eb206c4" compoundref="test__compiled_8cpp" startline="209" endline="211">operator/</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ae9e59a2d15287021fd21d14d2eb206c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Group</type>
          </param>
        </templateparamlist>
        <type>Group</type>
        <definition>Group operator/</definition>
        <argsstring>(Group const &amp;a, Group const &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>Group const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Group const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="209" column="19" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="209" bodyend="211"/>
        <references refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" compoundref="test__compiled_8cpp" startline="206" endline="208">invert</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ab6822e2f5527212c7db6dd31be7f3ba6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator-</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="212" column="30" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a98ed0803268ba29fcc8977206b177923" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator!=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="215" column="30" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a1297749985d820e08c6c88a285dc80eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="218" column="15" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ae3edbf9ffcbf3c8b40d15f6666442cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="219" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ad8f1353b1f5665443a78d860006e9920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="220" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a239c272472acf3f9ce7f2e44f0895160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unordered_map&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>unordered_map&lt;ll, ll&gt; operator+</definition>
        <argsstring>(unordered_map&lt; ll, ll &gt; a, unordered_map&lt; ll, ll &gt; const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>unordered_map&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_map&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="221" column="15" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a8acbbd6e305005c27020dfb9bbe27d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator|</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns union of sets a and b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>p_a:... </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>p_b:... </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the union of sets a and b </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="234" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="234" bodyend="239"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a9e98ecb7739ca6a5c0069a9a26d2a731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&amp;</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="240" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="240" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sub_set</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b, unordered_set&lt; T &gt; &amp;ret)</argsstring>
        <name>sub_set</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; &amp;</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="251" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="251" bodyend="258"/>
        <referencedby refid="test__compiled_8cpp_1af237204859d16b6fadb92d576c7b33b1" compoundref="test__compiled_8cpp" startline="259" endline="262">operator-</referencedby>
        <referencedby refid="test__compiled_8cpp_1a278d4d0450b96c1926a34fe49f29d602" compoundref="test__compiled_8cpp" startline="263" endline="267">operator^</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1af237204859d16b6fadb92d576c7b33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator-</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="259" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="259" bodyend="262"/>
        <references refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" compoundref="test__compiled_8cpp" startline="251" endline="258">sub_set</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a278d4d0450b96c1926a34fe49f29d602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator^</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="263" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="263" bodyend="267"/>
        <references refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" compoundref="test__compiled_8cpp" startline="251" endline="258">sub_set</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator*</definition>
        <argsstring>(vector&lt; T &gt; a, vector&lt; T &gt; b)</argsstring>
        <name>operator*</name>
        <param>
          <type>vector&lt; T &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>vector&lt; T &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="268" column="18" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="268" bodyend="273"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1af877591533298d5fba3df85680cabb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator+</definition>
        <argsstring>(Iterator it, enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, ll &gt; n)</argsstring>
        <name>operator+</name>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="275" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="275" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(plus&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>plus&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="292" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="292" bodyend="292"/>
        <referencedby refid="classsegment__tree_1_1SegmentTree_1ad8b2ae5fb114f861e0dcc0fb5d370b8f" compoundref="test__compiled_8cpp" startline="1716" endline="1729">segment_tree::SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</referencedby>
        <referencedby refid="classsparse__table_1_1DisjointSparseTable_1aef1bf29d0fe4ca8fa924001bf90fde22" compoundref="test__compiled_8cpp" startline="1975" endline="1999">sparse_table::DisjointSparseTable&lt; T, Monoid &gt;::DisjointSparseTable</referencedby>
        <referencedby refid="classsegment__tree_1_1SegmentTree_1a52f59c0f0db30957d70083a26e7ac967" compoundref="test__compiled_8cpp" startline="1731" endline="1752">segment_tree::SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</referencedby>
        <referencedby refid="classBIT_1a495d58c744095867ad69123897c60700" compoundref="test__compiled_8cpp" startline="1263" endline="1269">BIT&lt; Value, MonoidOp &gt;::query</referencedby>
        <referencedby refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" compoundref="test__compiled_8cpp" startline="1753" endline="1771">segment_tree::SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</referencedby>
        <referencedby refid="classsparse__table_1_1SparseTable_1a0ad8b0233da443f1f842b27183f05265" compoundref="test__compiled_8cpp" startline="1953" endline="1962">sparse_table::SparseTable&lt; T, Semilattice &gt;::query</referencedby>
        <referencedby refid="classsparse__table_1_1DisjointSparseTable_1a771c763802ff4f1679749951ae94393e" compoundref="test__compiled_8cpp" startline="2001" endline="2015">sparse_table::DisjointSparseTable&lt; T, Monoid &gt;::query</referencedby>
        <referencedby refid="classhld_1_1HLD_1a89ad91fa5429a48db553da8d44849415" compoundref="test__compiled_8cpp" startline="3510" endline="3514">hld::HLD&lt; T, Monoid, QueryDS &gt;::query</referencedby>
        <referencedby refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" compoundref="test__compiled_8cpp" startline="1779" endline="1818">segment_tree::SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1acc5a0ae67ef6a3bd347c85cab4a15313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(multiplies&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="293" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a19000e539a20acfdcd7e8fdce1d970f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Max, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="operations_8hpp_1a8ca39513ee57e00e1d6eecf32fd87035" kindref="member">Max</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="294" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="294" bodyend="294"/>
        <references refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" compoundref="test__compiled_8cpp" startline="93">inf</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1aa9ba94adf14b5b5566e3a750fa5255b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Min, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="operations_8hpp_1a6e5336c573515260e7a624f1f72924a1" kindref="member">Min</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="295" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="295" bodyend="295"/>
        <references refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" compoundref="test__compiled_8cpp" startline="93">inf</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;&lt;</definition>
        <argsstring>(R &amp;r, const T &amp;x) -&gt; decltype(r.in &gt;&gt; const_cast&lt; T &amp; &gt;(x), declval&lt; enable_if_t&lt; is_same&lt; R, rin &gt;::value, rin &amp; &gt;&gt;())</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>R &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="369" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="369" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a7df52f31e81b51a76e8f8699accaf3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same&lt; T, istream &gt;::value, <ref refid="structrin" kindref="compound">rin</ref> &gt;</type>
        <definition>enable_if_t&lt;is_same&lt;T, istream&gt;::value, rin&gt; operator&gt;&gt;</definition>
        <argsstring>(Stream &amp;is, T &amp;x)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="375" column="14" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1affce1f2cffc83e9e4ecc9203fdd32d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto&amp; operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, tuple&lt; T... &gt; t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>tuple&lt; T... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="379" column="15" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="379" bodyend="387"/>
        <references refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" compoundref="test__compiled_8cpp" startline="94">delim</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a1b122fd1e3de03a421d98f4bbb1473d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto print</definition>
        <argsstring>(const T1 &amp;arg1, const Ts &amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Print arguments separated by spaces to stdout</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="388" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void main2</definition>
        <argsstring>()</argsstring>
        <name>main2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="4496" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="4496" bodyend="4525" declfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" declline="1134" declcolumn="6"/>
        <references refid="test__compiled_8cpp_1af86f570cf0a5201c700ffeec06aec7f6" compoundref="test__compiled_8cpp" startline="1288" endline="1301">test_bit</references>
        <references refid="namespacecombinatorics_1_1test_1a28cd50807d464588cc9b5add7bed4f97" compoundref="test__combinatorics_8hpp" startline="28" endline="32">combinatorics::test::test_combinatorics</references>
        <references refid="namespacecoroutine_1_1test_1a22ebde81203b27ead34dd1fcc2afdbfc" compoundref="test__compiled_8cpp" startline="4439" endline="4449">coroutine::test::test_coroutine</references>
        <references refid="namespaceutility_1_1test_1aa1aed4e58acebcfd6d9150b64f4ad975" compoundref="test__utility_8hpp" startline="50" endline="59">utility::test::test_counting_sort</references>
        <references refid="namespacestring__tools_1_1test_1a5165ff514ae968de6c81aedd2ce599ab" compoundref="test__dict__search_8hpp" startline="37" endline="40">string_tools::test::test_dict_search</references>
        <references refid="namespacedsu__ds_1_1test_1adafe4323a317f827a39c3516cf6d792b" compoundref="test__dsu_8hpp" startline="4" endline="16">dsu_ds::test::test_dsu</references>
        <references refid="namespaceconvex__hull__trick_1_1test_1a05eb98d10b7444bbdc9fe64f4d99676a" compoundref="test__cht_8hpp" startline="59" endline="67">convex_hull_trick::test::test_geometry</references>
        <references refid="namespacegraph__draw_1_1test_1a037737d6386f4405a42dc842eb4d7436" compoundref="test__compiled_8cpp" startline="4481" endline="4490">graph_draw::test::test_graph_draw</references>
        <references refid="namespacegraph__theory_1_1test_1a147e0cf4f86928e4e422c6b9198a2371" compoundref="test__all_8hpp" startline="73" endline="87">graph_theory::test::test_graph_theory</references>
        <references refid="namespacehld_1_1test_1a2c2ea10aedda3e4e51f08d38ea3fa3f0" compoundref="test__hld_8hpp" startline="4" endline="27">hld::test::test_hld</references>
        <references refid="namespacelinear__algebra_1_1test_1aec6af708eda9aa2982dcba2a651f4bf9" compoundref="test__linear__algebra_8hpp" startline="27" endline="32">linear_algebra::test::test_linear_algebra</references>
        <references refid="namespacelink__cut_1_1test_1ad63bee2821de932f5d295238e48d106f" compoundref="test__link__cut_8hpp" startline="3" endline="48">link_cut::test::test_link_cut_tree</references>
        <references refid="namespacemodulo__namespace_1_1test_1a1574d4c610506ea86664c88fc549aedf" compoundref="test__modulo_8hpp" startline="16" endline="19">modulo_namespace::test::test_modulo</references>
        <references refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</references>
        <references refid="namespacepermutation_1_1test_1a35c04b3a3683be26d7eb0723d772fad4" compoundref="test__permutation_8hpp" startline="25" endline="29">permutation::test::test_permutation</references>
        <references refid="namespacepolynomial__ns_1_1test_1a5ed51dd96ea5d0597e0c721fb647bfcc" compoundref="test__polynomial_8hpp" startline="3" endline="19">polynomial_ns::test::test_polynomial</references>
        <references refid="namespacequeue__tools_1_1test_1ae0e3be2c757c8f50b8baee654071b01e" compoundref="test__queue_8hpp" startline="55" endline="59">queue_tools::test::test_queue</references>
        <references refid="namespacesat2_1_1test_1a39c93d63732b7216ede171b3589de7f2" compoundref="test__2sat_8hpp" startline="4" endline="16">sat2::test::test_sat2</references>
        <references refid="namespacesegment__tree_1_1test_1a9d9bbf8a59763caf631ceb0808e1b105" compoundref="test__segment__tree_8hpp" startline="66" endline="80">segment_tree::test::test_segment_tree</references>
        <references refid="namespacesparse__table_1_1test_1ad6ec7466ef06bcb50a79ee26c4a05db0" compoundref="test__sparse__table_8hpp" startline="17" endline="23">sparse_table::test::test_sparse_table</references>
        <references refid="namespacesplay__tree_1_1test_1a5aa5fd954b1cb0fb099a2310d2801e9e" compoundref="test__splay__tree_8hpp" startline="4" endline="33">splay_tree::test::test_splay_tree</references>
        <references refid="namespacestring__tools_1_1test_1a93443a5be0ecc44e9264ce39390c8441" compoundref="test__string_8hpp" startline="24" endline="27">string_tools::test::test_string</references>
        <references refid="namespacestring__tools_1_1test_1a81ed0421a8991a10c16c1fdaa0cf8cf6" compoundref="test__suffix__array_8hpp" startline="25" endline="35">string_tools::test::test_suffix_array</references>
        <references refid="namespaceutility_1_1test_1a8aec6a2b496df7ad483a46db1649ea2c" compoundref="test__utility_8hpp" startline="60" endline="68">utility::test::test_utility</references>
        <referencedby refid="main_8hpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="main_8hpp" startline="9" endline="36">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="1142" column="5" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="1142" bodyend="1169"/>
        <references refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" compoundref="core_2all_8hpp" startline="56">cerr</references>
        <references refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" compoundref="test__compiled_8cpp" startline="42">debug_mode</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" compoundref="test__compiled_8cpp" startline="1140">in</references>
        <references refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" compoundref="test__compiled_8cpp" startline="4496" endline="4525">main2</references>
        <references refid="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" compoundref="test__compiled_8cpp" startline="4494">multitest</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1af86f570cf0a5201c700ffeec06aec7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bit</definition>
        <argsstring>()</argsstring>
        <name>test_bit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="1288" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="1288" bodyend="1301"/>
        <references refid="classBIT_1a495d58c744095867ad69123897c60700" compoundref="bit_8hpp" startline="18" endline="24">BIT&lt; Value, MonoidOp &gt;::query</references>
        <references refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" compoundref="bit_8hpp" startline="31" endline="35">BIT&lt; Value, MonoidOp &gt;::update</references>
        <referencedby refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" compoundref="test__compiled_8cpp" startline="4496" endline="4525">main2</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; vector&lt; char &gt;, vector&lt; array&lt; <ref refid="structll" kindref="compound">ll</ref>, 2 &gt; &gt; &gt;</type>
        <definition>pair&lt;vector&lt;char&gt;, vector&lt;array&lt;ll, 2&gt; &gt; &gt; biconnected</definition>
        <argsstring>(const GraphAdj &amp;graph)</argsstring>
        <name>biconnected</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns articulation points and bridges of<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pair of a vector with 1s for all the articulation points and a vector of bridge edges </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2474" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2474" bodyend="2520"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" compoundref="test__compiled_8cpp" startline="93">inf</references>
        <references refid="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" compoundref="utility_8hpp" startline="25" endline="25">utility::min_eq</references>
        <references refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" compoundref="dsu_8hpp" startline="6">dsu_ds::dsu::parent</references>
        <references refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" compoundref="test__compiled_8cpp" startline="159" endline="162">rev</references>
        <referencedby refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__compiled_8cpp" startline="2633" endline="2722">test_biconnected</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a6b3f22cd584c5d8be1de2703c3b9e004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; vector&lt; vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt; &gt;</type>
        <definition>vector&lt;vector&lt;vector&lt;ll&gt; &gt; &gt; ear_decomp</definition>
        <argsstring>(const GraphAdj &amp;graph)</argsstring>
        <name>ear_decomp</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Returns ear decomposition of graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>the graph as an adjacency list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2523" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2523" bodyend="2555"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" compoundref="dsu_8hpp" startline="6">dsu_ds::dsu::parent</references>
        <referencedby refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" compoundref="test__compiled_8cpp" startline="2557" endline="2609">biconnected_ear</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; vector&lt; char &gt;, vector&lt; array&lt; <ref refid="structll" kindref="compound">ll</ref>, 2 &gt; &gt; &gt;</type>
        <definition>pair&lt;vector&lt;char&gt;, vector&lt;array&lt;ll, 2&gt; &gt; &gt; biconnected_ear</definition>
        <argsstring>(GraphAdj graph)</argsstring>
        <name>biconnected_ear</name>
        <param>
          <type><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref></type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Finds biconnected components of graph using ear decompositions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2557" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2557" bodyend="2609"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="test__compiled_8cpp" startline="2288" endline="2291">graph_theory::add_edge</references>
        <references refid="test__compiled_8cpp_1a6b3f22cd584c5d8be1de2703c3b9e004" compoundref="test__compiled_8cpp" startline="2523" endline="2555">ear_decomp</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <referencedby refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__compiled_8cpp" startline="2633" endline="2722">test_biconnected</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a48fe6b184e236d8a81058e4d85ff49c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref></type>
        <definition>GraphAdj permute</definition>
        <argsstring>(const vector&lt; ll &gt; &amp;perm, const GraphAdj &amp;graph)</argsstring>
        <name>permute</name>
        <param>
          <type>const vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &amp;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>graph</parametername>
</parameternamelist>
<parameterdescription>
<para>permuted by</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2613" column="10" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2613" bodyend="2622"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" compoundref="combinatorics_8hpp" startline="5" endline="8">combinatorics::perm</references>
        <referencedby refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__compiled_8cpp" startline="2633" endline="2722">test_biconnected</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1acecf2de539ad624328fba6f40a848ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref></type>
        <definition>GraphAdj graph_disunion</definition>
        <argsstring>(const GraphAdj &amp;a, const GraphAdj &amp;b)</argsstring>
        <name>graph_disunion</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2623" column="10" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2623" bodyend="2632"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <referencedby refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__compiled_8cpp" startline="2633" endline="2722">test_biconnected</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_biconnected</definition>
        <argsstring>()</argsstring>
        <name>test_biconnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2633" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2633" bodyend="2722"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="test__compiled_8cpp" startline="2288" endline="2291">graph_theory::add_edge</references>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" compoundref="test__compiled_8cpp" startline="2474" endline="2520">biconnected</references>
        <references refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" compoundref="test__compiled_8cpp" startline="2557" endline="2609">biconnected_ear</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="test__compiled_8cpp_1acecf2de539ad624328fba6f40a848ef1" compoundref="test__compiled_8cpp" startline="2623" endline="2632">graph_disunion</references>
        <references refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" compoundref="combinatorics_8hpp" startline="5" endline="8">combinatorics::perm</references>
        <references refid="test__compiled_8cpp_1a48fe6b184e236d8a81058e4d85ff49c3" compoundref="test__compiled_8cpp" startline="2613" endline="2622">permute</references>
        <references refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" compoundref="utility_8hpp" startline="147">utility::reng</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ac5d2f097a07285733e610a52b16e790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_graph_view</definition>
        <argsstring>()</argsstring>
        <name>test_graph_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3022" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3022" bodyend="3038"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="test__compiled_8cpp" startline="2288" endline="2291">graph_theory::add_edge</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; array&lt; <ref refid="structll" kindref="compound">ll</ref>, 2 &gt;, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>pair&lt;array&lt;ll, 2&gt;, ll&gt; tree_diameter</definition>
        <argsstring>(const GraphAdj &amp;g)</argsstring>
        <name>tree_diameter</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Find tree diameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns diameter and center of a tree :param: g </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3105" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3105" bodyend="3115"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <referencedby refid="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" compoundref="test__compiled_8cpp" startline="3116" endline="3138">test_tree_diameter</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_tree_diameter</definition>
        <argsstring>()</argsstring>
        <name>test_tree_diameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3116" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3116" bodyend="3138"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="test__compiled_8cpp" startline="2288" endline="2291">graph_theory::add_edge</references>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" compoundref="test__compiled_8cpp" startline="3105" endline="3115">tree_diameter</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>vector&lt; vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt;</type>
        <definition>vector&lt;vector&lt;ll&gt; &gt; centroid_decomp</definition>
        <argsstring>(const Graph &amp;tree)</argsstring>
        <name>centroid_decomp</name>
        <param>
          <type>const Graph &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Centroid decomposition of a tree. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cent_lvl where cent_lvl[i][j] is the jth centroid on the path from the root to i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Whether we have visited this node as a centroid</para>
<para>Set up max_child</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3292" column="20" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3292" bodyend="3335"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="namespacegraph__theory_1a9d6eaad6577fb0289aee53b10fd4a260" compoundref="core_8hpp" startline="123" endline="131">graph_theory::get_size</references>
        <references refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" compoundref="test__compiled_8cpp" startline="93">inf</references>
        <references refid="namespaceutility_1a80f7a687b4e8d135cde1ae1d6b169d13" compoundref="utility_8hpp" startline="27" endline="27">utility::max_eq</references>
        <references refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" compoundref="test__compiled_8cpp" startline="159" endline="162">rev</references>
        <references refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" compoundref="lca_8hpp" startline="4">tree::sz</references>
        <referencedby refid="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" compoundref="test__compiled_8cpp" startline="3337" endline="3349">test_centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_centroid_decomp</definition>
        <argsstring>()</argsstring>
        <name>test_centroid_decomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3337" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3337" bodyend="3349"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="test__compiled_8cpp" startline="2288" endline="2291">graph_theory::add_edge</references>
        <references refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="test__compiled_8cpp" startline="3292" endline="3335">centroid_decomp</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto prime</definition>
        <argsstring>(ll n)</argsstring>
        <name>prime</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return whether integer n &gt;= 2 is prime. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3705" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3705" bodyend="3731"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" compoundref="test__compiled_8cpp" startline="3703">divs</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" compoundref="permutation_8hpp" startline="79" endline="81">permutation::power</references>
        <referencedby refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="test__compiled_8cpp" startline="3775" endline="3797">fac</referencedby>
        <referencedby refid="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" compoundref="test__compiled_8cpp" startline="3865" endline="3872">test_prime</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>vector&lt;ll&gt; divisors</definition>
        <argsstring>(ll x)</argsstring>
        <name>divisors</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return all divisors of x in sorted order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3733" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3733" bodyend="3748"/>
        <references refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="test__compiled_8cpp" startline="41">al</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <referencedby refid="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" compoundref="test__compiled_8cpp" startline="3873" endline="3880">test_divisors</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ae8dd217fd3a3de037c6a1031aef548aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>vector&lt;ll&gt; sieve</definition>
        <argsstring>(ll n)</argsstring>
        <name>sieve</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Linear time prime sieve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Sieve numbers in [0,n) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a vector where ret[idx] is the smallest prime divisor of idx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3755" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3755" bodyend="3770"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <referencedby refid="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" compoundref="test__compiled_8cpp" startline="3881" endline="3881">test_sieve</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unordered_map&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>unordered_map&lt;ll, ll&gt; fac</definition>
        <argsstring>(ll n)</argsstring>
        <name>fac</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the factorization of n. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a map from the prime to the exponent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3775" column="15" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3775" bodyend="3797"/>
        <references refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" compoundref="test__compiled_8cpp" startline="3703">divs</references>
        <references refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" compoundref="test__compiled_8cpp" startline="3705" endline="3731">prime</references>
        <referencedby refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" compoundref="test__compiled_8cpp" startline="3840" endline="3863">primitive_root</referencedby>
        <referencedby refid="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" compoundref="test__compiled_8cpp" startline="3882" endline="3890">test_fac</referencedby>
        <referencedby refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" compoundref="test__compiled_8cpp" startline="3805" endline="3812">totient</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void egcd</definition>
        <argsstring>(const ll a, const ll b, ll &amp;x, ll &amp;y)</argsstring>
        <name>egcd</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Sets x and y so that <formula id="30">$x\cdot a + y\cdot b = \gcd(a,b)$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3799" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3799" bodyend="3801"/>
        <references refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" compoundref="modulo_8hpp" startline="29" endline="35">modulo_namespace::mod</references>
        <referencedby refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" compoundref="test__compiled_8cpp" startline="3891" endline="3895">test_egcd</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll totient</definition>
        <argsstring>(ll n)</argsstring>
        <name>totient</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the totient of the integer n. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>n &gt;= 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3805" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3805" bodyend="3812"/>
        <references refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="test__compiled_8cpp" startline="3775" endline="3797">fac</references>
        <references refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" compoundref="combinatorics_8hpp" startline="9" endline="12">combinatorics::fact</references>
        <referencedby refid="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" compoundref="test__compiled_8cpp" startline="3816" endline="3837">dlog</referencedby>
        <referencedby refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" compoundref="test__compiled_8cpp" startline="3840" endline="3863">primitive_root</referencedby>
        <referencedby refid="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" compoundref="test__compiled_8cpp" startline="3903" endline="3906">test_totient</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll dlog</definition>
        <argsstring>(const modulo a, const modulo b)</argsstring>
        <name>dlog</name>
        <param>
          <type>const <ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Finds x such that a^x = b (mod M) using baby-step giant-step algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>a and M must be coprime. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3816" column="4" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3816" bodyend="3837"/>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" compoundref="modulo_8hpp" startline="29" endline="35">modulo_namespace::mod</references>
        <references refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" compoundref="permutation_8hpp" startline="79" endline="81">permutation::power</references>
        <references refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" compoundref="test__compiled_8cpp" startline="3805" endline="3812">totient</references>
        <referencedby refid="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" compoundref="test__compiled_8cpp" startline="3907" endline="3922">test_dlog</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo primitive_root</definition>
        <argsstring>()</argsstring>
        <name>primitive_root</name>
        <briefdescription>
<para>Returns a primitive root modulo M. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3840" column="8" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3840" bodyend="3863"/>
        <references refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="test__compiled_8cpp" startline="3775" endline="3797">fac</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" compoundref="permutation_8hpp" startline="79" endline="81">permutation::power</references>
        <references refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" compoundref="test__compiled_8cpp" startline="3805" endline="3812">totient</references>
        <referencedby refid="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" compoundref="test__compiled_8cpp" startline="3923" endline="3932">test_primitive_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_prime</definition>
        <argsstring>()</argsstring>
        <name>test_prime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3865" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3865" bodyend="3872"/>
        <references refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" compoundref="test__compiled_8cpp" startline="3705" endline="3731">prime</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_divisors</definition>
        <argsstring>()</argsstring>
        <name>test_divisors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3873" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3873" bodyend="3880"/>
        <references refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" compoundref="test__compiled_8cpp" startline="3733" endline="3748">divisors</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sieve</definition>
        <argsstring>()</argsstring>
        <name>test_sieve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3881" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3881" bodyend="3881"/>
        <references refid="test__compiled_8cpp_1ae8dd217fd3a3de037c6a1031aef548aa" compoundref="test__compiled_8cpp" startline="3755" endline="3770">sieve</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fac</definition>
        <argsstring>()</argsstring>
        <name>test_fac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3882" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3882" bodyend="3890"/>
        <references refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="test__compiled_8cpp" startline="3775" endline="3797">fac</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_egcd</definition>
        <argsstring>(ll a, ll b)</argsstring>
        <name>test_egcd</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3891" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3891" bodyend="3895"/>
        <references refid="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" compoundref="test__compiled_8cpp" startline="3799" endline="3801">egcd</references>
        <referencedby refid="test__compiled_8cpp_1a1764567e56d415f536db0a4aa89e782f" compoundref="test__compiled_8cpp" startline="3896" endline="3902">test_egcd</referencedby>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a1764567e56d415f536db0a4aa89e782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_egcd</definition>
        <argsstring>()</argsstring>
        <name>test_egcd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3896" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3896" bodyend="3902"/>
        <references refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" compoundref="test__compiled_8cpp" startline="3891" endline="3895">test_egcd</references>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_totient</definition>
        <argsstring>()</argsstring>
        <name>test_totient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3903" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3903" bodyend="3906"/>
        <references refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" compoundref="test__compiled_8cpp" startline="3805" endline="3812">totient</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_dlog</definition>
        <argsstring>()</argsstring>
        <name>test_dlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3907" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3907" bodyend="3922"/>
        <references refid="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" compoundref="test__compiled_8cpp" startline="3816" endline="3837">dlog</references>
        <references refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="test__compiled_8cpp" startline="39">fo</references>
        <references refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" compoundref="permutation_8hpp" startline="79" endline="81">permutation::power</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_primitive_root</definition>
        <argsstring>()</argsstring>
        <name>test_primitive_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3923" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3923" bodyend="3932"/>
        <references refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" compoundref="test__compiled_8cpp" startline="3840" endline="3863">primitive_root</references>
        <referencedby refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__compiled_8cpp" startline="3933" endline="3942">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_number_theory</definition>
        <argsstring>()</argsstring>
        <name>test_number_theory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="3933" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="3933" bodyend="3942"/>
        <references refid="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" compoundref="test__compiled_8cpp" startline="3873" endline="3880">test_divisors</references>
        <references refid="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" compoundref="test__compiled_8cpp" startline="3907" endline="3922">test_dlog</references>
        <references refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" compoundref="test__compiled_8cpp" startline="3891" endline="3895">test_egcd</references>
        <references refid="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" compoundref="test__compiled_8cpp" startline="3882" endline="3890">test_fac</references>
        <references refid="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" compoundref="test__compiled_8cpp" startline="3865" endline="3872">test_prime</references>
        <references refid="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" compoundref="test__compiled_8cpp" startline="3923" endline="3932">test_primitive_root</references>
        <references refid="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" compoundref="test__compiled_8cpp" startline="3881" endline="3881">test_sieve</references>
        <references refid="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" compoundref="test__compiled_8cpp" startline="3903" endline="3906">test_totient</references>
        <referencedby refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" compoundref="test__compiled_8cpp" startline="4496" endline="4525">main2</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor">#ifndef<sp/>PRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REALGCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>REALGCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bits/extc++.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bits/stdc++.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;experimental/iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;experimental/source_location&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="test__compiled_8cpp_1a349316092037fdd0773335fab4e15ee8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;src/test/test.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;algebra/test_big_integer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/algebra/test_linear_algebra.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/algebra/linear_algebra.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/all.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor">#define<sp/>fo(i,...)<sp/>for<sp/>([[maybe_unused]]<sp/>const<sp/>auto<sp/>i<sp/>:<sp/>ra{__VA_ARGS__})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fr(i,...)<sp/>for<sp/>([[maybe_unused]]<sp/>const<sp/>auto<sp/>i<sp/>:<sp/>rev(ra{__VA_ARGS__}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="test__compiled_8cpp_1a7b724588414fb77283c807a1ad82313c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>al(v)<sp/>begin(v),<sp/>end(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" kindref="member">debug_mode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>rel_assert(msg)<sp/>if<sp/>constexpr(debug_mode){static_assert(false,<sp/>msg);}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rel_assert(...)<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="test__compiled_8cpp_1a7f10cc81a560bb73b2eb647dfb10c9db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN(msg)<sp/>[[deprecated(msg)]]<sp/>auto<sp/>warn<sp/>=<sp/>[]()<sp/>{<sp/>rel_assert(msg);<sp/>};<sp/>warn();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="test__compiled_8cpp_1a108d6c5c51dd46e82a62b262394f0242" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TODO(msg)<sp/>WARN(&quot;TODO:<sp/>&quot;<sp/>msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="test__compiled_8cpp_1ad47194c03eba4b38147c9d01c0166802" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>paste2(x,y)<sp/>x<sp/>##y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="test__compiled_8cpp_1a38dec4d2a6700e0c88ced9eeebb3dfaa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>paste(x,y)<sp/>paste2(x,<sp/>y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="test__compiled_8cpp_1a396f7338a30cd5803df5ae220da88711" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lets_count<sp/>lets_add<sp/>paste(_l,<sp/>__COUNTER__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="test__compiled_8cpp_1a5f81e19fe0a4c7a463bf91e49e641270" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>let(a,...)<sp/>using<sp/>a<sp/>=<sp/>__VA_ARGS__;<sp/>lets_count{#__VA_ARGS__,<sp/>#a};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>import(a)<sp/>using<sp/>namespace<sp/>a;<sp/>lets_count{#a<sp/>&quot;::&quot;,<sp/>&quot;&quot;};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="test__compiled_8cpp_1a7796040cab730b2436f078c78d117cab" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="59" refid="test__compiled_8cpp_1a10aff294e2147e1cfe921bc2648b4399" refkind="member"><highlight class="normal">vector&lt;pair&lt;string,<sp/>string&gt;&gt;<sp/><ref refid="test__compiled_8cpp_1a10aff294e2147e1cfe921bc2648b4399" kindref="member">lets</ref>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;__debug::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;const<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;__cxx11::basic_string&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>{</highlight></codeline>
<codeline lineno="62" refid="structlets__add_1a0ec85cd9b6101f88a531cd43e6aa5f87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlets__add_1a0ec85cd9b6101f88a531cd43e6aa5f87" kindref="member">lets_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/><ref refid="test__compiled_8cpp_1a10aff294e2147e1cfe921bc2648b4399" kindref="member">lets</ref>.push_back({a,<sp/>b});<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::priority_queue;</highlight></codeline>
<codeline lineno="69" refid="test__compiled_8cpp_1aa3bd6940ab68cd10b31ac2ff2495ffab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(std);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>import(experimental);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::make_ostream_joiner;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::ostream_joiner;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::source_location;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(chrono);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(literals);</highlight></codeline>
<codeline lineno="76" refid="test__compiled_8cpp_1a25adbdf7a4a6b491d22ca84426e075c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(placeholders)<sp/><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>move<sp/>this<sp/>to<sp/>abbrev.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="structll" kindref="compound">ll</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79" refid="test__compiled_8cpp_1a2e2e73e53fc509e05f252ef083503838" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80" refid="test__compiled_8cpp_1a58e2677d80a09b5be0f0e56ef70d4507" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1a58e2677d80a09b5be0f0e56ef70d4507" kindref="member">pr</ref>,<sp/>pair&lt;ll,<sp/>ll&gt;);</highlight></codeline>
<codeline lineno="81" refid="test__compiled_8cpp_1ac6774acaa7fff278845893bd84e35525" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1ac6774acaa7fff278845893bd84e35525" kindref="member">com</ref>,<sp/>complex&lt;double&gt;);</highlight></codeline>
<codeline lineno="82" refid="test__compiled_8cpp_1ae6bbe80dfafc6e30f518f3de1cafec50" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>,<sp/>complex&lt;ll&gt;);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84" refid="test__compiled_8cpp_1ac0b978e8ffc2c44656160a679f86e22a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Comp&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ac0b978e8ffc2c44656160a679f86e22a" kindref="member">prio_queue_t</ref><sp/>=<sp/>std::priority_queue&lt;T,<sp/>vector&lt;T&gt;,<sp/>Comp&gt;;</highlight></codeline>
<codeline lineno="85" refid="test__compiled_8cpp_1a71fb2247d044e41f5345bcdb26020926" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a30d2d6ecdd50cafce635775b6e4e1cf2" kindref="member">let</ref>(<ref refid="core_2all_8hpp_1a71fb2247d044e41f5345bcdb26020926" kindref="member">clock_</ref>,<sp/>high_resolution_clock);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(this_thread);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(numeric_limits&lt;ll&gt;::max())<sp/>/<sp/>8;<sp/></highlight></codeline>
<codeline lineno="94" refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="test__compiled_8cpp_1a989a29f26fc8591b33ecf33d4d2c7029" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="test__compiled_8cpp_1a989a29f26fc8591b33ecf33d4d2c7029" kindref="member">tau</ref><sp/>=<sp/>2<sp/>*<sp/>3.1415926535897932384626433L;<sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" kindref="member">multitest</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/debug.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/operations.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/range.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structit__base" kindref="compound">it_base</ref><sp/>{</highlight></codeline>
<codeline lineno="106" refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="107" refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">pointer</ref><sp/>=<sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="108" refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">reference</ref><sp/>=<sp/>T<sp/>&amp;;</highlight></codeline>
<codeline lineno="109" refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">difference_type</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__it" kindref="compound">int_it</ref><sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="112" refid="structint__it_1ad986a324b4a8e1c5a8fca9e411d6c078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structint__it_1ad986a324b4a8e1c5a8fca9e411d6c078" kindref="member">iterator_category</ref><sp/>=<sp/>random_access_iterator_tag;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>m;</highlight></codeline>
<codeline lineno="114" refid="structint__it_1aa90da42bd4e6bda319461fece4aeec7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integer&gt;<sp/><ref refid="structint__it_1aa90da42bd4e6bda319461fece4aeec7b" kindref="member">int_it</ref>(Integer<sp/>x_,<sp/>T<sp/>m_<sp/>=<sp/>1)<sp/>:<sp/>x(x_),<sp/>m(m_)<sp/>{}</highlight></codeline>
<codeline lineno="115" refid="structint__it_1a97f5d5ebe98f08abe434fcf64fd83f1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it_1a97f5d5ebe98f08abe434fcf64fd83f1f" kindref="member">int_it</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="116" refid="structint__it_1a6afa1f0489e1f8b6ae372aee8cbfa244" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structint__it_1a6afa1f0489e1f8b6ae372aee8cbfa244" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>x_stat;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x_stat<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120" refid="structint__it_1aefbd19544f6f65507479b9058aab2998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="121" refid="structint__it_1aff5e9dd149ee82a037564e075635b763" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1aff5e9dd149ee82a037564e075635b763" kindref="member">operator+</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>m<sp/>*<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="122" refid="structint__it_1a11d8b2c8dacbe2341c89f62cf9e8610d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1a11d8b2c8dacbe2341c89f62cf9e8610d" kindref="member">operator-</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>m<sp/>*<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="123" refid="structint__it_1a3a2c84ca5c1870c3047e052b5f5b3395" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structint__it_1a3a2c84ca5c1870c3047e052b5f5b3395" kindref="member">operator-</ref>(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>-<sp/>y.<ref refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" kindref="member">x</ref>)<sp/>/<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="124" refid="structint__it_1a5cd1e32162f9ad122fb85002d6321013" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1a5cd1e32162f9ad122fb85002d6321013" kindref="member">operator++</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+=<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="125" refid="structint__it_1afda2c78b3b1431cd325a63e47d5b4f9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1afda2c78b3b1431cd325a63e47d5b4f9b" kindref="member">operator--</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-=<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="126" refid="structint__it_1a85eb0ee7f734e93b64a6432da5c2ab56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1a85eb0ee7f734e93b64a6432da5c2ab56" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--x;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131" refid="structint__it_1a2892123a79f6f13fa6a9f16e8f5f207b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/><ref refid="structint__it_1a2892123a79f6f13fa6a9f16e8f5f207b" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++x;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bin(op,Tp)<sp/>auto<sp/>operator<sp/>op(Tp<sp/>const<sp/>&amp;a,<sp/>Tp<sp/>const<sp/>&amp;b)<sp/>{<sp/>return<sp/>a.x<sp/>op<sp/>b.x;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="test__compiled_8cpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="test__compiled_8cpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" kindref="member">bin</ref>(==,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>);</highlight></codeline>
<codeline lineno="140" refid="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="test__compiled_8cpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" kindref="member">bin</ref>(&lt;,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrange" kindref="compound">range</ref><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>bg,<sp/>ed;</highlight></codeline>
<codeline lineno="145" refid="structrange_1ad05dc640fa5b15e5bcffec3e6e195ab9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structrange_1ad05dc640fa5b15e5bcffec3e6e195ab9" kindref="member">range</ref>(T<sp/>ed_)<sp/>:<sp/><ref refid="structrange" kindref="compound">range</ref>(0LL,<sp/>ed_)<sp/>{}</highlight></codeline>
<codeline lineno="146" refid="structrange_1acc39e7240d6dd0d4f4069a610e0c366b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrange_1acc39e7240d6dd0d4f4069a610e0c366b" kindref="member">range</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;bg_,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ed_)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//:<sp/>bg(bg_),<sp/>ed(max(bg,<sp/>static_cast&lt;T&gt;(ed_)))<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bg(bg_),<sp/>ed(ed_)<sp/>{}</highlight></codeline>
<codeline lineno="149" refid="structrange_1a9e40a11c9a0e9da9b9dbe5e1b21e1a38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structrange_1a9e40a11c9a0e9da9b9dbe5e1b21e1a38" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bg;<sp/>}</highlight></codeline>
<codeline lineno="150" refid="structrange_1abbe13c40fc2dbb3052319e1c1aa24ca8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structrange_1abbe13c40fc2dbb3052319e1c1aa24ca8" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ed;<sp/>}</highlight></codeline>
<codeline lineno="151" refid="structrange_1a39b799ab3f38facb002a424f67cc2e71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ed<sp/>-<sp/>bg;<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153" refid="test__compiled_8cpp_1a5b1fcbc62cc963f6ab2598b13f114dd8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" kindref="member">operator&lt;</ref>(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref><sp/>==<sp/>b.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref><sp/>?<sp/>a.<ref refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" kindref="member">ed</ref><sp/>&gt;<sp/>b.<ref refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" kindref="member">ed</ref><sp/>:<sp/>a.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref><sp/>&lt;<sp/>b.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156" refid="test__compiled_8cpp_1a295cbb09d532a8eeeaab519fd1db0928" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a295cbb09d532a8eeeaab519fd1db0928" kindref="member">operator&amp;</ref>(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref>{max(a.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref>,<sp/>b.<ref refid="structrange_1a626638a2956ba810e53246d756b2e653" kindref="member">bg</ref>),<sp/>min(a.<ref refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" kindref="member">ed</ref>,<sp/>b.<ref refid="structrange_1ae3f4c53575e4bd9a8ddfa92c3646c7b5" kindref="member">ed</ref>)};</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159" refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>&amp;r)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rev_it<sp/>=<sp/>reverse_iterator&lt;decltype(begin(r))&gt;;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range</ref>{rev_it{end(r)},<sp/>rev_it{begin(r)}};</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163" refid="test__compiled_8cpp_1a6288a170c5a67a2c0b45c858a043722a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">ra</ref><sp/>=<sp/><ref refid="structrange" kindref="compound">range&lt;int_it&lt;ll&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="164" refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" kindref="member">x</ref><sp/>+<sp/>b.<ref refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167" refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/><ref refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" kindref="member">operator-</ref>(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-a.<ref refid="structint__it_1a1e1f66e40cd8620afe9129f4f0266fa7" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="168" refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78" kindref="member">isect</ref><sp/>{<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" kindref="member">dis</ref>,<sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" kindref="member">over</ref>,<sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref>,<sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" kindref="member">eq</ref><sp/>};</highlight></codeline>
<codeline lineno="169" refid="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" kindref="member">intersect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" kindref="member">isect::eq</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[1]<sp/>&lt;=<sp/>b[0])<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" kindref="member">isect::dis</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[0]<sp/>&lt;=<sp/>b[0]<sp/>&amp;&amp;<sp/>b[1]<sp/>&lt;=<sp/>a[1])<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">isect::cont</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[0]<sp/>&lt;=<sp/>b[0]<sp/>&amp;&amp;<sp/>a[1]<sp/>&lt;=<sp/>b[1])<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" kindref="member">isect::over</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" kindref="member">isect::null</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184" refid="test__compiled_8cpp_1a2e6b26fca3ba13b074816e7b97f8245d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2e6b26fca3ba13b074816e7b97f8245d" kindref="member">operator^</ref>(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(<ref refid="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" kindref="member">intersect</ref>(a,<sp/>b),<sp/><ref refid="test__compiled_8cpp_1a5eeb4818d038580518b4e590a066ec12" kindref="member">intersect</ref>(b,<sp/>a));</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187" refid="test__compiled_8cpp_1a3eb62dcf88ab5afad4d62c6fea4bb570" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3eb62dcf88ab5afad4d62c6fea4bb570" kindref="member">filter</ref>(vector&lt;ra&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ra&gt;<sp/>sg;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sg.empty()<sp/>||<sp/>sg.back().ed<sp/>&lt;<sp/>p.ed)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sg.push_back(p);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/core/operations.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>operations<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>aug(op)<sp/>template<sp/>&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;<sp/>auto<sp/>operator<sp/>op<sp/>##=(T1<sp/>&amp;a,<sp/>const<sp/>T2<sp/>&amp;b)<sp/>{<sp/>return<sp/>a<sp/>=<sp/>a<sp/>op<sp/>b;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="test__compiled_8cpp_1a141476c36a8f609ac7c776be162abb92" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" kindref="member">aug</ref>(+);</highlight></codeline>
<codeline lineno="203" refid="test__compiled_8cpp_1a566f5b78944cfa1ff2b470ecd0522ce1" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" kindref="member">aug</ref>(-);</highlight></codeline>
<codeline lineno="204" refid="test__compiled_8cpp_1ac66e5f2d4fb3a7d5076a44e419736713" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" kindref="member">aug</ref>(*);</highlight></codeline>
<codeline lineno="205" refid="test__compiled_8cpp_1a35c5f7ec97de94c93f2301e16d3f7efa" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a2e3fb564092d70d9bee87555035d8711" kindref="member">aug</ref>(/);</highlight></codeline>
<codeline lineno="206" refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>enable_if_t&lt;is_floating_point_v&lt;T&gt;,<sp/>T&gt;<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209" refid="test__compiled_8cpp_1ae9e59a2d15287021fd21d14d2eb206c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Group&gt;<sp/>Group<sp/><ref refid="test__compiled_8cpp_1ae9e59a2d15287021fd21d14d2eb206c4" kindref="member">operator/</ref>(Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies{},<sp/>b);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212" refid="test__compiled_8cpp_1ab6822e2f5527212c7db6dd31be7f3ba6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>-b;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215" refid="test__compiled_8cpp_1a98ed0803268ba29fcc8977206b177923" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="test__compiled_8cpp_1a98ed0803268ba29fcc8977206b177923" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218" refid="test__compiled_8cpp_1a1297749985d820e08c6c88a285dc80eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a1297749985d820e08c6c88a285dc80eb" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(b<sp/>&lt;<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="219" refid="test__compiled_8cpp_1ae3edbf9ffcbf3c8b40d15f6666442cef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ae3edbf9ffcbf3c8b40d15f6666442cef" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;=<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="220" refid="test__compiled_8cpp_1ad8f1353b1f5665443a78d860006e9920" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ad8f1353b1f5665443a78d860006e9920" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="221" refid="test__compiled_8cpp_1a239c272472acf3f9ce7f2e44f0895160" refkind="member"><highlight class="normal">unordered_map&lt;ll,<sp/>ll&gt;<sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(unordered_map&lt;ll,<sp/>ll&gt;<sp/>a,<sp/>unordered_map&lt;ll,<sp/>ll&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[p.first]<sp/>+=<sp/>p.second;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234" refid="test__compiled_8cpp_1a8acbbd6e305005c27020dfb9bbe27d5a" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a8acbbd6e305005c27020dfb9bbe27d5a" kindref="member">operator|</ref>(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>bg;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.insert(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(sm));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240" refid="test__compiled_8cpp_1a9e98ecb7739ca6a5c0069a9a26d2a731" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a295cbb09d532a8eeeaab519fd1db0928" kindref="member">operator&amp;</ref>(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>sm)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bg.count(x))<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="251" refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" kindref="member">sub_set</ref>(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/>unordered_set&lt;T&gt;<sp/>&amp;ret)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b.count(x))<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259" refid="test__compiled_8cpp_1af237204859d16b6fadb92d576c7b33b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" kindref="member">operator-</ref>(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" kindref="member">sub_set</ref>(a,<sp/>b,<sp/>ret);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263" refid="test__compiled_8cpp_1a278d4d0450b96c1926a34fe49f29d602" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2e6b26fca3ba13b074816e7b97f8245d" kindref="member">operator^</ref>(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a17c44ba56ddae051a9fdf806cab4bb7b" kindref="member">sub_set</ref>(b,<sp/>a,<sp/>ret);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268" refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" kindref="member">operator*</ref>(vector&lt;T&gt;<sp/>a,<sp/>vector&lt;T&gt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>c(a.size());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.size())<sp/>{<sp/>c[i]<sp/>=<sp/>a[i]<sp/>*<sp/>b[i];<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="275" refid="test__compiled_8cpp_1af877591533298d5fba3df85680cabb60" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(Iterator<sp/>it,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;!is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator_traits&lt;decltype(it)&gt;::iterator_category,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_access_iterator_tag&gt;::value,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref>&gt;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>advance(it,<sp/>n);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor">#define<sp/>FUNCTOR(func)<sp/>struct<sp/>{<sp/>template<sp/>&lt;typename...<sp/>Ts&gt;<sp/>decltype(auto)<sp/>operator()(Ts<sp/>&amp;&amp;...<sp/>args)<sp/>const<sp/>{<sp/>return<sp/>(func)(forward&lt;decltype(args)&gt;(args)...);<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="test__compiled_8cpp_1aef20301df3ed18a53843fb3a5b69bd5b" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="test__compiled_8cpp_1a8ca39513ee57e00e1d6eecf32fd87035" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="operations_8hpp_1a8ca39513ee57e00e1d6eecf32fd87035" kindref="member">Max</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1aef20301df3ed18a53843fb3a5b69bd5b" kindref="member">FUNCTOR</ref>(max);</highlight></codeline>
<codeline lineno="291" refid="test__compiled_8cpp_1a6e5336c573515260e7a624f1f72924a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="operations_8hpp_1a6e5336c573515260e7a624f1f72924a1" kindref="member">Min</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1aef20301df3ed18a53843fb3a5b69bd5b" kindref="member">FUNCTOR</ref>(min);</highlight></codeline>
<codeline lineno="292" refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(plus&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="293" refid="test__compiled_8cpp_1acc5a0ae67ef6a3bd347c85cab4a15313" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="294" refid="test__compiled_8cpp_1a19000e539a20acfdcd7e8fdce1d970f4" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(<ref refid="operations_8hpp_1a8ca39513ee57e00e1d6eecf32fd87035" kindref="member">Max</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;<sp/>}</highlight></codeline>
<codeline lineno="295" refid="test__compiled_8cpp_1aa9ba94adf14b5b5566e3a750fa5255b3" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(<ref refid="operations_8hpp_1a6e5336c573515260e7a624f1f72924a1" kindref="member">Min</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;<sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>convert<sp/>all<sp/>macros<sp/>to<sp/>UPPER_CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//}<sp/>//<sp/>namespace<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>namespace<sp/>operations;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/core/debug.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enabling<sp/>LOCAL<sp/>enables<sp/>debug<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NDEBUG<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="test__compiled_8cpp_1a8de3ed741dadc9c979a4ff17c0a9116e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>dbg(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="test__compiled_8cpp_1a49bc164f30e64702250d2cbea09bf86c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedebug__tools" kindref="compound">debug_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a991f9f01ab3a0e664fabf0bd17fab95c" kindref="member">type_name</ref>([[maybe_unused]]<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>__PRETTY_FUNCTION__,<sp/>tar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>s.find(tar)<sp/>+<sp/>tar.size();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.substr(st,<sp/>s.find(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>st)<sp/>-<sp/>st);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a2b613fd4caa0fb48d04eb7e6f3bf6dff" kindref="member">replace</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>This<sp/>is<sp/>multipass.<sp/>Should<sp/>this<sp/>be<sp/>singlepass?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>loc;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((loc<sp/>=<sp/>s.find(a))<sp/>!=<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.substr(0,<sp/>loc)<sp/>+<sp/>b<sp/>+<sp/>s.substr(loc<sp/>+<sp/>a.size());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="namespacedebug__tools_1a991f9f01ab3a0e664fabf0bd17fab95c" kindref="member">type_name</ref>(v);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="test__compiled_8cpp_1a10aff294e2147e1cfe921bc2648b4399" kindref="member">lets</ref>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="namespacedebug__tools_1a2b613fd4caa0fb48d04eb7e6f3bf6dff" kindref="member">replace</ref>(s,<sp/>p.first,<sp/>p.second);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacedebug__tools_1ab312673925f42718bafe74a18eae6685" kindref="member">depth</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a4190b5d045c8cfeb1e9a7332d55d9374" kindref="member">debug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;name,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_location<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;loc<sp/>=<sp/>source_location::current())<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" kindref="member">debug_mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="namespacedebug__tools_1ab312673925f42718bafe74a18eae6685" kindref="member">depth</ref>)<sp/>{<sp/><ref refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" kindref="member">cerr</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" kindref="member">cerr</ref><sp/>&lt;&lt;<sp/>loc.function_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>loc.line()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="namespacedebug__tools_1ab312673925f42718bafe74a18eae6685" kindref="member">depth</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>debug_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedebug__tools" kindref="compound">debug_tools</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>76<sp/>&quot;./tools/../src/core/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/io.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrin" kindref="compound">rin</ref><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>istream<sp/>&amp;<ref refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" kindref="member">in</ref>;</highlight></codeline>
<codeline lineno="358" refid="structrin_1ae6238b84a27353d644112ea2fd3d3ca4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrin_1ae6238b84a27353d644112ea2fd3d3ca4" kindref="member">rin</ref>(istream<sp/>&amp;in_)<sp/>:<sp/><ref refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" kindref="member">in</ref>(in_)<sp/>{}</highlight></codeline>
<codeline lineno="359" refid="structrin_1a13b9d026853a96ff1ab4e29bc6d5185c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structrin_1a13b9d026853a96ff1ab4e29bc6d5185c" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="360" refid="structrin_1ac54363dcbc7ce811509e7ff360b78dad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structrin_1ac54363dcbc7ce811509e7ff360b78dad" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" kindref="member">in</ref><sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366" refid="structrin_1a7c7bbc816095cbe239ce52b980d7117e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;<ref refid="structrin_1a7c7bbc816095cbe239ce52b980d7117e" kindref="member">operator&gt;&gt;</ref>(T<sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal">};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="369" refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(R<sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(r.in<sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x),<sp/>declval&lt;enable_if_t&lt;is_same&lt;R,<sp/>rin&gt;::value,<sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;&gt;&gt;())<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>r.in<sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="375" refid="test__compiled_8cpp_1a7df52f31e81b51a76e8f8699accaf3b1" refkind="member"><highlight class="normal">enable_if_t&lt;is_same&lt;T,<sp/>istream&gt;::value,<sp/><ref refid="structrin" kindref="compound">rin</ref>&gt;<sp/><ref refid="test__compiled_8cpp_1a7df52f31e81b51a76e8f8699accaf3b1" kindref="member">operator&gt;&gt;</ref>(Stream<sp/>&amp;is,<sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>r{is};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&gt;&gt;<sp/>x;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379" refid="test__compiled_8cpp_1affce1f2cffc83e9e4ecc9203fdd32d29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/>tuple&lt;T...&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>apply(</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;f,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;...<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>f;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((os<sp/>&lt;&lt;<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref><sp/>&lt;&lt;<sp/>x),<sp/>...);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388" refid="test__compiled_8cpp_1a1b122fd1e3de03a421d98f4bbb1473d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a1b122fd1e3de03a421d98f4bbb1473d5" kindref="member">print</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;arg1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts<sp/>&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>arg1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>((cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>args),<sp/>...);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/>pair&lt;T...&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(p)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.first<sp/>&lt;&lt;<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref><sp/>&lt;&lt;<sp/>p.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enable_if<sp/>is<sp/>there<sp/>to<sp/>avoid<sp/>problems<sp/>with<sp/>ostringstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>fix<sp/>this<sp/>whole<sp/>IO<sp/>mess<sp/>one<sp/>day.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;v)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>enable_if_t&lt;is_same_v&lt;Stream,<sp/>ostream&gt;,<sp/>decltype(begin(v),<sp/>declval&lt;decltype(os)&gt;())&gt;<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ed<sp/>=<sp/>begin(v);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>big<sp/>=<sp/>v.size()<sp/>&gt;<sp/>20;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(big)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance(ed,<sp/>20);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ed<sp/>=<sp/>end(v);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(v)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(begin(v),<sp/>ed,<sp/>make_ostream_joiner(os,<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref>));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(big)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(<ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>-&gt;<sp/>decltype(begin(v),<sp/>declval&lt;decltype(os)&gt;())<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>elem;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="test__compiled_8cpp_1a49bbb01635e28db8562b0e6878febef7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;opt)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt<sp/>?<sp/>(os<sp/>&lt;&lt;<sp/>*opt)<sp/>:<sp/>(os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nullopt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>77<sp/>&quot;./tools/../src/core/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/utility.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility" kindref="compound">utility</ref><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[nodiscard]]<sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>old;<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>&amp;v;<sp/><sp/></highlight></codeline>
<codeline lineno="441" refid="structutility_1_1with_1a20244f8d345341882e7ca37b49f2ca77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp&gt;<sp/><ref refid="structutility_1_1with_1a20244f8d345341882e7ca37b49f2ca77" kindref="member">with</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp<sp/>new_,<sp/>T<sp/>&amp;v_)<sp/>:<sp/>old(v_),<sp/>v(v_)<sp/>{<sp/>v<sp/>=<sp/>new_;<sp/>}</highlight></codeline>
<codeline lineno="442" refid="structutility_1_1with_1a9bc4eb3d7206708b6a7ec8753a866f6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with_1a9bc4eb3d7206708b6a7ec8753a866f6a" kindref="member">~with</ref>()<sp/>{<sp/>v<sp/>=<sp/>old;<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">};</highlight></codeline>
<codeline lineno="446"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1fix" kindref="compound">fix</ref><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Func<sp/>func;</highlight></codeline>
<codeline lineno="448" refid="structutility_1_1fix_1a0dc72e4b470b6c975318e9127706510f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1fix_1a0dc72e4b470b6c975318e9127706510f" kindref="member">fix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func_)<sp/>:<sp/>func(func_)<sp/>{}</highlight></codeline>
<codeline lineno="449" refid="structutility_1_1fix_1a93b091b536b383499aaf376d12f92fa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>operator()(Args<sp/>&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal">};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>lambda(f)<sp/>[](auto<sp/>&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/>decltype(auto)<sp/>{<sp/>return<sp/>f(forward&lt;decltype(args)&gt;(args)...);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454" refid="test__compiled_8cpp_1a76cdb96860b77886867832efcffeeb32" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_FUNC_EQ(func)<sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>void<sp/>func<sp/>##_eq(T<sp/>&amp;x,<sp/>const<sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>func(x,<sp/>y);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="test__compiled_8cpp_1a28bca63adefcbb2c4a2dbf5e9e9a57fe" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="test__compiled_8cpp_1a28bca63adefcbb2c4a2dbf5e9e9a57fe" kindref="member">DEFINE_FUNC_EQ</ref>(min);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="test__compiled_8cpp_1a28bca63adefcbb2c4a2dbf5e9e9a57fe" kindref="member">DEFINE_FUNC_EQ</ref>(max);</highlight></codeline>
<codeline lineno="462"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a6e069fcf8b422fbc525eba2543e36a6e" kindref="member">cache</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ch;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch.find(arg)<sp/>==<sp/>end(ch))<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg]<sp/>=<sp/>f(arg);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eq<sp/>=<sp/>equal_to&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" kindref="member">uniq</ref>(Cont<sp/>v,<sp/>Eq<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;up<sp/>=<sp/>Eq{},<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;sp<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>sp);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(unique(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>up)<sp/>-<sp/>begin(v));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Compare<sp/>&amp;compare<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare(func(forward&lt;decltype(args)&gt;(args))...);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a50e9430d1096ce6997ae910135a9533f" kindref="member">prev_less</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>l(n,<sp/>-1);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>stack&lt;ll&gt;<sp/>s;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.size()<sp/>&amp;&amp;<sp/>!(s.top()<sp/>&lt;<sp/>v[i]))<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.pop();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.size())<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[i]<sp/>=<sp/>s.top();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.push(v[i]);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1LL<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>)<sp/>*<sp/>CHAR_BIT<sp/>-<sp/>__builtin_clzll(x<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>power_ceil<sp/>for<sp/>base<sp/>2</highlight></codeline>
<codeline lineno="514"><highlight class="comment"></highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" kindref="member">power_ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pw;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceutility_1a750478c01441fac1c27f14bea2cb74ea" kindref="member">log_ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1,<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base,<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal">[[nodiscard]]<sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>tz<sp/>=<sp/>__builtin_ctzll(x);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y<sp/>=<sp/>x<sp/>+<sp/>(<ref refid="structll" kindref="compound">ll</ref>{1}<sp/>&lt;&lt;<sp/>tz);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>y<sp/>|<sp/>(y<sp/>^<sp/>x)<sp/>&gt;&gt;<sp/>(2<sp/>+<sp/>tz);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret<sp/>&gt;<sp/>x);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(__builtin_popcountll(ret)<sp/>==<sp/>__builtin_popcountll(x));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1aa72cfb348ae79fd2bdb5ded63cd36ef2" kindref="member">swap2</ref>(T<sp/>&amp;a,<sp/>T<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func(a)<sp/>&gt;<sp/>func(b))<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(a,<sp/>b);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Proj&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a713c1fa985af64dbe0374a15cc3d4383" kindref="member">counting_sort</ref>(Iter<sp/>a,<sp/>Iter<sp/>b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Proj<sp/>&amp;proj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>proj_size)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrange" kindref="compound">range</ref><sp/>rang{a,<sp/>b};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>count(proj_size);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>rang)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count[proj(x)];</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cnt<sp/>:<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_cnt<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>old_cnt;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>Iter::value_type&gt;<sp/>output(b<sp/>-<sp/>a);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>rang)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[count[proj(x)]]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count[proj(x)];</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>move(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(output),<sp/>a);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" kindref="member">ssize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Cont<sp/>&amp;<ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size(<ref refid="test__compiled_8cpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref>);<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>split<sp/>up<sp/>utility.hpp<sp/>maybe?</highlight></codeline>
<codeline lineno="567" refid="structutility_1_1ar_1aae344b98b22daaa6e15b3631b7a09d64" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1ar_1aae344b98b22daaa6e15b3631b7a09d64" kindref="member">type</ref><sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a5527c46ab55c32f4bdf48a47564e3cf0" kindref="member">ar_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1ar_1aae344b98b22daaa6e15b3631b7a09d64" kindref="member">ar&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="569" refid="structutility_1_1ar_3_01T_0fn_0e_4_1ae7db76e54caf04247c14edb24b1653ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>ll<sp/>n&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt;T[n]&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1ar_3_01T_0fn_0e_4_1ae7db76e54caf04247c14edb24b1653ef" kindref="member">type</ref><sp/>=<sp/>array&lt;ar_t&lt;T&gt;,<sp/>n&gt;;<sp/>};</highlight></codeline>
<codeline lineno="571"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref><sp/>{</highlight></codeline>
<codeline lineno="572" refid="structutility_1_1random__device__patch_1a7cd4a52d04894da5d2ca621a419da09a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1random__device__patch_1a7cd4a52d04894da5d2ca621a419da09a" kindref="member">operator()</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock_::now().time_since_epoch().count();<sp/>}</highlight></codeline>
<codeline lineno="573" refid="structutility_1_1random__device__patch_1ad2083d821e1bc651e937571037c29b5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1random__device__patch_1ad2083d821e1bc651e937571037c29b5f" kindref="member">entropy</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">};</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1Empty" kindref="compound">Empty</ref><sp/>{};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_RANDOM_DEVICE_PATCH<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="test__compiled_8cpp_1a4072e106efe575805c4864dbbd387090" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref><sp/>=<sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">default_random_engine<sp/><ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>{<ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref>{}()};</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility" kindref="compound">utility</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>80<sp/>&quot;./tools/../src/core/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/algebra/linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/number_theory/modulo.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace" kindref="compound">modulo_namespace</ref><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemodulo__namespace_1a0329c7316dfca40b316f6ad7a6b60e87" kindref="member">invert_t</ref><sp/>=<sp/>decltype(<ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(std::declval&lt;Args&gt;()...));</highlight></codeline>
<codeline lineno="596"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(T<sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(experimental::is_detected_v&lt;<ref refid="namespacemodulo__namespace_1a0329c7316dfca40b316f6ad7a6b60e87" kindref="member">invert_t</ref>,<sp/>multiplies&lt;&gt;,<sp/>decltype(a)&gt;)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies{},<sp/>a);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;b<sp/>&lt;<sp/>0<sp/>but<sp/>unable<sp/>to<sp/>inverse<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>b;<sp/>b<sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>%=<sp/>b;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacemodulo__namespace_1a0a666ddbbb5d4d02c4aee66be7577292" kindref="member">mod_eq</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/><ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>modulus<sp/>=</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e9<sp/>+<sp/>7;<sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x;<sp/></highlight></codeline>
<codeline lineno="631" refid="structmodulo__namespace_1_1modulo_1ac9d3017987939152de7e7865350abb43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1ac9d3017987939152de7e7865350abb43" kindref="member">modulo</ref>()<sp/>:<sp/>x{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="633" refid="structmodulo__namespace_1_1modulo_1aec9c4507e257635e3c0e258b9667be7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1aec9c4507e257635e3c0e258b9667be7f" kindref="member">modulo</ref>(T<sp/>x_)<sp/>:<sp/>x(<ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(x_,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>::modulus))<sp/>{}</highlight></codeline>
<codeline lineno="634" refid="structmodulo__namespace_1_1modulo_1ab2e25a561c35e0e2453ef27de0d66594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1ab2e25a561c35e0e2453ef27de0d66594" kindref="member">modulo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/>x(x_)<sp/>{}</highlight></codeline>
<codeline lineno="635" refid="structmodulo__namespace_1_1modulo_1a09adfcbfba74232e04a320aeebac5433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal">};</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_M(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{x};<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(plus&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref><sp/>+<sp/>b.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/>modulo::modulus<sp/>?<sp/>sum<sp/>-<sp/>modulo::modulus<sp/>:<sp/>sum,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1aef9f34a9358f523b5e12f6897a806e7e" kindref="member">operator++</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" kindref="member">operator-</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{modulo::modulus<sp/>-<sp/>a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>ADL<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">using<sp/>::operator-;</highlight></codeline>
<codeline lineno="648" refid="namespacemodulo__namespace_1a2f1a91608676548419fa75266f0a00bf" refkind="member"><highlight class="normal"><ref refid="test__compiled_8cpp_1a198fc8d7aeb577c1c390bbf3cf9ade86" kindref="member">bin</ref>(==,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" kindref="member">operator*</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref><sp/>quot<sp/>=<sp/><ref refid="test__compiled_8cpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>*<sp/><ref refid="test__compiled_8cpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(b.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>/<sp/><ref refid="test__compiled_8cpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(modulo::modulus);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>approximate<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/><ref refid="test__compiled_8cpp_1a25adbdf7a4a6b491d22ca84426e075c6" kindref="member">ull</ref>(a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>*<sp/><ref refid="test__compiled_8cpp_1a25adbdf7a4a6b491d22ca84426e075c6" kindref="member">ull</ref>(b.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>-<sp/><ref refid="test__compiled_8cpp_1a25adbdf7a4a6b491d22ca84426e075c6" kindref="member">ull</ref>(modulo::modulus)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/>modulo::modulus)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(b<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(b,<sp/>modulo::modulus<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal">using<sp/>::operator/;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>modulo_namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace" kindref="compound">modulo_namespace</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="673" refid="structstd_1_1hash_3_01modulo_01_4_1a509450130beda45a43f665c115bac2e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structstd_1_1hash_3_01modulo_01_4_1a509450130beda45a43f665c115bac2e7" kindref="member">operator()</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">};</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>4<sp/>&quot;./tools/../src/algebra/linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/algebra/polynomial.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolynomial__ns" kindref="compound">polynomial_ns</ref><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vector&lt;T&gt;::vector;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="689" refid="classpolynomial__ns_1_1Polynomial_1a043ecfd55fc74aa4d507d45c10d236fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial_1a043ecfd55fc74aa4d507d45c10d236fc" kindref="member">shrink</ref>()<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!this-&gt;empty()<sp/>&amp;&amp;<sp/>this-&gt;back()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;pop_back();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694" refid="classpolynomial__ns_1_1Polynomial_1a07d232f6e14fade387c39fe8ea8e6b96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classpolynomial__ns_1_1Polynomial_1a07d232f6e14fade387c39fe8ea8e6b96" kindref="member">degree</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a7b724588414fb77283c807a1ad82313c" kindref="member">fr</ref>(j,<sp/>0,<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[j]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal">};</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.size()<sp/>&lt;=<sp/>b.size()))<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.size())<sp/>{<sp/>sum[i]<sp/>+=<sp/>a[i];<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/><ref refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>prod(a.size()<sp/>-<sp/>1<sp/>+<sp/>b.size()<sp/>-<sp/>1<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.size())<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>b.size())<sp/>{<sp/>prod[i<sp/>+<sp/>j]<sp/>+=<sp/>a[i]<sp/>*<sp/>b[j];<sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prod;</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/><ref refid="namespacepolynomial__ns_1a077f3122005b34adbff5345eceb5a8d2" kindref="member">operator%</ref>(<ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bdeg<sp/>=<sp/>b.<ref refid="classpolynomial__ns_1_1Polynomial_1a07d232f6e14fade387c39fe8ea8e6b96" kindref="member">degree</ref>();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a7b724588414fb77283c807a1ad82313c" kindref="member">fr</ref>(i,<sp/>0,<sp/>a.size())<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>should<sp/>we<sp/>use<sp/>identity<sp/>instead<sp/>of<sp/>0?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(i<sp/>&gt;=<sp/>bdeg<sp/>&amp;&amp;<sp/>a[i]<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>a[i]<sp/>/<sp/>b[bdeg];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>0,<sp/>bdeg<sp/>+<sp/>1)<sp/>{<sp/>a[j<sp/>+<sp/>i<sp/>-<sp/>bdeg]<sp/>-=<sp/>mul<sp/>*<sp/>b[j];<sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.size()<sp/>&lt;=<sp/>b.size()))<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>==<sp/>a;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>equal(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(a),<sp/>b.begin(),<sp/>b.begin()<sp/>+<sp/>a.size())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_of(b.begin()<sp/>+<sp/>a.size(),<sp/>b.end(),<sp/>[](T<sp/>x)<sp/>{<sp/>return<sp/>x<sp/>==<sp/>0;<sp/>});</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>polynomial_ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolynomial__ns" kindref="compound">polynomial_ns</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>5<sp/>&quot;./tools/../src/algebra/linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="comment">//<sp/>TODO<sp/>Tensors?<sp/>Also,<sp/>matrix_row<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>fix<sp/>default<sp/>constructor<sp/>causing<sp/>segfault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra" kindref="compound">linear_algebra</ref><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rows_n,<sp/>cols_n;<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>a;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="752" refid="structlinear__algebra_1_1matrix_1a44b1e37202c7dd6a6402b407b9ea2072" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a44b1e37202c7dd6a6402b407b9ea2072" kindref="member">matrix</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>r_,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c_,<sp/>T<sp/>v<sp/>=<sp/>{})<sp/>:<sp/>rows_n(r_),<sp/>cols_n(c_),<sp/>a(rows_n<sp/>*<sp/>cols_n,<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(rows_n<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>cols_n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755" refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" kindref="member">matrix</ref>(T<sp/>d)<sp/>:<sp/>rows_n(1),<sp/>cols_n(1),<sp/>a{d}<sp/>{}</highlight></codeline>
<codeline lineno="756" refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" kindref="member">matrix</ref>(vector&lt;vector&lt;pr&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;g)<sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(g.size(),<sp/>g.size(),<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>rows_n)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>g[i])<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[x,<sp/>w]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">[i][x]<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>rows_n)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">[i][i]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765" refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" kindref="member">matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>initializer_list&lt;initializer_list&lt;ll&gt;&gt;<sp/>&amp;vals)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(size(vals),<sp/>size(begin(vals)[0]))<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>rows_n)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(size(begin(vals)[i])<sp/>==<sp/>cols_n);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>cols_n)<sp/>{<sp/>(*this)[i][j]<sp/>=<sp/>begin(begin(vals)[i])[j];<sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772" refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)[i]);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775" refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;a[i<sp/>*<sp/>cols_n];<sp/>}</highlight></codeline>
<codeline lineno="776" refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rows_n<sp/>==<sp/>cols_n;<sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal">};</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>plus&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mat.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>id(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[i][i]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1acb6120c8a8224e1d4465bf980bc01d07" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.col_n)<sp/>{<sp/>c[i][j]<sp/>=<sp/>a[i][j]<sp/>+<sp/>b[i][j];<sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a8b072587149274d1639908e4edb23d3d" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.col_n)<sp/>{<sp/>c[i][j]<sp/>=<sp/>-a[i][j];<sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" kindref="member">operator==</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1ab36fb1d4542f2a43af3b44c22ffe083e" kindref="member">a</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1ab36fb1d4542f2a43af3b44c22ffe083e" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" kindref="member">operator*</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;Ts...&gt;<sp/>c{a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>c.rows_n)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/>c.cols_n)<sp/>{<sp/>c[i][k]<sp/>+=<sp/>a[i][j]<sp/>*<sp/>b[j][k];<sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacelinear__algebra_1aae153cb33e635039a84c8f6ebeed9b04" kindref="member">foo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>pair&lt;matrix&lt;T&gt;,<sp/>T&gt;<sp/><ref refid="namespacelinear__algebra_1acd9100ccdb60a96fa0a82c8d4fbfdfe4" kindref="member">gauss</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>b,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>{1};</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>a[i][i];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref><sp/>*=<sp/>div;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n)<sp/>{<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>/=<sp/>div;<sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>a[j][i];</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n)<sp/>{<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[j][k]<sp/>-=<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>*<sp/>mul;<sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{move(b),<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>};</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;Ts...&gt;<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a)<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ae9e59a2d15287021fd21d14d2eb206c4" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1acd9100ccdb60a96fa0a82c8d4fbfdfe4" kindref="member">gauss</ref>(b,<sp/>a).first;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1acd9100ccdb60a96fa0a82c8d4fbfdfe4" kindref="member">gauss</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref>(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>1),<sp/>a).second;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(m)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>m.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy(m[i],<sp/>m[i]<sp/>+<sp/>m.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>,<sp/>make_ostream_joiner(os,<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref>));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>support<sp/>constant<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>m(size(c),<sp/>size(c));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(c),<sp/>m[0]);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>size(c))<sp/>{<sp/>m[i][i<sp/>-<sp/>1]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(m,<sp/>n)[0][0];</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linear_algebra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/algebra/test_linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra_1_1test" kindref="compound">linear_algebra::test</ref><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(a)<sp/>*<sp/>a<sp/>==<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(a)<sp/>==<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a58d68feee7c76f77519389051a942161" kindref="member">test_invert</ref>()<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(a);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(b);</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a9a0a8549e208f8a719d5450d21b339ed" kindref="member">test_matrix</ref>()<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/>(b<sp/>/<sp/>a)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a5e39baa2e5b5fa6453ab6307d6e4f201" kindref="member">test_lin_recur</ref>()<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;ll&gt;{1,<sp/>2},<sp/>5)<sp/>==<sp/>21);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;ll&gt;{2,<sp/>3,<sp/>1},<sp/>4)<sp/>==<sp/>65);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/><ref refid="namespacelinear__algebra_1_1test_1a931e55dd26d27ac448311db318de875a" kindref="member">lin_recur_coef</ref>(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1aec6af708eda9aa2982dcba2a651f4bf9" kindref="member">test_linear_algebra</ref>()<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a9a0a8549e208f8a719d5450d21b339ed" kindref="member">test_matrix</ref>();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a5e39baa2e5b5fa6453ab6307d6e4f201" kindref="member">test_lin_recur</ref>();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a58d68feee7c76f77519389051a942161" kindref="member">test_invert</ref>();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test_lin_recur_coef();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linear_algebra::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra_1_1test" kindref="compound">linear_algebra::test</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/algebra/test_polynomial.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolynomial__ns_1_1test" kindref="compound">polynomial_ns::test</ref><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepolynomial__ns_1_1test_1a5ed51dd96ea5d0597e0c721fb647bfcc" kindref="member">test_polynomial</ref>()<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w{1e9<sp/>+<sp/>7,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>poly<sp/>=<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;modulo&gt;</ref>;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>poly<sp/>p1{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>poly<sp/>p2{2,<sp/>-3};</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*3x^2+2x+1</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/>-3x+2</highlight></codeline>
<codeline lineno="918"><highlight class="comment"></highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/><sp/>4x+1*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>*<sp/>p1<sp/>==<sp/>p1<sp/>*<sp/>p2<sp/>&amp;&amp;<sp/>p1<sp/>*<sp/>p2<sp/>==<sp/>poly{2,<sp/>1,<sp/>0,<sp/>-9,<sp/>0,<sp/>0}));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>+<sp/>p1<sp/>==<sp/>p1<sp/>+<sp/>p2<sp/>&amp;&amp;<sp/>p1<sp/>+<sp/>p2<sp/>==<sp/>poly{3,<sp/>-1,<sp/>3,<sp/>0}));</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p1<sp/>+<sp/>p2<sp/>!=<sp/>poly{3,<sp/>-1,<sp/>3,<sp/>1}));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((poly{3}<sp/>*<sp/>p2<sp/>==<sp/>poly{6,<sp/>-9}));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p1<sp/>%<sp/>p2<sp/>==<sp/>poly{11_M<sp/>/<sp/>3_M}));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p1<sp/>%<sp/>poly{2}<sp/>==<sp/>poly{}));</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>%<sp/>p1<sp/>==<sp/>p2));</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>polynomial_ns::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepolynomial__ns_1_1test" kindref="compound">polynomial_ns::test</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>4<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/combinatorics/test_combinatorics.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/combinatorics/combinatorics.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecombinatorics" kindref="compound">combinatorics</ref><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulate(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>{a<sp/>+<sp/>1<sp/>-<sp/>b},<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>{a<sp/>+<sp/>1},<sp/>T{1},<sp/>multiplies&lt;&gt;{});</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(a,<sp/>b)<sp/>/<sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(b);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>combinatorics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/combinatorics/test_combinatorics.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecombinatorics_1_1test" kindref="compound">combinatorics::test</ref><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1_1test_1afa19fd10b0370b61660f897eb66f8875" kindref="member">test_perm</ref>()<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>2)<sp/>==<sp/>4<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>4)<sp/>==<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(0,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(1,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(1,<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1_1test_1a8936aa7ea767d4ccba752f2a5c54785f" kindref="member">test_fact</ref>()<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(4)<sp/>==<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(8)<sp/>==<sp/>8<sp/>*<sp/>7<sp/>*<sp/>6<sp/>*<sp/>5<sp/>*<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1_1test_1a02b85c66d33799029d94ecfbb7c8b062" kindref="member">test_choose</ref>()<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>2)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>3)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>5)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(0,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(1,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(1,<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(6,<sp/>3)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1_1test_1a28cd50807d464588cc9b5add7bed4f97" kindref="member">test_combinatorics</ref>()<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecombinatorics_1_1test_1afa19fd10b0370b61660f897eb66f8875" kindref="member">test_perm</ref>();</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecombinatorics_1_1test_1a8936aa7ea767d4ccba752f2a5c54785f" kindref="member">test_fact</ref>();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecombinatorics_1_1test_1a02b85c66d33799029d94ecfbb7c8b062" kindref="member">test_choose</ref>();</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>combinatorics::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecombinatorics_1_1test" kindref="compound">combinatorics::test</ref>;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>5<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/combinatorics/test_permutation.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/combinatorics/permutation.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepermutation" kindref="compound">permutation</ref><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;::operator[];</highlight></codeline>
<codeline lineno="1003" refid="classpermutation_1_1Permutation_1a7ca9cba1f9e0ee8243e3c69848479860" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation_1a7ca9cba1f9e0ee8243e3c69848479860" kindref="member">Permutation</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>:<sp/>vector&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;(n)<sp/>{<sp/>iota(begin(),<sp/>end(),<sp/>0LL);<sp/>}</highlight></codeline>
<codeline lineno="1004" refid="classpermutation_1_1Permutation_1af8c149f764bad9b01291d966d1719102" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation_1af8c149f764bad9b01291d966d1719102" kindref="member">Permutation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>initializer_list&lt;ll&gt;<sp/>&amp;arr)<sp/>:<sp/>vector&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;{arr}<sp/>{}</highlight></codeline>
<codeline lineno="1010" refid="classpermutation_1_1Permutation_1a1ac3027ff7bee17edbbb2f4f956f665b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/><ref refid="classpermutation_1_1Permutation_1a1ac3027ff7bee17edbbb2f4f956f665b" kindref="member">to_cycles</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>vis(size());</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>cycles;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>size())<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vis[i]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>cycle;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cycle.push_back(x);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(*this)[x];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>i);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cycles.push_back(cycle);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cycles;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027" refid="classpermutation_1_1Permutation_1a0b7480d74a8c5d9db8da2151638b4048" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation_1a0b7480d74a8c5d9db8da2151638b4048" kindref="member">Permutation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>&amp;cycles,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>shift<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>(n)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cycle<sp/>:<sp/>cycles)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>cycle.size())<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" kindref="member">ssize</ref>(cycle),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[cycle[i]]<sp/>=<sp/>cycle[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{i}<sp/>+<sp/>shift)];</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>(<ref refid="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" kindref="member">ssize</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>));<sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="test__compiled_8cpp_1a7fcf9006b0b6d5ce6b426ac6dea3b567" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>c(a.size());</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.size())<sp/>{<sp/>c[i]<sp/>=<sp/>a[b[i]];<sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>inv(p.size());</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>p.size())<sp/>{<sp/>inv[p[i]]<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inv;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>.to_cycles(),<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>.size(),<sp/>n);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepermutation" kindref="compound">permutation</ref>;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/combinatorics/test_permutation.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepermutation_1_1test" kindref="compound">permutation::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1aed3c9c5d90d50bda7028886916647a15" kindref="member">test_ops</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>::operator/;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>p1{0,<sp/>1,<sp/>3,<sp/>2};</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>p2{0,<sp/>2,<sp/>3,<sp/>1};</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p1<sp/>*<sp/>p2<sp/>==<sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>{0,<sp/>3,<sp/>2,<sp/>1}));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((p1<sp/>/<sp/>p2)<sp/>*<sp/>p2<sp/>==<sp/>p1));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((p2<sp/>/<sp/>p1)<sp/>*<sp/>p1<sp/>==<sp/>p2));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1a77ed30fee0c9874f9763b5665ee273b4" kindref="member">test_cycles_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>.to_cycles(),<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>.size())<sp/>==<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1a8672b5834aa87e0710dfec5d1d53a1ff" kindref="member">test_cycles</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a77ed30fee0c9874f9763b5665ee273b4" kindref="member">test_cycles_impl</ref>(<ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>{2,<sp/>1,<sp/>6,<sp/>4,<sp/>5,<sp/>3,<sp/>0});</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a77ed30fee0c9874f9763b5665ee273b4" kindref="member">test_cycles_impl</ref>(<ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>{0,<sp/>1,<sp/>2,<sp/>3});</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a77ed30fee0c9874f9763b5665ee273b4" kindref="member">test_cycles_impl</ref>(<ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref>{0});</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1a528d9ed1db3200393555b3dc75036599" kindref="member">test_power</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>{2,<sp/>1,<sp/>6,<sp/>4,<sp/>5,<sp/>3,<sp/>0};</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">permutation::power</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/>10)<sp/>==<sp/><ref refid="namespacemodulo__namespace_1a8e6fc91a032b336ea0bbed9eabf54f69" kindref="member">modulo_namespace::power</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/>10));</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">permutation::power</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/>-10)<sp/>==<sp/><ref refid="namespacemodulo__namespace_1a8e6fc91a032b336ea0bbed9eabf54f69" kindref="member">modulo_namespace::power</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/>-10));</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1a35c04b3a3683be26d7eb0723d772fad4" kindref="member">test_permutation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1aed3c9c5d90d50bda7028886916647a15" kindref="member">test_ops</ref>();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a8672b5834aa87e0710dfec5d1d53a1ff" kindref="member">test_cycles</ref>();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a528d9ed1db3200393555b3dc75036599" kindref="member">test_power</ref>();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>permutation::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepermutation_1_1test" kindref="compound">permutation::test</ref>;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>6<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/main.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/time.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetime__tools" kindref="compound">time_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(clock_::now())<sp/>t1;</highlight></codeline>
<codeline lineno="1114" refid="structtime__tools_1_1timer_1a7fe96a11cb200ff618cdc06c239cd1c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref>()<sp/>:<sp/>t1(<ref refid="core_2all_8hpp_1a71fb2247d044e41f5345bcdb26020926" kindref="member">clock_</ref>::now())<sp/>{}</highlight></codeline>
<codeline lineno="1115" refid="structtime__tools_1_1timer_1a9dec58724371809e1822c943cb94bfba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer_1a9dec58724371809e1822c943cb94bfba" kindref="member">~timer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" kindref="member">cerr</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>duration:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>duration&lt;ld&gt;(clock_::now()<sp/>-<sp/>t1).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetime__tools_1a4d00a3da24d192703891d9dba336e6b5" kindref="member">bench</ref>(Func<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>_t;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(a)<sp/>ans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(decltype(a)<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(decltype(a)<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>a;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>((-i)<sp/>%<sp/>(j));</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>the<sp/>benchmark<sp/>from<sp/>being<sp/>optimized<sp/>out.<sp/>I<sp/>don&apos;t<sp/>know<sp/>if<sp/>this<sp/>actually<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>_unused<sp/>=<sp/>ans;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>time_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetime__tools" kindref="compound">time_tools</ref>;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>4<sp/>&quot;./tools/../src/core/main.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" kindref="member">main2</ref>();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" kindref="member">in</ref><sp/>=<sp/>cin;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>argc)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-q&quot;</highlight><highlight class="normal">s)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" kindref="member">debug_mode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>ios::sync_with_stdio(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__compiled_8cpp_1aa021995764a0c77f628e3411497239cc" kindref="member">debug_mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" kindref="member">cerr</ref>.rdbuf(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ios<sp/>&amp;os<sp/>:<sp/>initializer_list&lt;reference_wrapper&lt;ios&gt;&gt;{<ref refid="test__compiled_8cpp_1acf30f45bb690161eda6eb343b019d6e7" kindref="member">in</ref>,<sp/>cout,<sp/><ref refid="core_2all_8hpp_1ad8a867e2e93131cb4d4afbedcd38245a" kindref="member">cerr</ref>,<sp/>clog})<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed(os);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os.rdbuf())<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.exceptions(ios::failbit<sp/>|<sp/>ios::badbit<sp/>|<sp/>ios::eofbit);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.precision(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>?<sp/>numeric_limits&lt;ld&gt;::max_digits10<sp/>:<sp/>5);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>cout.precision(numeric_limits&lt;ld&gt;::max_digits10);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>_t;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>t<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" kindref="member">multitest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>t)<sp/>{<sp/><ref refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" kindref="member">main2</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>8<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/core/test_utility.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility_1_1test" kindref="compound">utility::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a5b509a14966e453c36c0b3263b8c73f3" kindref="member">test_with</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>var<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_func<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w(23,<sp/>var);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>23);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>45;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_func();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a29adbf9294cbaa7132f9d922bea29299" kindref="member">test_uniq</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" kindref="member">uniq</ref>(vector&lt;ll&gt;{2,<sp/>-1,<sp/>3,<sp/>-1,<sp/>2,<sp/>3})<sp/>==<sp/>vector&lt;ll&gt;{-1,<sp/>2,<sp/>3}));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" kindref="member">uniq</ref>&lt;equal_to&lt;&gt;,<sp/>greater&lt;&gt;&gt;(vector&lt;ll&gt;{1,<sp/>-3,<sp/>5})<sp/>==<sp/>vector&lt;ll&gt;{5,<sp/>1,<sp/>-3}));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a027d0f534d798b71531e664ed33a7318" kindref="member">test_key_compare</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>a{24,<sp/>25};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>&lt;greater&lt;&gt;&gt;([&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[i];<sp/>})(1,<sp/>0));</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a1dc18cbf86fee8a275f4cc46d125f43c" kindref="member">test_bit_ceil</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(3)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(4)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(5)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>((1LL<sp/>&lt;&lt;<sp/>45)<sp/>-<sp/>100)<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>((1LL<sp/>&lt;&lt;<sp/>45))<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a7185c2baa5f4d2655e37174048fa6e1f" kindref="member">test_next_comb</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>0b111;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(x);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1011);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(x);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1101);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(x);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1110);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0b1;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(x);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b10);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" kindref="member">next_comb</ref>(x);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b100);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a2a5b83eea34a4e85d3d8ec37b9f1f774" kindref="member">test_ar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;<ref refid="namespaceutility_1a5527c46ab55c32f4bdf48a47564e3cf0" kindref="member">ar_t</ref>&lt;<ref refid="structll" kindref="compound">ll</ref>[2][3]&gt;,<sp/>array&lt;array&lt;ll,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;<ref refid="namespaceutility_1a5527c46ab55c32f4bdf48a47564e3cf0" kindref="member">ar_t</ref>&lt;array&lt;ll,<sp/>200&gt;[2][3]&gt;,<sp/>array&lt;array&lt;array&lt;ll,<sp/>200&gt;,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1aa1aed4e58acebcfd6d9150b64f4ad975" kindref="member">test_counting_sort</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>test<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>vec{3,<sp/>1,<sp/>5,<sp/>1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sorted_vec<sp/>=<sp/>vec;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(sorted_vec));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_sorted_vec<sp/>=<sp/>vec;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1a713c1fa985af64dbe0374a15cc3d4383" kindref="member">counting_sort</ref>(</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(count_sorted_vec),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>},<sp/>*max_element(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(vec))<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(count_sorted_vec<sp/>==<sp/>sorted_vec);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1_1test_1a8aec6a2b496df7ad483a46db1649ea2c" kindref="member">test_utility</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a5b509a14966e453c36c0b3263b8c73f3" kindref="member">test_with</ref>();</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a29adbf9294cbaa7132f9d922bea29299" kindref="member">test_uniq</ref>();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a7185c2baa5f4d2655e37174048fa6e1f" kindref="member">test_next_comb</ref>();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a2a5b83eea34a4e85d3d8ec37b9f1f774" kindref="member">test_ar</ref>();</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a1dc18cbf86fee8a275f4cc46d125f43c" kindref="member">test_bit_ceil</ref>();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a027d0f534d798b71531e664ed33a7318" kindref="member">test_key_compare</ref>();</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1aa1aed4e58acebcfd6d9150b64f4ad975" kindref="member">test_counting_sort</ref>();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utility::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutility_1_1test" kindref="compound">utility::test</ref>;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>9<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_bit.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/bit.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mono</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">Op<sp/>=<sp/>plus&lt;&gt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBIT" kindref="compound">BIT</ref><sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Value&gt;<sp/>arr;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>MonoidOp<sp/>op{};<sp/></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1260" refid="classBIT_1a6408bcee08d49c8ab90ac83bdba0f2f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classBIT_1a6408bcee08d49c8ab90ac83bdba0f2f1" kindref="member">BIT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>size_arg)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>arr(<ref refid="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" kindref="member">bit_ceil</ref>(size_arg)<sp/>+<sp/>1,<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(MonoidOp{},<sp/>Value{}))<sp/>{}</highlight></codeline>
<codeline lineno="1263" refid="classBIT_1a495d58c744095867ad69123897c60700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/><ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(MonoidOp{},<sp/>Value{});</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>r;<sp/>r<sp/>-=<sp/>get_len(r))<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>op(sum,<sp/>arr[r]);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276" refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" kindref="member">update</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++idx;<sp/>idx<sp/>&lt;<sp/>arr.size();<sp/>idx<sp/>+=<sp/>get_len(idx))<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[idx]<sp/>=<sp/>op(arr[idx],<sp/>value);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1285" refid="classBIT_1afaa408fe21402732f980204b6211425d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classBIT_1afaa408fe21402732f980204b6211425d" kindref="member">get_len</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx<sp/>&amp;<sp/>(-idx);<sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_bit.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="test__compiled_8cpp_1af86f570cf0a5201c700ffeec06aec7f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1af86f570cf0a5201c700ffeec06aec7f6" kindref="member">test_bit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBIT" kindref="compound">BIT&lt;ll&gt;</ref><sp/>bit(10);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>bit.<ref refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" kindref="member">update</ref>(3,<sp/>4);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(10)<sp/>==<sp/>4));</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>bit.<ref refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" kindref="member">update</ref>(2,<sp/>3);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(2)<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(3)<sp/>==<sp/>3));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(4)<sp/>==<sp/>7));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>bit.<ref refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" kindref="member">update</ref>(0,<sp/>2);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>bit.<ref refid="classBIT_1a20ea8eb0ea2065179c756ec96417227f" kindref="member">update</ref>(9,<sp/>5);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(10)<sp/>==<sp/>4<sp/>+<sp/>3<sp/>+<sp/>2<sp/>+<sp/>5));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(0)<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((bit.<ref refid="classBIT_1a495d58c744095867ad69123897c60700" kindref="member">query</ref>(1)<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>10<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_cht.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/cht.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" kindref="member">operator&lt;</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{real(x),<sp/>imag(x)};<sp/>})(a,<sp/>b);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick" kindref="compound">convex_hull_trick</ref><sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>generalize<sp/>these<sp/>products<sp/>for<sp/>multidimensional<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(conj(a)<sp/>*<sp/>b);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imag(conj(a)<sp/>*<sp/>b);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1abeaee6745d46728e8edf0f80a1e92ddf" kindref="member">area</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>(b<sp/>-<sp/>a,<sp/>c<sp/>-<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>area_pts<sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1abeaee6745d46728e8edf0f80a1e92ddf" kindref="member">area</ref>(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a<sp/>==<sp/>b<sp/>||<sp/>a<sp/>==<sp/>c<sp/>||<sp/>b<sp/>==<sp/>c<sp/>||<sp/>area_pts))<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>invalid_argument{</highlight><highlight class="stringliteral">&quot;Points<sp/>are<sp/>collinear.&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>area_pts<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(vector&lt;point&gt;<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_sort<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>why<sp/>do_sort?</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>h;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_sort)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*min_element(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>([](<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{imag(a),<sp/>real(a)};</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>bind(<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>,<sp/>p,<sp/>_1,<sp/>_2));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.push_back(p);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>!<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(h[h.size()<sp/>-<sp/>2],<sp/>h.back(),<sp/>x))<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.pop_back();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.push_back(x);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*partition_point(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(r),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(f(i)<sp/>&lt;<sp/>f(i<sp/>+<sp/>1));<sp/>});</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structconvex__hull__trick_1_1CHT" kindref="compound">CHT</ref><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>lines;<sp/></highlight></codeline>
<codeline lineno="1373" refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" kindref="member">CHT</ref>(vector&lt;point&gt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" kindref="member">uniq</ref>(v,<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>(<ref refid="test__compiled_8cpp_1a76cdb96860b77886867832efcffeeb32" kindref="member">lambda</ref>(imag),<sp/>equal_to{}),<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>(<ref refid="test__compiled_8cpp_1a76cdb96860b77886867832efcffeeb32" kindref="member">lambda</ref>(conj)));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(v,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377" refid="structconvex__hull__trick_1_1CHT_1a033ef6e8e798b2803762f8c199da345a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structconvex__hull__trick_1_1CHT_1a033ef6e8e798b2803762f8c199da345a" kindref="member">min</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eval<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(lines[i])<sp/>*<sp/>x<sp/>+<sp/>imag(lines[i]);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval(<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{size(lines)<sp/>-<sp/>1},<sp/>eval));</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>convex_hull_trick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_cht.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick_1_1test" kindref="compound">convex_hull_trick::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a1407d23268d09f369dbb939414ec7961" kindref="member">test_less</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{3,<sp/>5}));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{3,<sp/>1}));</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>1}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>1})));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2})));</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a923d7187d947f574ed2f5b54d9406f69" kindref="member">test_dot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>({1,<sp/>2},<sp/>{2,<sp/>5})<sp/>==<sp/>1<sp/>*<sp/>2<sp/>+<sp/>2<sp/>*<sp/>5));</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>({0,<sp/>2},<sp/>{3,<sp/>0})<sp/>==<sp/>0<sp/>*<sp/>3<sp/>+<sp/>2<sp/>*<sp/>0));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a84a3352ebc4eb5a1f911bb8e8d1af61d" kindref="member">test_wedge</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>0},<sp/>{0,<sp/>1})<sp/>==<sp/>1));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>1},<sp/>{1,<sp/>1})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>0},<sp/>{0,<sp/>0})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a9b689c83ba8f830281d1aabf43efd1e4" kindref="member">test_ccw</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>({1,<sp/>0},<sp/>{1,<sp/>1},<sp/>{0,<sp/>1})));</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>({0,<sp/>1},<sp/>{1,<sp/>1},<sp/>{1,<sp/>0})));</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_collinear<sp/>=<sp/>[&amp;](<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>b,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(invalid_argument<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({0,<sp/>1},<sp/>{0,<sp/>2},<sp/>{0,<sp/>-1});</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({2,<sp/>0},<sp/>{-3,<sp/>0},<sp/>{4,<sp/>0});</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({4,<sp/>6},<sp/>{6,<sp/>9},<sp/>{-4,<sp/>-6});</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1aa454df2800722deea3ac74b53e40a21b" kindref="member">test_convex_min</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{-100,<sp/>100},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>+<sp/>x;<sp/>})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{2,<sp/>5},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x;<sp/>})<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{-3,<sp/>5},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>-<sp/>4<sp/>*<sp/>x;<sp/>})<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a585d91f97ee3a90cbcdb2ba5bbfe94ac" kindref="member">test_hull</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>lines{{1,<sp/>2},<sp/>{4,<sp/>-2},<sp/>{-1,<sp/>3},<sp/>{1,<sp/>3},<sp/>{-4,<sp/>2},<sp/>{3,<sp/>4}};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>exp{lines[1],<sp/>lines[2],<sp/>lines[4],<sp/>lines[5]};</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(lines);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(h));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(exp));</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(h<sp/>==<sp/>exp);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1af431d14b14918c006bfb450ff5a69a81" kindref="member">test_cht</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>lines{{1,<sp/>2},<sp/>{4,<sp/>-2},<sp/>{-1,<sp/>3},<sp/>{1,<sp/>3},<sp/>{-4,<sp/>2},<sp/>{3,<sp/>4}};</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structconvex__hull__trick_1_1CHT" kindref="compound">CHT</ref><sp/>ch{lines};</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(x,<sp/>-1000,<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mn<sp/>=<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>lines)<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/>min(mn,<sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>(line,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{x,<sp/>1}));</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ch.min(x)<sp/>==<sp/>mn);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a05eb98d10b7444bbdc9fe64f4d99676a" kindref="member">test_geometry</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a923d7187d947f574ed2f5b54d9406f69" kindref="member">test_dot</ref>();</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a84a3352ebc4eb5a1f911bb8e8d1af61d" kindref="member">test_wedge</ref>();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a9b689c83ba8f830281d1aabf43efd1e4" kindref="member">test_ccw</ref>();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a1407d23268d09f369dbb939414ec7961" kindref="member">test_less</ref>();</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1aa454df2800722deea3ac74b53e40a21b" kindref="member">test_convex_min</ref>();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a585d91f97ee3a90cbcdb2ba5bbfe94ac" kindref="member">test_hull</ref>();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1af431d14b14918c006bfb450ff5a69a81" kindref="member">test_cht</ref>();</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>convex_hull_trick::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick_1_1test" kindref="compound">convex_hull_trick::test</ref>;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>11<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_dsu.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/dsu.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedsu__ds" kindref="compound">dsu_ds</ref><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>parent;<sp/></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>size_;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1466" refid="structdsu__ds_1_1dsu_1ada73da3392d6444f9b29d60669f3c762" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdsu__ds_1_1dsu_1ada73da3392d6444f9b29d60669f3c762" kindref="member">dsu</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>:<sp/>parent(n),<sp/>size_(n,<sp/>1)<sp/>{<sp/>iota(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(parent),<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="1468" refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>parent[x]<sp/>?<sp/>x<sp/>:<sp/>parent[x]<sp/>=<sp/><ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(parent[x]);<sp/>}</highlight></codeline>
<codeline lineno="1473" refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>find(x);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>find(y);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1aa72cfb348ae79fd2bdb5ded63cd36ef2" kindref="member">swap2</ref>(x,<sp/>y,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_[idx];<sp/>});</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_[y]<sp/>+=<sp/>size_[x];</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent[x]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1486"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dsu{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="test__compiled_8cpp_1a4d5579d5eb92e5c3234831659c6d02cf" kindref="member">delim</ref>;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(i);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dsu_ds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_dsu.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedsu__ds_1_1test" kindref="compound">dsu_ds::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacedsu__ds_1_1test_1adafe4323a317f827a39c3516cf6d792b" kindref="member">test_dsu</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>d{100};</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>100)<sp/>{<sp/>assert(d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(i)<sp/>==<sp/>i);<sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(3,<sp/>4));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(6,<sp/>10));</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(6,<sp/>6));</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(10,<sp/>3));</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(6,<sp/>3));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>idx{d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(3),<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(4),<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(6),<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(10)};</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(all_of(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(idx),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>idx[0];<sp/>}));</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>99)<sp/>{<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(i,<sp/>i<sp/>+<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>100)<sp/>{<sp/>assert(d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(i)<sp/>==<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a5a58bd229ccd7eac0892b762d178981c" kindref="member">find</ref>(0));<sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dsu_ds::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedsu__ds_1_1test" kindref="compound">dsu_ds::test</ref>;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>12<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_queue.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/queue.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacequeue__tools" kindref="compound">queue_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stack&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classqueue__tools_1_1QueueAdaptor" kindref="compound">QueueAdaptor</ref><sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1529" refid="classqueue__tools_1_1QueueAdaptor_1a0a12e0ff52602d46cea6f7bb072933f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack" kindref="compound">container_type</ref><sp/>=<sp/>Stack;</highlight></codeline>
<codeline lineno="1530" refid="classqueue__tools_1_1QueueAdaptor_1a41d9b80dbd9c412dbc7326586dbb3540" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a41d9b80dbd9c412dbc7326586dbb3540" kindref="member">value_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stack::value_type;</highlight></codeline>
<codeline lineno="1531" refid="classqueue__tools_1_1QueueAdaptor_1a7eb2812a5b5f265784995e3b1d796c0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a7eb2812a5b5f265784995e3b1d796c0b" kindref="member">size_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stack::size_type;</highlight></codeline>
<codeline lineno="1532" refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" kindref="member">reference</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stack::reference;</highlight></codeline>
<codeline lineno="1533" refid="classqueue__tools_1_1QueueAdaptor_1abfe056cff4a6a88624024d16b0442236" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1abfe056cff4a6a88624024d16b0442236" kindref="member">const_reference</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stack::const_reference;</highlight></codeline>
<codeline lineno="1534" refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1abfe056cff4a6a88624024d16b0442236" kindref="member">const_reference</ref><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(left.empty()<sp/>?<sp/>right<sp/>:<sp/>left).top();<sp/>}</highlight></codeline>
<codeline lineno="1535" refid="classqueue__tools_1_1QueueAdaptor_1ac807754cdc69adb7dcfd12c02a21d7cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" kindref="member">reference</ref><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1ac807754cdc69adb7dcfd12c02a21d7cb" kindref="member">front</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" kindref="member">reference</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classqueue__tools_1_1QueueAdaptor" kindref="compound">QueueAdaptor</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>());</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538" refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1abfe056cff4a6a88624024d16b0442236" kindref="member">const_reference</ref><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(right.empty()<sp/>?<sp/>left<sp/>:<sp/>right).top();<sp/>}</highlight></codeline>
<codeline lineno="1539" refid="classqueue__tools_1_1QueueAdaptor_1ad3a4f68bb1c2cbd0bedd8094e732bece" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" kindref="member">reference</ref><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1ad3a4f68bb1c2cbd0bedd8094e732bece" kindref="member">back</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classqueue__tools_1_1QueueAdaptor_1aaad88193dddc1d17404808cb98e1e79f" kindref="member">reference</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classqueue__tools_1_1QueueAdaptor" kindref="compound">QueueAdaptor</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>());</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542" refid="classqueue__tools_1_1QueueAdaptor_1a65573a420692f22b4274313469f3688b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a65573a420692f22b4274313469f3688b" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left.empty()<sp/>&amp;&amp;<sp/>right.empty();<sp/>}</highlight></codeline>
<codeline lineno="1543" refid="classqueue__tools_1_1QueueAdaptor_1adfb78c6b9828b06e9c8f29ae56b43078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a7eb2812a5b5f265784995e3b1d796c0b" kindref="member">size_type</ref><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1adfb78c6b9828b06e9c8f29ae56b43078" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left.size()<sp/>+<sp/>right.size();<sp/>}</highlight></codeline>
<codeline lineno="1544" refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a41d9b80dbd9c412dbc7326586dbb3540" kindref="member">value_type</ref><sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(empty()<sp/>?<sp/>left<sp/>:<sp/>right).push(val);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_invariant();</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548" refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left.pop();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left.empty()<sp/>&amp;&amp;<sp/>!right.empty())<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>right.top();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>size()<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right.pop();</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>!right.empty();<sp/>right.pop())<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left.push(right.top());</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right.push(last);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_invariant();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1567" refid="classqueue__tools_1_1QueueAdaptor_1a409777bac8958f09bf99f9ca2ff64ab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classqueue__tools_1_1QueueAdaptor_1a409777bac8958f09bf99f9ca2ff64ab0" kindref="member">get_left</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left;<sp/>}</highlight></codeline>
<codeline lineno="1568" refid="classqueue__tools_1_1QueueAdaptor_1a39e37c34ea5fd27421f3f8dabe733a28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classqueue__tools_1_1QueueAdaptor_1a39e37c34ea5fd27421f3f8dabe733a28" kindref="member">get_right</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right;<sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>Stack<sp/>left,<sp/>right;</highlight></codeline>
<codeline lineno="1572" refid="classqueue__tools_1_1QueueAdaptor_1a20ad33fb4364a4c4e5228185ac4b73f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor_1a20ad33fb4364a4c4e5228185ac4b73f1" kindref="member">check_invariant</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size()<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!left.empty()<sp/>&amp;&amp;<sp/>!right.empty());</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!left.empty());</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(front()<sp/>==<sp/>back());</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(empty());</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>stack&lt;pair&lt;T,<sp/>T&gt;&gt;&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classqueue__tools_1_1MinStack" kindref="compound">MinStack</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Base<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1585" refid="classqueue__tools_1_1MinStack_1ac9ae47477c69e5faadb9c478a153c596" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1ac9ae47477c69e5faadb9c478a153c596" kindref="member">container_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="1586" refid="classqueue__tools_1_1MinStack_1ac879ccf41b218e3d75e227314e84e0c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1ac879ccf41b218e3d75e227314e84e0c6" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="1587" refid="classqueue__tools_1_1MinStack_1aff2ea0311c1f8eb54918cc87d25673ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">size_type</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>;</highlight></codeline>
<codeline lineno="1588" refid="classqueue__tools_1_1MinStack_1aa0f4720a343e959a1c4539604b48e91f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1aa0f4720a343e959a1c4539604b48e91f" kindref="member">reference</ref><sp/>=<sp/><ref refid="classqueue__tools_1_1MinStack_1ac879ccf41b218e3d75e227314e84e0c6" kindref="member">value_type</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="1589" refid="classqueue__tools_1_1MinStack_1a6fbd0283e2f3522ba2a795b8e3bfabd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1a6fbd0283e2f3522ba2a795b8e3bfabd3" kindref="member">const_reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1ac879ccf41b218e3d75e227314e84e0c6" kindref="member">value_type</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="1590" refid="classqueue__tools_1_1MinStack_1a9d9144961b94102610066192b64b6efa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1MinStack_1a9d9144961b94102610066192b64b6efa" kindref="member">push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val)<sp/>{<sp/>Base::push({val,<sp/>::min(val,<sp/>min())});<sp/>}</highlight></codeline>
<codeline lineno="1592" refid="classqueue__tools_1_1MinStack_1af2d0b5ab34b19c4cca8f29aa0f382080" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classqueue__tools_1_1MinStack_1af2d0b5ab34b19c4cca8f29aa0f382080" kindref="member">top</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base::top().first;<sp/>}</highlight></codeline>
<codeline lineno="1594" refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" kindref="member">min</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base::empty()<sp/>?<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref><sp/>:<sp/>Base::top().second;<sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classqueue__tools_1_1MinQueue" kindref="compound">MinQueue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classqueue__tools_1_1QueueAdaptor" kindref="compound">QueueAdaptor</ref>&lt;MinStack&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1598" refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>{<sp/>return<sp/>::min(this-&gt;get_left().<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>(),<sp/>this-&gt;get_right().<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>queue_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_queue.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacequeue__tools_1_1test" kindref="compound">queue_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacequeue__tools_1_1test_1a6fd4ee97af3a8636da778c03cef44c14" kindref="member">test_queueadaptor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1QueueAdaptor" kindref="compound">QueueAdaptor&lt;stack&lt;ll&gt;</ref>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(4);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(5);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(6);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(7);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(8);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1adfb78c6b9828b06e9c8f29ae56b43078" kindref="member">size</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a65573a420692f22b4274313469f3688b" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>()<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>()<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>()<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>()<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>()<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1adfb78c6b9828b06e9c8f29ae56b43078" kindref="member">size</ref>()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a65573a420692f22b4274313469f3688b" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(4);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a603c22db9148d592426c73e53ad88178" kindref="member">front</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(q.<ref refid="classqueue__tools_1_1QueueAdaptor_1a70c630a800a12e880917ffc2ccbd1153" kindref="member">back</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacequeue__tools_1_1test_1a82af7ed59099217b26702a8b7c1f1d40" kindref="member">test_minstack</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1MinStack" kindref="compound">MinStack&lt;ll&gt;</ref><sp/>ms;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.<ref refid="classqueue__tools_1_1MinStack_1a9d9144961b94102610066192b64b6efa" kindref="member">push</ref>(2);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.<ref refid="classqueue__tools_1_1MinStack_1a9d9144961b94102610066192b64b6efa" kindref="member">push</ref>(5);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ms.<ref refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" kindref="member">min</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.pop();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.<ref refid="classqueue__tools_1_1MinStack_1a9d9144961b94102610066192b64b6efa" kindref="member">push</ref>(1);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ms.<ref refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" kindref="member">min</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.pop();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ms.<ref refid="classqueue__tools_1_1MinStack_1abdcf9b4a593fa77e2702ee740814ff8b" kindref="member">min</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacequeue__tools_1_1test_1abbd87df8add26a608947323b21bb1921" kindref="member">test_minqueue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classqueue__tools_1_1MinQueue" kindref="compound">MinQueue&lt;ll&gt;</ref><sp/>mq;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(3);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(5);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1a5857db040da0411af2957d3d44783808" kindref="member">push</ref>(4);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>mq.<ref refid="classqueue__tools_1_1QueueAdaptor_1aab204b0f776af2b94156b69435b81df8" kindref="member">pop</ref>();</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mq.<ref refid="classqueue__tools_1_1MinQueue_1a73bf3796b5aadd9098a2d1cee3485739" kindref="member">min</ref>()<sp/>==<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacequeue__tools_1_1test_1ae0e3be2c757c8f50b8baee654071b01e" kindref="member">test_queue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacequeue__tools_1_1test_1a82af7ed59099217b26702a8b7c1f1d40" kindref="member">test_minstack</ref>();</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacequeue__tools_1_1test_1a6fd4ee97af3a8636da778c03cef44c14" kindref="member">test_queueadaptor</ref>();</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacequeue__tools_1_1test_1abbd87df8add26a608947323b21bb1921" kindref="member">test_minqueue</ref>();</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>queue_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacequeue__tools_1_1test" kindref="compound">queue_tools::test</ref>;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>13<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_segment_tree.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/segment_tree.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree" kindref="compound">segment_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>non<sp/>commutative<sp/>monoids,<sp/>specify<sp/>the<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>multidimensional</highlight></codeline>
<codeline lineno="1680"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Query,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Update,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_lazy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ptr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_pers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base<sp/>=<sp/>2&gt;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree</ref><sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1684" refid="classsegment__tree_1_1SegmentTree_1addcc5c68b1d667b6a4f868e287dc9bbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1addcc5c68b1d667b6a4f868e287dc9bbf" kindref="member">SegmentTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>size_arg)</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size_{size_arg},<sp/>ceil_size{<ref refid="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" kindref="member">power_ceil</ref>(size_arg,<sp/>base)},</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes(!has_ptr<sp/>?<sp/>base<sp/>*<sp/>ceil_size<sp/>:<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NodeExp{};</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693" refid="classsegment__tree_1_1SegmentTree_1a7b87087b2001e8a0f470a4e78f394502" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a7b87087b2001e8a0f470a4e78f394502" kindref="member">SegmentTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr)<sp/>:<sp/><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree</ref>(arr.size())<sp/>{<sp/>build(arr);<sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!has_pers<sp/>||<sp/>has_ptr,<sp/></highlight><highlight class="stringliteral">&quot;Pointers<sp/>required<sp/>for<sp/>persistency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(base<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Base<sp/>must<sp/>be<sp/>at<sp/>least<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LazyPart<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>lazy{<ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Update{},<sp/>T{})};</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NodeCore<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>conditional_t&lt;has_lazy,<sp/>LazyPart,<sp/>Empty&gt;<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>qsum{<ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{})};</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NodeExp<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>NodeCore<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;NodeExp<sp/>*,<sp/>base&gt;<sp/>child{};</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1705" refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>=<sp/>conditional_t&lt;has_ptr,<sp/>NodeExp<sp/>*,<sp/>ll&gt;;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707" refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*obj;<sp/>}</highlight></codeline>
<codeline lineno="1708" refid="classsegment__tree_1_1SegmentTree_1a7b3d2ec003c25e51626c78595ba53401" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1a7b3d2ec003c25e51626c78595ba53401" kindref="member">get_core</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodes[idx];<sp/>}</highlight></codeline>
<codeline lineno="1709" refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj-&gt;child[i];<sp/>}</highlight></codeline>
<codeline lineno="1710" refid="classsegment__tree_1_1SegmentTree_1a6a4f7d2b00e4bc94806364ec0f999700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a6a4f7d2b00e4bc94806364ec0f999700" kindref="member">get_child</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base<sp/>*<sp/>idx<sp/>+<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1711" refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>df<sp/>=<sp/>(node_r<sp/>-<sp/>node_l)<sp/>/<sp/>base;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_l<sp/>+<sp/>df<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1715" refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr)<sp/>{<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(arr,<sp/>root,<sp/>0,<sp/>ceil_size);<sp/>}</highlight></codeline>
<codeline lineno="1716" refid="classsegment__tree_1_1SegmentTree_1ad8b2ae5fb114f861e0dcc0fb5d370b8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad8b2ae5fb114f861e0dcc0fb5d370b8f" kindref="member">build</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>-<sp/>node_l<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).qsum<sp/>=</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_l<sp/>&lt;<sp/>arr.size()<sp/>?<sp/>arr[node_l]<sp/>:<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build(arr,<sp/>get_child(idx,<sp/>inc),<sp/>mid(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Query{}(ret,<sp/>get_core(get_child(idx,<sp/>inc)).qsum);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).qsum<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731" refid="classsegment__tree_1_1SegmentTree_1a52f59c0f0db30957d70083a26e7ac967" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a52f59c0f0db30957d70083a26e7ac967" kindref="member">down</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leaf<sp/>=<sp/>node_r<sp/>-<sp/>node_l<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leaf)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ptr<sp/>:<sp/>idx-&gt;child)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref>{};</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeCore_1a4852cef24d043d15388e91826ca726e6" kindref="member">qsum</ref><sp/>=<sp/>Update{}(get_core(idx).qsum,<sp/>get_core(idx).lazy);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leaf)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(get_child(idx,<sp/>i)).lazy<sp/>+=<sp/>get_core(idx).lazy;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).lazy<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Update{},<sp/>get_core(idx).lazy);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753" refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>&lt;=<sp/>l<sp/>||<sp/>r<sp/>&lt;=<sp/>node_l)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="treap_8hpp_1a4a94ad7cd8f33ebf044afd6d79a174f8" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&lt;=<sp/>node_l<sp/>&amp;&amp;<sp/>node_r<sp/>&lt;=<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_core(idx).qsum;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Query{}(ret,<sp/>query(l,<sp/>r,<sp/>get_child(idx,<sp/>inc),<sp/>mid(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772" refid="classsegment__tree_1_1SegmentTree_1ad39bd604bb4dc65a3204865f578f6fd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad39bd604bb4dc65a3204865f578f6fd9" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>custom_root)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(0<sp/>&lt;=<sp/>l<sp/>&amp;&amp;<sp/>l<sp/>&lt;=<sp/>r<sp/>&amp;&amp;<sp/>r<sp/>&lt;=<sp/>size_))<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>out_of_range{</highlight><highlight class="stringliteral">&quot;Segment<sp/>tree<sp/>query<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>query(l,<sp/>r,<sp/>custom_root,<sp/>0,<sp/>ceil_size);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778" refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" kindref="member">query</ref>(l,<sp/>r,<sp/>root);<sp/>}</highlight></codeline>
<codeline lineno="1779" refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" kindref="member">update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>&lt;=<sp/>l<sp/>||<sp/>r<sp/>&lt;=<sp/>node_l)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="treap_8hpp_1a4a94ad7cd8f33ebf044afd6d79a174f8" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref>{*idx};</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&lt;=<sp/>node_l<sp/>&amp;&amp;<sp/>node_r<sp/>&lt;=<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).lazy<sp/>=<sp/>Update{}(get_core(idx).lazy,<sp/>val);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="treap_8hpp_1a4a94ad7cd8f33ebf044afd6d79a174f8" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).qsum<sp/>=<sp/>Update{}(get_core(idx).qsum,<sp/>val);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_update<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>update(l,<sp/>r,<sp/>val,<sp/>get_child(idx,<sp/>inc),</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_child(idx,<sp/>inc)<sp/>=<sp/>get_update();</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_update();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).qsum<sp/>=<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_core(idx).qsum<sp/>=</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Query{}(get_core(idx).qsum,<sp/>get_core(get_child(idx,<sp/>inc)).qsum);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819" refid="classsegment__tree_1_1SegmentTree_1ad2375790875e1231b39795e93d61e176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2375790875e1231b39795e93d61e176" kindref="member">update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(!has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(l<sp/>+<sp/>1<sp/>==<sp/>r);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root<sp/>=<sp/>update(l,<sp/>r,<sp/>val,<sp/>root,<sp/>0,<sp/>ceil_size);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825" refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" kindref="member">destroy</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr<sp/>&amp;&amp;<sp/>!has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{<sp/>destroy(get_child(node,<sp/>inc));<sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835" refid="classsegment__tree_1_1SegmentTree_1a9f3420768798bd5b372b6f6a079de487" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a9f3420768798bd5b372b6f6a079de487" kindref="member">~SegmentTree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr<sp/>&amp;&amp;<sp/>!has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy(root);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>size_;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>ceil_size;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>root;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Root<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;NodeCore&gt;<sp/>nodes;<sp/></highlight><highlight class="comment">/*&lt;<sp/>1-indexed<sp/>implicit<sp/>array<sp/>of<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>segment_tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_segment_tree.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree_1_1test" kindref="compound">segment_tree::test</ref><sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_lazy,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_pers,<sp/>ll<sp/>base&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesegment__tree_1_1test_1a216822c7d0ea6df09e13ff90a519e0fd" kindref="member">test_segment_tree_impl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree&lt;ll, Max, plus&lt;&gt;</ref>,<sp/>has_lazy,<sp/>has_ptr,<sp/>has_pers,<sp/>base&gt;<sp/>seg{1000};</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>3)<sp/>==<sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(7,<sp/>9)<sp/>==<sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>10)<sp/>{<sp/>seg.update(i,<sp/>i<sp/>+<sp/>1,<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upd_old<sp/>=<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seg.update(0,<sp/>1,<sp/>0);<sp/>};</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NodePtr<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(seg)::NodeExp<sp/>*;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>NodePtr<sp/>old;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old<sp/>=<sp/>upd_old();</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upd_old();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(2,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old2<sp/>=<sp/>seg.update(4,<sp/>5,<sp/>3);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(2,<sp/>3,<sp/>-2);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(4,<sp/>5,<sp/>-3);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>10)<sp/>{<sp/>seg.update(i,<sp/>i<sp/>+<sp/>1,<sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(0,<sp/>10,<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upd1<sp/>=<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seg.update(3,<sp/>4,<sp/>10);<sp/>};</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodePtr<sp/>old_lazy;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_lazy<sp/>=<sp/>upd1();</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upd1();</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old_lazy)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(2,<sp/>4,<sp/>20);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>3)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>10)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(0,<sp/>2,<sp/>10);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>10)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old_lazy)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesegment__tree_1_1test_1a9d9bbf8a59763caf631ceb0808e1b105" kindref="member">test_segment_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>false,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>false,<sp/>false,<sp/>3&gt;();</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>lazy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;true,<sp/>false,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>lazy<sp/>and<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>ptr<sp/>and<sp/>pers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>true,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>lazy<sp/>and<sp/>ptr<sp/>and<sp/>pers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;true,<sp/>true,<sp/>true,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>segment_tree::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree_1_1test" kindref="compound">segment_tree::test</ref>;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>14<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_sparse_table.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/sparse_table.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesparse__table" kindref="compound">sparse_table</ref><sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Semilattice&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsparse__table_1_1SparseTable" kindref="compound">SparseTable</ref><sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1942" refid="classsparse__table_1_1SparseTable_1a625a4d7a54800fdde78057a1fcc670db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsparse__table_1_1SparseTable_1a625a4d7a54800fdde78057a1fcc670db" kindref="member">SparseTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr)</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>meet(<ref refid="namespaceutility_1a750478c01441fac1c27f14bea2cb74ea" kindref="member">log_ceil</ref>(arr.size(),<sp/>2),<sp/>vector&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;(arr.size()))<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meet[0]<sp/>=<sp/>arr;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(pw,<sp/>1,<sp/>meet.size())<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>arr.size())<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>1LL<sp/>&lt;&lt;<sp/>(pw<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meet[pw][i]<sp/>=<sp/>Semilattice{}(</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meet[pw<sp/>-<sp/>1][i],<sp/>meet[pw<sp/>-<sp/>1][min(i<sp/>+<sp/>half,<sp/><ref refid="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" kindref="member">ssize</ref>(arr)<sp/>-<sp/>1)]);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953" refid="classsparse__table_1_1SparseTable_1a0ad8b0233da443f1f842b27183f05265" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsparse__table_1_1SparseTable_1a0ad8b0233da443f1f842b27183f05265" kindref="member">query</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>r<sp/>-<sp/>l;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Semilattice{},<sp/>T{});</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>put<sp/>this<sp/>in<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>floor_log2<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>)<sp/>*<sp/>CHAR_BIT)<sp/>-<sp/>1<sp/>-<sp/>__builtin_clzll(len);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Semilattice{}(meet[floor_log2][l],</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meet[floor_log2][r<sp/>-<sp/>(1LL<sp/>&lt;&lt;<sp/>floor_log2)]);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>meet;<sp/></highlight></codeline>
<codeline lineno="1966"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1973"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mono</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsparse__table_1_1DisjointSparseTable" kindref="compound">DisjointSparseTable</ref><sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1975" refid="classsparse__table_1_1DisjointSparseTable_1aef1bf29d0fe4ca8fa924001bf90fde22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsparse__table_1_1DisjointSparseTable_1aef1bf29d0fe4ca8fa924001bf90fde22" kindref="member">DisjointSparseTable</ref>(vector&lt;T&gt;<sp/>arr)</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>sum(<ref refid="namespaceutility_1a750478c01441fac1c27f14bea2cb74ea" kindref="member">log_ceil</ref>(arr.size(),<sp/>2),<sp/>vector&lt;T&gt;(<ref refid="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" kindref="member">power_ceil</ref>(arr.size(),<sp/>2)))<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr.resize(sum[0].size(),<sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Monoid{},<sp/>T{}));</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(level,<sp/>sum.size())<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(block,<sp/>1LL<sp/>&lt;&lt;<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>half<sp/>of<sp/>the<sp/>block<sp/>contains<sp/>suffix<sp/>sums,<sp/>the<sp/>second<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>prefix<sp/>sums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>block<sp/>&lt;&lt;<sp/>(sum.size()<sp/>-<sp/>level);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>(block<sp/>+<sp/>1)<sp/>&lt;&lt;<sp/>(sum.size()<sp/>-<sp/>level);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>middle<sp/>=<sp/>(end<sp/>+<sp/>start)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>arr[middle];</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[level][middle]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(x,<sp/>middle<sp/>+<sp/>1,<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>Monoid{}(val,<sp/>arr[x]);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[level][x]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>arr[middle<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[level][middle<sp/>-<sp/>1]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a7b724588414fb77283c807a1ad82313c" kindref="member">fr</ref>(x,<sp/>start,<sp/>middle<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>Monoid{}(val,<sp/>arr[x]);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum[level][x]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001" refid="classsparse__table_1_1DisjointSparseTable_1a771c763802ff4f1679749951ae94393e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsparse__table_1_1DisjointSparseTable_1a771c763802ff4f1679749951ae94393e" kindref="member">query</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(l<sp/>&lt;=<sp/>r);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>==<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Monoid{},<sp/>T{});</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>+<sp/>1<sp/>==<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum.back()[l];</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>half<sp/>open<sp/>interval<sp/>to<sp/>closed<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--r;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>of<sp/>the<sp/>leftmost<sp/>different<sp/>bit<sp/>from<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos_diff<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>)<sp/>*<sp/>CHAR_BIT)<sp/>-<sp/>1<sp/>-<sp/>__builtin_clzll(l<sp/>^<sp/>r);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>sum.size()<sp/>-<sp/>1<sp/>-<sp/>pos_diff;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Monoid{}(sum[level][l],<sp/>sum[level][r]);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;T&gt;&gt;<sp/>sum;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sparse_table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesparse__table" kindref="compound">sparse_table</ref>;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_sparse_table.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesparse__table_1_1test" kindref="compound">sparse_table::test</ref><sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Table,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Monoid&gt;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesparse__table_1_1test_1a274f88cabaff31f12dbb19ed28eb1bb7" kindref="member">test_sparse_table_impl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>data{6,<sp/>2,<sp/>4,<sp/>1,<sp/>7,<sp/>3,<sp/>4,<sp/>2,<sp/>7,<sp/>2,<sp/>4,<sp/>1,<sp/>6};</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>Table&lt;T,<sp/>Monoid&gt;<sp/>sp{data};</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(start,<sp/>data.size())<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(end,<sp/>start,<sp/>data.size())<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sp.query(start,<sp/>end)<sp/>==</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulate(begin(data)<sp/>+<sp/>start,<sp/>begin(data)<sp/>+<sp/>end,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Monoid{},<sp/>T{}),<sp/>Monoid{}));</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesparse__table_1_1test_1ad6ec7466ef06bcb50a79ee26c4a05db0" kindref="member">test_sparse_table</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sparse_table_impl&lt;SparseTable,<sp/>ll,<sp/>Min&gt;();</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sparse_table_impl&lt;DisjointSparseTable,<sp/>ll,<sp/>Min&gt;();</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sparse_table_impl&lt;DisjointSparseTable,<sp/>ll,<sp/>plus&lt;&gt;&gt;();</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sparse_table_impl&lt;DisjointSparseTable,<sp/>modulo,<sp/>multiplies&lt;&gt;&gt;();</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sparse_table::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesparse__table_1_1test" kindref="compound">sparse_table::test</ref>;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>15<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/test_splay_tree.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/ds/splay_tree.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree" kindref="compound">splay_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Node&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsplay__tree_1_1PathParent" kindref="compound">PathParent</ref><sp/>{<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*path_parent{};<sp/>};</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_link_cut<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode</ref></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>conditional_t&lt;has_link_cut,<sp/>PathParent&lt;SplayNode&lt;T,<sp/>has_link_cut&gt;&gt;,<sp/>Empty&gt;<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2058" refid="structsplay__tree_1_1SplayNode_1a8fd96533069082b51ae1a58346c08f94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode_1a8fd96533069082b51ae1a58346c08f94" kindref="member">SplayNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2059" refid="structsplay__tree_1_1SplayNode_1a6f8ea4b8bc92264b47e93ce969e53d54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode_1a6f8ea4b8bc92264b47e93ce969e53d54" kindref="member">SplayNode</ref>(T<sp/>value_arg)<sp/>:<sp/>value{value_arg}<sp/>{}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>array&lt;SplayNode<sp/>*,<sp/>2&gt;<sp/>child{};<sp/></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode</ref><sp/>*parent{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2063" refid="structsplay__tree_1_1SplayNode_1a73de7d8fe94fc66a6a43427751e8a546" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode_1a73de7d8fe94fc66a6a43427751e8a546" kindref="member">side</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent-&gt;child[1]<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067" refid="structsplay__tree_1_1SplayNode_1a099b6b1b7632cb57ee28bc474d86343e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode_1a099b6b1b7632cb57ee28bc474d86343e" kindref="member">rotate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>side();</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;parent)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;parent-&gt;attach(p-&gt;side(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;attach(i,<sp/>child[!i]);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attach(!i,<sp/>p);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_link_cut)<sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;path_parent<sp/>=<sp/>p-&gt;path_parent;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2083" refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>parent;<sp/>rotate())<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;parent)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(side()<sp/>==<sp/>parent-&gt;side()<sp/>?<sp/>parent<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;rotate();</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091" refid="structsplay__tree_1_1SplayNode_1a82d47b54b62b9e59f594af8db601fc05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>array&lt;SplayNode<sp/>*,<sp/>2&gt;<sp/><ref refid="structsplay__tree_1_1SplayNode_1a82d47b54b62b9e59f594af8db601fc05" kindref="member">split</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay();</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>use<sp/>detach<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>child[1];</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right-&gt;parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;right<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>right};</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101" refid="structsplay__tree_1_1SplayNode_1a510653918c7b8181c888bbb608a9e6ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode_1a510653918c7b8181c888bbb608a9e6ee" kindref="member">attach</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>side,<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>new_)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_)<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child[side]<sp/>=<sp/>new_;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsplay__tree_1_1SplayTree" kindref="compound">SplayTree</ref><sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2111" refid="structsplay__tree_1_1SplayTree_1a7ebf6727cb412c312c2da10112ff4db4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>=<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2115" refid="structsplay__tree_1_1SplayTree_1_1iterator_1a69bb5a2446e8219c0eca5b6791272e23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1a69bb5a2446e8219c0eca5b6791272e23" kindref="member">iterator_category</ref><sp/>=<sp/>bidirectional_iterator_tag;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2118" refid="structsplay__tree_1_1SplayTree_1_1iterator_1a1b2e58809547e4402b8a7ef16ed8253d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1a1b2e58809547e4402b8a7ef16ed8253d" kindref="member">operator--</ref>()<sp/>{<sp/>advance&lt;false&gt;();<sp/>}</highlight></codeline>
<codeline lineno="2119" refid="structsplay__tree_1_1SplayTree_1_1iterator_1a87fdbf8660f782a32ee209ab7108c0e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1a87fdbf8660f782a32ee209ab7108c0e8" kindref="member">operator++</ref>()<sp/>{<sp/>advance&lt;true&gt;();<sp/>}</highlight></codeline>
<codeline lineno="2120" refid="structsplay__tree_1_1SplayTree_1_1iterator_1afdc7a7403ba2e1b78fac2480a82e974f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1afdc7a7403ba2e1b78fac2480a82e974f" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node-&gt;value;<sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node;</highlight></codeline>
<codeline lineno="2122" refid="structsplay__tree_1_1SplayTree_1_1iterator_1ab0ea6ed296b79fa203a92992006448ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1ab0ea6ed296b79fa203a92992006448ea" kindref="member">iterator</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node_arg)<sp/>:<sp/>node(node_arg)<sp/>{}</highlight></codeline>
<codeline lineno="2123" refid="structsplay__tree_1_1SplayTree_1_1iterator_1ac7fc8c5b9cf35ae5b350631deda6b3c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1ac7fc8c5b9cf35ae5b350631deda6b3c3" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref><sp/>oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>==<sp/>oth.<ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1ad3b5ad84c1a0138db075e2c61eb83144" kindref="member">node</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2126" refid="structsplay__tree_1_1SplayTree_1_1iterator_1a5de551652a02ec33810bc159032be3de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dir&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator_1a5de551652a02ec33810bc159032be3de" kindref="member">advance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>extremum&lt;!dir&gt;(node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref><sp/>&amp;&amp;<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a73de7d8fe94fc66a6a43427751e8a546" kindref="member">side</ref>()<sp/>==<sp/>dir;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref>)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*root{};<sp/></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>size_{};<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2138" refid="structsplay__tree_1_1SplayTree_1aa627e1ec6a9f5f62cb2aba123f47df0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree_1aa627e1ec6a9f5f62cb2aba123f47df0b" kindref="member">SplayTree</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2139" refid="structsplay__tree_1_1SplayTree_1a04a5fff3d078c370872ba89bbc90b979" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree_1a04a5fff3d078c370872ba89bbc90b979" kindref="member">~SplayTree</ref>()<sp/>{<sp/>destroy(root);<sp/>}</highlight></codeline>
<codeline lineno="2140" refid="structsplay__tree_1_1SplayTree_1ac6144f6ba3df06f3eb31da230d62a50b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1ac6144f6ba3df06f3eb31da230d62a50b" kindref="member">destroy</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>child<sp/>:<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy(child);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150" refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++size_;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root)<sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;nw<sp/>=<sp/>y-&gt;child[x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>&gt;<sp/>y-&gt;value];</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nw)<sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nw<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nw-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nw-&gt;splay();</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171" refid="structsplay__tree_1_1SplayTree_1a2bf075a9e6a46e3f9b61e7b00b546707" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1a2bf075a9e6a46e3f9b61e7b00b546707" kindref="member">insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="treap_8hpp_1ad45b31cb3a5a560af114abfcbce83936" kindref="member">insert</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode</ref>{key});</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175" refid="structsplay__tree_1_1SplayTree_1a967e320e3d33cad8b0a9c30cd51ed924" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1a967e320e3d33cad8b0a9c30cd51ed924" kindref="member">erase</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>();</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/><ref refid="treap_8hpp_1a4338e31f2a01e882efc6adf47768c076" kindref="member">join</ref>(x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[0],<sp/>x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--size_;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184" refid="structsplay__tree_1_1SplayTree_1a3c4ae0ba499f4f13a60602ca082365fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1a3c4ae0ba499f4f13a60602ca082365fc" kindref="member">erase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{<sp/><ref refid="structsplay__tree_1_1SplayTree_1a3c4ae0ba499f4f13a60602ca082365fc" kindref="member">erase</ref>(find(key));<sp/>}</highlight></codeline>
<codeline lineno="2185" refid="structsplay__tree_1_1SplayTree_1ac3a1a0fa259a0f23787211fb94152acd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="structsplay__tree_1_1SplayTree_1ac3a1a0fa259a0f23787211fb94152acd" kindref="member">extremum</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[i];<sp/>x<sp/>=<sp/>x-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[i])</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193" refid="structsplay__tree_1_1SplayTree_1a21a513a7ac2715f280d2a89b3890722a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="structsplay__tree_1_1SplayTree_1a21a513a7ac2715f280d2a89b3890722a" kindref="member">join</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a)<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mx<sp/>=<sp/>extremum&lt;true&gt;(a);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mx-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a543aa24b599c0efa494914be781a2435" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mx;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2206" refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>&amp;&amp;<sp/>key<sp/>!=<sp/>x-&gt;value)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>x-&gt;child[key<sp/>&gt;<sp/>x-&gt;value];</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!next)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;splay();</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2220" refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="2221" refid="structsplay__tree_1_1SplayTree_1a91876a3a77e0f9c9c8550bf527a2f96f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1a91876a3a77e0f9c9c8550bf527a2f96f" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2222" refid="structsplay__tree_1_1SplayTree_1a2f4c63a201ae3d63d08229382dcbfc67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structsplay__tree_1_1SplayTree_1a2f4c63a201ae3d63d08229382dcbfc67" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref>{extremum&lt;false&gt;(root)};<sp/>}</highlight></codeline>
<codeline lineno="2223" refid="structsplay__tree_1_1SplayTree_1a45aa483490efb984be745d3847061eba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref><sp/><ref refid="structsplay__tree_1_1SplayTree_1a45aa483490efb984be745d3847061eba" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayTree_1_1iterator" kindref="compound">iterator</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};<sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2225"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>splay_tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree" kindref="compound">splay_tree</ref>;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/ds/test_splay_tree.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree_1_1test" kindref="compound">splay_tree::test</ref><sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplay__tree_1_1test_1a5aa5fd954b1cb0fb099a2310d2801e9e" kindref="member">test_splay_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree" kindref="compound">SplayTree&lt;int&gt;</ref><sp/>sp;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(4);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(3);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(5);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!sp.<ref refid="structsplay__tree_1_1SplayTree_1a91876a3a77e0f9c9c8550bf527a2f96f" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(4)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(3)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(5)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(2)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(6)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a967e320e3d33cad8b0a9c30cd51ed924" kindref="member">erase</ref>(3);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(3)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(5)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(4)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(20);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(-2);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(6);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>expected{-2,<sp/>4,<sp/>5,<sp/>6,<sp/>20};</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>expected.size());</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(x)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(sp.<ref refid="structsplay__tree_1_1SplayTree_1a2f4c63a201ae3d63d08229382dcbfc67" kindref="member">begin</ref>(),<sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a45aa483490efb984be745d3847061eba" kindref="member">end</ref>(),<sp/>back_inserter(vec));</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vec<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>splay_tree::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree_1_1test" kindref="compound">splay_tree::test</ref>;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>16<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/test_2sat.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/2sat.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory" kindref="compound">graph_theory</ref><sp/>{</highlight></codeline>
<codeline lineno="2274" refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>=<sp/>vector&lt;vector&lt;ll&gt;&gt;;</highlight></codeline>
<codeline lineno="2276"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>weight,<sp/>a,<sp/>b;</highlight></codeline>
<codeline lineno="2278" refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{weight,<sp/>a,<sp/>b};<sp/>}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2281"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" kindref="member">operator&lt;</ref>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()<sp/>&lt;<sp/>b.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>();<sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" kindref="member">operator==</ref>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>()<sp/>==<sp/>b.<ref refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" kindref="member">to_tuple</ref>();<sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="test__compiled_8cpp_1ab13ab1059a1675ee7a774c4524b84d23" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;edge{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1ae8364c3bd91a36e17fc27897682b793b" kindref="member">a</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" kindref="member">weight</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.<ref refid="structgraph__theory_1_1edge_1a57daf64fddd9cbc445c13c4a828a2a06" kindref="member">b</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2288" refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[u].push_back(v);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[v].push_back(u);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(vector&lt;vector&lt;pr&gt;&gt;<sp/>graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>d(graph.size(),<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>),<sp/>pv(graph.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1ac0b978e8ffc2c44656160a679f86e22a" kindref="member">prio_queue_t&lt;pr, greater&lt;&gt;</ref>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>d[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>d.size())<sp/>{<sp/>q.push({d[i],<sp/>i});<sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q.size())<sp/>{</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[di,<sp/>a]<sp/>=<sp/>q.top();</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.pop();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di<sp/>!=<sp/>d[a])<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>:<sp/>graph[a])<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[b,<sp/>w]<sp/>=<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[b];</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nw<sp/>=<sp/>di<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nw<sp/>&lt;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv[b]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.push({x,<sp/>b});</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array&lt;vector&lt;ll&gt;,<sp/>2&gt;{d,<sp/>pv};</highlight></codeline>
<codeline lineno="2318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2323"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>do<sp/>we<sp/>want<sp/>to<sp/>consider<sp/>zero-length<sp/>paths?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(graph.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>graph.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>graph;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[i][j];</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>min(x,<sp/>d[i][k]<sp/>+<sp/>d[k][j]);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2339"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a43f33335bd84b91252969b3b17f8b09d" kindref="member">mst</ref>(vector&lt;edge&gt;<sp/>edges,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(edges));</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>d{n};</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;edge&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;e<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d.<ref refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" kindref="member">join</ref>(e.a,<sp/>e.b))<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(e);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Searcher,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref><sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>Graph<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;graph;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>visited;<sp/></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>deque&lt;ll&gt;<sp/>queue;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>parent;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>distance;<sp/><sp/></highlight></codeline>
<codeline lineno="2358" refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a5d1bf0cacd1f3e805ac724fc3ffc91ca" kindref="member">GeneralSearch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph<sp/>&amp;g_)</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>graph(g_),<sp/>visited(graph.size()),<sp/>parent(graph.size(),<sp/>-1),</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance(graph.size(),<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="2361" refid="structgraph__theory_1_1GeneralSearch_1aba4f495d3fd8c83c5e28e27315e8d920" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1aba4f495d3fd8c83c5e28e27315e8d920" kindref="member">operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Run<sp/>the<sp/>searcher<sp/>on<sp/>all<sp/>vertices.<sp/>Useful<sp/>for<sp/>visiting<sp/>the</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>entire<sp/>graph,<sp/>and<sp/>not<sp/>just<sp/>one<sp/>connected<sp/>component.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[i])<sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Searcher<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this))(i);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370" refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch_1a2f3f6311a56c13381b5439266caaeb7e" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>child,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>par)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance[child]<sp/>=<sp/>distance[par]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent[child]<sp/>=<sp/>par;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2378"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Searcher&gt;<sp/>vector&lt;ll&gt;<sp/><ref refid="namespacegraph__theory_1a9d6eaad6577fb0289aee53b10fd4a260" kindref="member">get_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Searcher<sp/>&amp;search)<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>(search.parent.size(),<sp/>1);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(search.queue))<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search.parent[idx]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[search.parent[idx]]<sp/>+=<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[idx];</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2388"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph<sp/>=<sp/>GraphAdj&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref>&lt;DFS&lt;Graph&gt;,<sp/>Graph&gt;<sp/>{</highlight></codeline>
<codeline lineno="2389" refid="structgraph__theory_1_1DFS_1a71954b9b77a8dd543923250a39461b06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch_t</ref><sp/>=<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch&lt;DFS, Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GeneralSearch_t::operator(),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GeneralSearch_t::GeneralSearch;</highlight></codeline>
<codeline lineno="2391" refid="structgraph__theory_1_1DFS_1a7a852aab8ddbe3b598770dd45073ff83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1DFS_1a7a852aab8ddbe3b598770dd45073ff83" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;visited[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>this-&gt;graph[source])<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;visited[j])<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;add(j,<sp/>source);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)(j);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;queue.push_front(source);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/><ref refid="namespacegraph__theory_1a7ffa7c1e75caecd92d5c385d41eb313d" kindref="member">DFS</ref>(Graph)<sp/>-&gt;<sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS&lt;Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="2405"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph<sp/>=<sp/>GraphAdj&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>:<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch</ref>&lt;BFS&lt;Graph&gt;,<sp/>Graph&gt;<sp/>{</highlight></codeline>
<codeline lineno="2406" refid="structgraph__theory_1_1BFS_1ad85eddd9caeb226e88c6712cf3b86dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch_t</ref><sp/>=<sp/><ref refid="structgraph__theory_1_1GeneralSearch" kindref="compound">GeneralSearch&lt;BFS, Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GeneralSearch_t::operator(),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GeneralSearch_t::GeneralSearch;</highlight></codeline>
<codeline lineno="2408" refid="structgraph__theory_1_1BFS_1ad5324017ef8da193e0e6387715d5a597" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1BFS_1ad5324017ef8da193e0e6387715d5a597" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>old_size<sp/>=<sp/>this-&gt;queue.size();</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;queue.push_back(source);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;visited[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;distance[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>idx<sp/>=<sp/>old_size;<sp/>idx<sp/>&lt;<sp/>this-&gt;queue.size();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this-&gt;queue[idx];</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>this-&gt;graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;visited[j])<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;queue.push_back(j);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;visited[j]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;add(j,<sp/>i);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/><ref refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" kindref="member">BFS</ref>(Graph)<sp/>-&gt;<sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS&lt;Graph&gt;</ref>;</highlight></codeline>
<codeline lineno="2428"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>h(graph.size());</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[j].push_back(i);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2439"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" kindref="member">scc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(graph);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>comp(size(graph),<sp/>-1);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>assign<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;assign,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp[u]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp[u]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>v<sp/>:<sp/>h[u])<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(v,<sp/>c);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>dfs{graph};</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>dfs();</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>:<sp/>dfs.queue)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(i,<sp/>i);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1aa68bcc78bd4d2bbd33ce272bbb2d5f33" kindref="member">graph_in</ref>(<ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;g,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/>v;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>u<sp/>&gt;&gt;<sp/>v;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>--u,<sp/>--v);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_theory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory" kindref="compound">graph_theory</ref>;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/biconnected.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474" refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" refkind="member"><highlight class="normal">pair&lt;vector&lt;char&gt;,<sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;&gt;<sp/><ref refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" kindref="member">biconnected</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>d{graph};</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>this<sp/>should<sp/>be<sp/>fixed<sp/>in<sp/>DFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>articulations(graph.size());</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;<sp/>bridges;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>low(graph.size(),<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(root,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.visited[root])<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>croot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.distance[root]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d(root);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(d.queue))<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" kindref="member">min_eq</ref>(low[v],<sp/>d.distance[v]);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(d.queue))<sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>croot<sp/>+=<sp/>(d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>:<sp/>graph[v])<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v])<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" kindref="member">min_eq</ref>(low[v],<sp/>d.distance[d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]]);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" kindref="member">min_eq</ref>(low[v],<sp/>low[u]);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low[u]<sp/>&gt;=<sp/>d.distance[v]<sp/>&amp;&amp;<sp/>v<sp/>!=<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>articulations[v]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_bridge<sp/>=<sp/>all_of(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(graph[v]),</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u<sp/>==<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]<sp/>||</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low[u]<sp/>==<sp/>d.distance[v];</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low[v]<sp/>==<sp/>d.distance[d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]];</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(is_bridge)<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bridges.push_back({d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v],<sp/>v});</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(croot<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>articulations[root]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.queue.clear();</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{articulations,<sp/>bridges};</highlight></codeline>
<codeline lineno="2520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2523" refid="test__compiled_8cpp_1a6b3f22cd584c5d8be1de2703c3b9e004" refkind="member"><highlight class="normal">vector&lt;vector&lt;vector&lt;ll&gt;&gt;&gt;<sp/><ref refid="test__compiled_8cpp_1a6b3f22cd584c5d8be1de2703c3b9e004" kindref="member">ear_decomp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>d{graph};</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>visited(graph.size());</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;vector&lt;ll&gt;&gt;&gt;<sp/>ears_list;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(root,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.visited[root])<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d(root);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>ears;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>:<sp/>d.queue)<sp/>{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>graph[u])<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[u]<sp/>==<sp/>v<sp/>||<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[v]<sp/>==<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Backedge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>ear{u};</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited[u]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>v;;<sp/>x<sp/>=<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[x])<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ear.push_back(x);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[x])<sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited[x]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ears.push_back(ear);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ears_list.push_back(ears);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.queue.clear();</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ears_list;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2557" refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" refkind="member"><highlight class="normal">pair&lt;vector&lt;char&gt;,<sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;&gt;<sp/><ref refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" kindref="member">biconnected_ear</ref>(<ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph)<sp/>{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>art_points[i]<sp/>=<sp/>whether<sp/>vertex<sp/>i<sp/>is<sp/>an<sp/>articulation<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>art_points(graph.size());</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bridge<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;<sp/>bridges;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>ears<sp/>apart<sp/>from<sp/>the<sp/>first<sp/>one<sp/>which<sp/>are<sp/>cycles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ear_list<sp/>=<sp/><ref refid="test__compiled_8cpp_1a6b3f22cd584c5d8be1de2703c3b9e004" kindref="member">ear_decomp</ref>(graph);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ears<sp/>:<sp/>ear_list)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>ears.size())<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>ears[i].front()<sp/>==<sp/>ears[i].back())<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>art_points[ears[i].front()]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Graph<sp/>containing<sp/>all<sp/>ear<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>ear_graph(graph.size());</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ears<sp/>:<sp/>ear_list)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ear<sp/>:<sp/>ears)<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>ear.size()<sp/>-<sp/>1)<sp/>{<sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(ear_graph,<sp/>ear[i],<sp/>ear[i<sp/>+<sp/>1]);<sp/>}</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>add<sp/>print<sp/>overload<sp/>for<sp/>vector&lt;char&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>edges<sp/>which<sp/>are<sp/>not<sp/>in<sp/>ear<sp/>decomposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>ear_adj(graph.size());</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(u,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>non_ear_adj;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>ear_graph[u])<sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ear_adj[v]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>graph[u])<sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ear_adj[v])<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non_ear_adj.push_back(v);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>ear_adj<sp/>efficiently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>non_ear_adj)<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&lt;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;ll,<sp/>2&gt;<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>{u,<sp/>x};</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bridges.push_back(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph[v].size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>art_points[v]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{art_points,<sp/>bridges};</highlight></codeline>
<codeline lineno="2609"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/test_biconnected.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613" refid="test__compiled_8cpp_1a48fe6b184e236d8a81058e4d85ff49c3" refkind="member"><highlight class="normal"><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/><ref refid="test__compiled_8cpp_1a48fe6b184e236d8a81058e4d85ff49c3" kindref="member">permute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>&amp;<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>pgraph(graph.size());</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(u,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>graph[u])<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pgraph[<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[u]].push_back(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[v]);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pgraph;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2623" refid="test__compiled_8cpp_1acecf2de539ad624328fba6f40a848ef1" refkind="member"><highlight class="normal"><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/><ref refid="test__compiled_8cpp_1acecf2de539ad624328fba6f40a848ef1" kindref="member">graph_disunion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.resize(a.size()<sp/>+<sp/>b.size());</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(u,<sp/>b.size())<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>b[u])<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[a.size()<sp/>+<sp/>u].push_back(a.size()<sp/>+<sp/>v);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2633" refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" kindref="member">test_biconnected</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_triangle<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>offset)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>offset<sp/>+<sp/>0,<sp/>offset<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>offset<sp/>+<sp/>0,<sp/>offset<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>offset<sp/>+<sp/>1,<sp/>offset<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bicon,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exp)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[exp_art_vec,<sp/>exp_bridge]<sp/>=<sp/>exp;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>bicon.first.size();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>exp_art(n);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>exp.first)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_art[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_graph<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(n);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[u,<sp/>v]<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>u,<sp/>v);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>graph;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bicon.first<sp/>==<sp/>exp_art<sp/>&amp;&amp;<sp/>edge_graph(bicon.second)<sp/>==<sp/>edge_graph(exp_bridge);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_all_perms<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>graph.size();</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(n);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iota(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/>0LL);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test(graph,<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(next_permutation(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)));</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_random_perms<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>num<sp/>=<sp/>1e4)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>graph.size();</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(n);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iota(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/>0LL);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffle(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/><ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test(graph,<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Exp<sp/>=<sp/>pair&lt;vector&lt;ll&gt;,<sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_test<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;exp_func)<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check_func<sp/>=<sp/>[&amp;,<sp/>permuted<sp/>=</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a48fe6b184e236d8a81058e4d85ff49c3" kindref="member">permute</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>,<sp/>graph)](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(check(func(permuted),<sp/>exp_func(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)));</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_func(<ref refid="test__compiled_8cpp_1a72476443ae31ddf840e52f4a47f79055" kindref="member">biconnected</ref>);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_func(<ref refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" kindref="member">biconnected_ear</ref>);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph_t1(6);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/>make_triangle(graph_t1,<sp/>0);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>make_triangle(graph_t1,<sp/>3);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>test_all_perms(graph_t1,<sp/>make_test([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[2],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[3]},<sp/>{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[2],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[3]}}};</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph_t2(8);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>make_triangle(graph_t2,<sp/>0);</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complete<sp/>graph<sp/>minus<sp/>3<sp/>to<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t2,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t2,<sp/>2,<sp/>4);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t2,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t2,<sp/>3,<sp/>5);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph_t2,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>make_triangle(graph_t2,<sp/>5);</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>test_all_perms(graph_t2,<sp/>make_test([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[2],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[5]},<sp/>{}};</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph2(2);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph2,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/>test_all_perms(graph2,<sp/>make_test([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp{{},<sp/>{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[0],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[1]}}};</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph1(1);</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>test_all_perms(graph1,<sp/>make_test([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp{{},<sp/>{}};<sp/>}));</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>graph,<sp/>union<sp/>of<sp/>1<sp/>and<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>graph_dis<sp/>=<sp/><ref refid="test__compiled_8cpp_1acecf2de539ad624328fba6f40a848ef1" kindref="member">graph_disunion</ref>(graph_t1,<sp/>graph_t2);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>test_random_perms(graph_dis,<sp/>make_test([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[2],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[3],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[graph_t1.size()<sp/>+<sp/>2],</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[graph_t1.size()<sp/>+<sp/>5]},</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[2],<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[3]}}};</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="2722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>143<sp/>&quot;./tools/../src/graph/biconnected.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>202<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/bipartite.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1bipartite" kindref="compound">graph_theory::bipartite</ref><sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1bipartite_1a49f9badd40714410a5ee8e010e73010a" kindref="member">color2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>b{graph};</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>b();</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>size(graph);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>s(n);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>b.queue)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>par<sp/>=<sp/>b.parent[i];<sp/>par<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>!s[par];</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bi<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bi<sp/>&amp;=<sp/>s[i]<sp/>!=<sp/>s[j];</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bi<sp/>?<sp/>optional{s}<sp/>:<sp/>nullopt;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2750"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>side<sp/>=<sp/><ref refid="namespacegraph__theory_1_1bipartite_1a49f9badd40714410a5ee8e010e73010a" kindref="member">color2</ref>(graph).value();</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>graph.size();</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>match(n,<sp/>-1);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>a<sp/>directed<sp/>graph<sp/>to<sp/>find<sp/>aug_pathmenting<sp/>paths*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>refactor<sp/>this<sp/>to<sp/>use<sp/>lazy<sp/>graphs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>aug_path(n<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dummy_a<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dummy_b<sp/>=<sp/>n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>==<sp/>match[i])<sp/>==<sp/>side[i])<sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[i].push_back(j);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match[i]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side[i])<sp/>{</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[i].push_back(dummy_b);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[dummy_a].push_back(i);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>b{aug_path};</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b(dummy_a);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.distance[dummy_b]<sp/>==<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>vis(aug_path.size());</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;path,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vis[i])<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vis[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>dummy_b)<sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>aug_path[i])<sp/>{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.distance[j]<sp/>==<sp/>b.distance[i]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path(j))<sp/>{</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[i]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[j]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path(dummy_a);</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>&amp;matching)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_if(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(matching),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>!=<sp/>-1;<sp/>});</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_theory::bipartite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1bipartite" kindref="compound">graph_theory::bipartite</ref>;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>203<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/flow.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow" kindref="compound">flow</ref><sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structflow_1_1FlowEdge" kindref="compound">FlowEdge</ref><sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>capacity{};</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>{};</highlight></codeline>
<codeline lineno="2829" refid="structflow_1_1FlowEdge_1a9c729a2a6fab2fcb4c6f827cedbe95fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structflow_1_1FlowEdge_1a9c729a2a6fab2fcb4c6f827cedbe95fd" kindref="member">residual</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity<sp/>-<sp/><ref refid="namespaceflow" kindref="compound">flow</ref>;<sp/>};</highlight></codeline>
<codeline lineno="2830"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow_1a019c8d89498d267345fd2f560909fa7a" kindref="member">edmond_karp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>&amp;capacity)<sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>capacity.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;FlowEdge&gt;</ref><sp/>network(n,<sp/>n);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{<sp/>network[i][j].capacity<sp/>=<sp/>capacity[i][j];<sp/>}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>residual<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(n);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(network[i][j].residual()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[i].push_back(j);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>augmenting<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>bfs{graph};</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfs(0);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mincap<sp/>=<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>root_edges<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>n<sp/>-<sp/>1;<sp/>bfs.parent[x]<sp/>!=<sp/>-1;<sp/>x<sp/>=<sp/>bfs.parent[x])<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(bfs.parent[x],<sp/>x);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_edges(</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{<sp/><ref refid="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" kindref="member">min_eq</ref>(mincap,<sp/>network[u][v].residual());<sp/>});</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(0<sp/>&lt;<sp/>mincap<sp/>&amp;&amp;<sp/>mincap<sp/>&lt;<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_edges([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network[u][v].flow<sp/>+=<sp/>mincap;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network[v][u].flow<sp/>-=<sp/>mincap;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{<sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[i][j]<sp/>=<sp/>network[i][j].flow;<sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow_1ab162ee0224ccca8ae082128f2825d92c" kindref="member">dinic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>&amp;capacity)<sp/>{</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>capacity.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(n);<sp/></highlight><highlight class="comment">//<sp/>stores<sp/>edge<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;pair&lt;ll,<sp/>FlowEdge&gt;&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity[i][j])<sp/>{</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[i].push_back(edges.size());</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.push_back({j,<sp/><ref refid="structflow_1_1FlowEdge" kindref="compound">FlowEdge</ref>{capacity[i][j]}});</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[j].push_back(edges.size());</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.push_back({i,<sp/>{}});</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>residual<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>res_graph(n);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[j,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>]<sp/>=<sp/>edges[edge_id];</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>.residual()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_graph[i].push_back(j);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>bfs{res_graph};</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bfs(0);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bfs.distance[n<sp/>-<sp/>1]<sp/>==<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>level_graph(n);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[j,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>]<sp/>=<sp/>edges[edge_id];</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>.residual()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bfs.distance[i]<sp/>+<sp/>1<sp/>==<sp/>bfs.distance[j])<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_graph[i].push_back(edge_id);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>next_idx(n);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dfs<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;dfs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>n<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_idx[u]<sp/>==<sp/>level_graph[u].size())<sp/>{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[v,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>]<sp/>=<sp/>edges[level_graph[u][next_idx[u]]];</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>.residual()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>dfs(dfs,<sp/>v))<sp/>{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++next_idx[u];</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dfs(dfs,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mn<sp/>=<sp/><ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>!=<sp/>n<sp/>-<sp/>1;<sp/>x<sp/>=<sp/>edges[level_graph[x][next_idx[x]]].first)<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(x);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flow_edge<sp/>=<sp/>edges[level_graph[x][next_idx[x]]].second;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/>min(mn,<sp/>flow_edge.residual());</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>=<sp/>level_graph[x][next_idx[x]];</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flow_edge<sp/>=<sp/>edges[edge_id].second;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;flow_edge_rev<sp/>=<sp/>edges[edge_id<sp/>^<sp/>1].second;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow_edge.flow<sp/>+=<sp/>mn;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flow_edge_rev.flow<sp/>-=<sp/>mn;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[j,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>]<sp/>=<sp/>edges[edge_id];</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>.capacity<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[i][j]<sp/>=<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>.flow;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>&amp;<ref refid="namespaceflow" kindref="compound">flow</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulate(<ref refid="namespaceflow" kindref="compound">flow</ref>[0],<sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0]<sp/>+<sp/><ref refid="namespaceflow" kindref="compound">flow</ref>.cols_n,<sp/>0LL);<sp/>}</highlight></codeline>
<codeline lineno="2977"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>flow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow" kindref="compound">flow</ref>;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>204<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/graph_view.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pred&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph<sp/>&amp;graph;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pred<sp/>&amp;pred;</highlight></codeline>
<codeline lineno="2989" refid="structSubgraph_1a0d61932ee9d61d8765fb5694edbcbbbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1a0d61932ee9d61d8765fb5694edbcbbbd" kindref="member">Subgraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph<sp/>&amp;graph_arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pred<sp/>&amp;pred_arg)</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>graph{graph_arg},<sp/>pred{pred_arg}<sp/>{}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">iterator<sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;ll&gt;<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>&amp;subgraph;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>&amp;adj_list;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="2996" refid="structSubgraph_1_1iterator_1a25fb1ad469d1925f007e97bf93fa6eaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a25fb1ad469d1925f007e97bf93fa6eaf" kindref="member">iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>&amp;subgraph_arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i_arg)</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>subgraph{subgraph_arg},<sp/>i{i_arg},<sp/>adj_list{subgraph.<ref refid="structSubgraph_1a729cb39ca9e3ec383acd385bc5dd334f" kindref="member">graph</ref>[i]},</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it{adj_list.begin()}<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance();</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001" refid="structSubgraph_1_1iterator_1aad7c6ef62b911de3d4074e08da866362" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1aad7c6ef62b911de3d4074e08da866362" kindref="member">advance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>adj_list.end()<sp/>&amp;&amp;<sp/>!subgraph.<ref refid="structSubgraph_1af968f823bf4408c13440e2ccee5e9489" kindref="member">pred</ref>(i,<sp/>*it);<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005" refid="structSubgraph_1_1iterator_1ad228b426b788aff7396333cb2689a2a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structSubgraph_1_1iterator_1ad228b426b788aff7396333cb2689a2a1" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;<sp/>}</highlight></codeline>
<codeline lineno="3006" refid="structSubgraph_1_1iterator_1a590bacc33ad746829d0b176e0b2fed5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a590bacc33ad746829d0b176e0b2fed5b" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance();</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3010" refid="structSubgraph_1_1iterator_1a0c63e38a83bcd42b04c0d9b55bdc4d62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a0c63e38a83bcd42b04c0d9b55bdc4d62" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/>oth.it;<sp/>}</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>should<sp/>be<sp/>genericized<sp/>for<sp/>all<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012" refid="structSubgraph_1_1iterator_1a3b5d3735f55fb1e655bfc16e65d9f847" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a3b5d3735f55fb1e655bfc16e65d9f847" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>oth);<sp/>}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3014" refid="structSubgraph_1aa20007f84b399d375e9780dadfd40a10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrange" kindref="compound">range&lt;iterator&gt;</ref><sp/><ref refid="structSubgraph_1aa20007f84b399d375e9780dadfd40a10" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>st_it{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i};</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>ed_it{*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i};</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ed_it.it<sp/>=<sp/>ed_it.adj_list.end();</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range&lt;iterator&gt;</ref>{st_it,<sp/>ed_it};</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3020" refid="structSubgraph_1ad83982532b85bb5379aa71b98c8d246f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structSubgraph_1ad83982532b85bb5379aa71b98c8d246f" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>graph.size();<sp/>}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3022" refid="test__compiled_8cpp_1ac5d2f097a07285733e610a52b16e790b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ac5d2f097a07285733e610a52b16e790b" kindref="member">test_graph_view</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(5);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>i<sp/>+<sp/>1,<sp/>g.size())<sp/>{<sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>i,<sp/>j);<sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>j)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>2<sp/>==<sp/>j<sp/>%<sp/>2;<sp/>};</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>subgraph{g,<sp/>pred};</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>subgraph[i])<sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pred(i,<sp/>j));</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>bfs{subgraph};</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>bfs(0);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{<sp/>assert(bfs.visited[i]<sp/>==<sp/>(i<sp/>%<sp/>2<sp/>==<sp/>0));<sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>205<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/test_flow.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow_1_1test" kindref="compound">flow::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;algo)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(3,<sp/>3);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(4,<sp/>4);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][2]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][3]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(4,<sp/>4);</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][3]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][1]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow_1_1test_1a32a94ae42f633485db361cf67447df2f" kindref="member">random_flow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>2<sp/>+<sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>30);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i2,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j2,<sp/>i2<sp/>+<sp/>1,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>=<sp/>i2,<sp/>j<sp/>=<sp/>j2;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(i,<sp/>j);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[i][j]<sp/>=<sp/>1<sp/>+<sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>30);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func2&gt;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1ae4d5bb4d481a3e83a36a3797ff8f782c" kindref="member">test_compare_flow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func1<sp/>&amp;algo1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func2<sp/>&amp;algo2,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n_it<sp/>=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n_it)<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref><sp/>=<sp/><ref refid="namespaceflow_1_1test_1a32a94ae42f633485db361cf67447df2f" kindref="member">random_flow</ref>();</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>generated<sp/>flow<sp/>diff?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo1(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/><ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo2(<ref refid="namespaceflow" kindref="compound">flow</ref>)));</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1ae0cbf7db821b857cafff43a95f252818" kindref="member">test_flow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(<ref refid="namespaceflow_1a019c8d89498d267345fd2f560909fa7a" kindref="member">edmond_karp</ref>);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(<ref refid="namespaceflow_1ab162ee0224ccca8ae082128f2825d92c" kindref="member">dinic</ref>);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1ae4d5bb4d481a3e83a36a3797ff8f782c" kindref="member">test_compare_flow</ref>(<ref refid="namespaceflow_1a019c8d89498d267345fd2f560909fa7a" kindref="member">edmond_karp</ref>,<sp/><ref refid="namespaceflow_1ab162ee0224ccca8ae082128f2825d92c" kindref="member">dinic</ref>);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>flow::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow_1_1test" kindref="compound">flow::test</ref>;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>206<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/tree.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3105" refid="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" refkind="member"><highlight class="normal">pair&lt;array&lt;ll,<sp/>2&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>&gt;<sp/><ref refid="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;g)<sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>b{g};</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>b();</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>b.queue.back();</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>b2{g};</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>b2(u);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>b2.queue.back();</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>b2.distance[v]<sp/>/<sp/>2)<sp/>{<sp/>c<sp/>=<sp/>b2.parent[c];<sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{u,<sp/>v},<sp/>c};</highlight></codeline>
<codeline lineno="3115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3116" refid="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" kindref="member">test_tree_diameter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(5);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>0,<sp/>4);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(graph);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(ret.first));</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((ret.first<sp/>==<sp/>array&lt;ll,<sp/>2&gt;{1,<sp/>4}));</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret.second<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(5);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="test__compiled_8cpp_1a202200d4d06aea05b7638be837590286" kindref="member">tree_diameter</ref>(graph).first;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(ret));</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>207<sp/>&quot;./tools/../src/graph/all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>4<sp/>&quot;./tools/../src/graph/2sat.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesat2" kindref="compound">sat2</ref><sp/>{</highlight></codeline>
<codeline lineno="3142"><highlight class="normal">optional&lt;vector&lt;char&gt;&gt;<sp/><ref refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" kindref="member">sat2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;array&lt;ll,<sp/>2&gt;&gt;<sp/>&amp;cnf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(2<sp/>*<sp/>n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;clause<sp/>:<sp/>cnf)<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>two<sp/>implications<sp/>that<sp/>represent<sp/>the<sp/>clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[n<sp/>-<sp/>clause[0]].push_back(n<sp/>+<sp/>clause[1]);</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph[n<sp/>-<sp/>clause[1]].push_back(n<sp/>+<sp/>clause[0]);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>topo{graph};</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>topo();</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>idx(size(graph));</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>size(topo.queue))<sp/>{<sp/>idx[topo.queue[i]]<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>vals(n<sp/>+<sp/>1,<sp/>-1);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comp<sp/>=<sp/><ref refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" kindref="member">scc</ref>(graph);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>n<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>idx[comp[n<sp/>+<sp/>i]],<sp/>nx<sp/>=<sp/>idx[comp[n<sp/>-<sp/>i]];</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nx<sp/>==<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullopt;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/>nx<sp/>&lt;<sp/>x;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sat2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesat2" kindref="compound">sat2</ref>;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/graph/test_2sat.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesat2_1_1test" kindref="compound">sat2::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesat2_1_1test_1a39c93d63732b7216ede171b3589de7f2" kindref="member">test_sat2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret1<sp/>=<sp/><ref refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" kindref="member">sat2</ref>({{2,<sp/>1},<sp/>{-2,<sp/>3}},<sp/>3).value();</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret1[1]<sp/>||<sp/>ret1[2]);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret1[2]<sp/>||<sp/>ret1[3]);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret2<sp/>=<sp/><ref refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" kindref="member">sat2</ref>({{2,<sp/>1},<sp/>{3,<sp/>2},<sp/>{-2,<sp/>-1}},<sp/>3).value();</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret2[1]<sp/>||<sp/>ret2[2]);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret2[2]<sp/>||<sp/>ret2[3]);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret2[2]<sp/>||<sp/>!ret2[1]);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret3<sp/>=<sp/><ref refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" kindref="member">sat2</ref>({{1,<sp/>1},<sp/>{-1,<sp/>-1}},<sp/>1);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret3);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret4<sp/>=<sp/><ref refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" kindref="member">sat2</ref>({{1,<sp/>2},<sp/>{3,<sp/>2},<sp/>{-1,<sp/>-1},<sp/>{-2,<sp/>-2}},<sp/>3);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!ret4);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sat2::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesat2_1_1test" kindref="compound">sat2::test</ref>;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>17<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/test_all.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/test_bipartite.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1bipartite_1_1test" kindref="compound">graph_theory::bipartite::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1a7e5ad591c1ee6db41745438d98b39825" kindref="member">test_color2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(6);</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(2,1,4)<sp/>is<sp/>one<sp/>side,<sp/>and<sp/>(5,3,0)<sp/>is<sp/>another<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connected<sp/>component<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connected<sp/>component<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>0);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/><ref refid="namespacegraph__theory_1_1bipartite_1a49f9badd40714410a5ee8e010e73010a" kindref="member">color2</ref>(g).value();</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>g[i])<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(col[i]<sp/>^<sp/>col[j]);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1af862fd7b59fb6a9e0a396a5bd8801c3e" kindref="member">test_max_match</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(3);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2<sp/>on<sp/>one<sp/>side,<sp/>1<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>1));</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(4);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2<sp/>on<sp/>one<sp/>side,<sp/>1,<sp/>3<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(6);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2,<sp/>4<sp/>on<sp/>one<sp/>side,<sp/>1,<sp/>3,<sp/>5<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matching<sp/>=<sp/><ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(6);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2,<sp/>4<sp/>on<sp/>one<sp/>side,<sp/>1,<sp/>3,<sp/>5<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(6);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2,<sp/>4<sp/>on<sp/>one<sp/>side,<sp/>1,<sp/>3,<sp/>5<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(10);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>2,<sp/>4<sp/>on<sp/>one<sp/>side,<sp/>1,<sp/>3,<sp/>5<sp/>on<sp/>the<sp/>other<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>g.size()<sp/>/<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>i<sp/>-<sp/>1<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2<sp/>*<sp/>i,<sp/>2<sp/>*<sp/>i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2<sp/>*<sp/>i,<sp/>2<sp/>*<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1_1bipartite_1ae739c99222c6a26403aa49b60cefe831" kindref="member">matching_size</ref>(<ref refid="namespacegraph__theory_1_1bipartite_1a4fb82505ab0cb90e7ddf16db6a87e366" kindref="member">max_match</ref>(g))<sp/>==<sp/>2<sp/>*<sp/>g.size()<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1aab2e93dd92c799618ead37ec7b1d93b9" kindref="member">test_bipartite</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1a7e5ad591c1ee6db41745438d98b39825" kindref="member">test_color2</ref>();</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1af862fd7b59fb6a9e0a396a5bd8801c3e" kindref="member">test_max_match</ref>();</highlight></codeline>
<codeline lineno="3279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_theory::bipartite::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1bipartite_1_1test" kindref="compound">graph_theory::bipartite::test</ref>;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>5<sp/>&quot;./tools/../src/graph/test_all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/test_centroid.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/centroid.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292" refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;<sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/><ref refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" kindref="member">centroid_decomp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph<sp/>&amp;<ref refid="namespacetree" kindref="compound">tree</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>cent_lvl(<ref refid="namespacetree" kindref="compound">tree</ref>.size());</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>vis_cent(<ref refid="namespacetree" kindref="compound">tree</ref>.size());</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rec_decomp<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;rec_decomp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>lvl)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decompose<sp/>the<sp/>subtree<sp/>beginning<sp/>on<sp/>u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!vis_cent[u]<sp/>&amp;&amp;<sp/>!vis_cent[v];</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>sub{<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>pred};</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS</ref><sp/>dfs{sub};</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfs(u);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref><sp/>=<sp/><ref refid="namespacegraph__theory_1a9d6eaad6577fb0289aee53b10fd4a260" kindref="member">get_size</ref>(dfs);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>max_child_sz(<ref refid="namespacetree" kindref="compound">tree</ref>.size(),<sp/>-<ref refid="test__compiled_8cpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(dfs.queue))<sp/>{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dfs.parent[x]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1a80f7a687b4e8d135cde1ae1d6b169d13" kindref="member">max_eq</ref>(max_child_sz[dfs.parent[x]],<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[x]);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1a80f7a687b4e8d135cde1ae1d6b169d13" kindref="member">max_eq</ref>(max_child_sz[x],<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[u]<sp/>-<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[x]);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_centroid<sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(dfs.queue))<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>max_child_sz[x]<sp/>&lt;=<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[u])<sp/>{</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;There<sp/>should<sp/>be<sp/>a<sp/>centroid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>centroid<sp/>=<sp/>find_centroid();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vis_cent[centroid]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>dfs.queue)<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cent_lvl[x].push_back(centroid);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/><ref refid="namespacetree" kindref="compound">tree</ref>[centroid])<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vis_cent[v])<sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec_decomp(v,<sp/>lvl<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>rec_decomp(0,<sp/>0);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(all_of(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(vis_cent),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}));</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cent_lvl;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/graph/tree/test_centroid.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337" refid="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" kindref="member">test_centroid_decomp</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(7);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>graph.size()<sp/>-<sp/>1)<sp/>{<sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>i,<sp/>i<sp/>+<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" kindref="member">centroid_decomp</ref>(graph)<sp/>==</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>1,<sp/>0},<sp/>{3,<sp/>1},<sp/>{3,<sp/>1,<sp/>2},<sp/>{3},<sp/>{3,<sp/>5,<sp/>4},<sp/>{3,<sp/>5},<sp/>{3,<sp/>5,<sp/>6}}));</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(1);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a3831178b7f165ffd952602f1ec4ba6a4" kindref="member">centroid_decomp</ref>(graph)<sp/>==<sp/>vector&lt;vector&lt;ll&gt;&gt;{{0}}));</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>7<sp/>&quot;./tools/../src/graph/test_all.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1test" kindref="compound">graph_theory::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1a89fa4a3244eff73fe109343d7e132c43" kindref="member">test_BFS</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(4);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1BFS" kindref="compound">BFS</ref><sp/>b{g};</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>b(0);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((b.parent<sp/>==<sp/>vector&lt;ll&gt;{-1,<sp/>0,<sp/>1,<sp/>1}));</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((b.distance<sp/>==<sp/>vector&lt;ll&gt;{0,<sp/>1,<sp/>2,<sp/>2}));</highlight></codeline>
<codeline lineno="3362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1a39d1cd9f78ffe067260878347c9e178d" kindref="member">test_trans</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(<ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref>{{2,<sp/>3},<sp/>{2,<sp/>1},<sp/>{2},<sp/>{2,<sp/>3,<sp/>1}})<sp/>==</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref>{{},<sp/>{1,<sp/>3},<sp/>{0,<sp/>1,<sp/>2,<sp/>3},<sp/>{0,<sp/>3}}));</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" kindref="member">trans</ref>(<ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref>{})<sp/>==<sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref>{}));</highlight></codeline>
<codeline lineno="3367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1a85895e3668b3921ec39edbbe8ab3cb37" kindref="member">test_shortest_dist</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>g{{7,<sp/>2,<sp/>5},<sp/>{2,<sp/>4,<sp/>1},<sp/>{3,<sp/>2,<sp/>5}};</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>short_dist{{4,<sp/>2,<sp/>3},<sp/>{2,<sp/>3,<sp/>1},<sp/>{3,<sp/>2,<sp/>3}};</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(g)<sp/>==<sp/>short_dist);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>g.rows_n;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;pr&gt;&gt;<sp/>adj(n);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>0,<sp/>n)<sp/>{<sp/>adj[i].push_back({j,<sp/>g[i][j]});<sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(s,<sp/>0,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>test<sp/>pv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dijkstra<sp/>=<sp/><ref refid="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" kindref="member">shortest_dist</ref>(adj,<sp/>s)[0];</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>floyd<sp/>=<sp/>vector&lt;ll&gt;(short_dist[s],<sp/>short_dist[s]<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floyd[s]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((dijkstra<sp/>==<sp/>floyd));</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1ab6022fd4e376f6aa5e2fe088ff623d57" kindref="member">test_mst</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;edge&gt;<sp/>edges{{5,<sp/>0,<sp/>3},<sp/>{2,<sp/>1,<sp/>2},<sp/>{3,<sp/>1,<sp/>3},<sp/>{1,<sp/>3,<sp/>2}};</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="namespacegraph__theory_1a43f33335bd84b91252969b3b17f8b09d" kindref="member">mst</ref>(edges,<sp/>6);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(ret));</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ret<sp/>==<sp/>vector&lt;edge&gt;{edges[3],<sp/>edges[1],<sp/>edges[0]}));</highlight></codeline>
<codeline lineno="3390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1a12ae68923e728fc307296eb6e6a56466" kindref="member">test_scc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(5);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0].push_back(3);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>g[3].push_back(1);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>g[1].push_back(2);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/>g[2].push_back(0);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0].push_back(4);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>g[2].push_back(4);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cm<sp/>=<sp/><ref refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" kindref="member">scc</ref>(g);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v{cm[0],<sp/>cm[1],<sp/>cm[2],<sp/>cm[3]};</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>refactor<sp/>this<sp/>into<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((all_of(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>v[0];<sp/>})));</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cm[4]<sp/>!=<sp/>cm[0]);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1afca7670537e2da47c79f8e3602e96c2c" kindref="member">test_add_edge</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>g(10);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>6,<sp/>4);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>9,<sp/>2);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Order<sp/>doesn&apos;t<sp/>matter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(x));</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((g<sp/>==<sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref>{{},<sp/>{},<sp/>{9},<sp/>{4},<sp/>{3,<sp/>6},<sp/>{},<sp/>{4},<sp/>{},<sp/>{},<sp/>{2}}));</highlight></codeline>
<codeline lineno="3415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1_1test_1a147e0cf4f86928e4e422c6b9198a2371" kindref="member">test_graph_theory</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1afca7670537e2da47c79f8e3602e96c2c" kindref="member">test_add_edge</ref>();</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1a39d1cd9f78ffe067260878347c9e178d" kindref="member">test_trans</ref>();</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1a85895e3668b3921ec39edbbe8ab3cb37" kindref="member">test_shortest_dist</ref>();</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1ab6022fd4e376f6aa5e2fe088ff623d57" kindref="member">test_mst</ref>();</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1a89fa4a3244eff73fe109343d7e132c43" kindref="member">test_BFS</ref>();</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1a12ae68923e728fc307296eb6e6a56466" kindref="member">test_scc</ref>();</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" kindref="member">test_tree_diameter</ref>();</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" kindref="member">test_biconnected</ref>();</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1ae0cbf7db821b857cafff43a95f252818" kindref="member">test_flow</ref>();</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1bipartite_1_1test_1aab2e93dd92c799618ead37ec7b1d93b9" kindref="member">test_bipartite</ref>();</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesat2_1_1test_1a39c93d63732b7216ede171b3589de7f2" kindref="member">test_sat2</ref>();</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ac5d2f097a07285733e610a52b16e790b" kindref="member">test_graph_view</ref>();</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" kindref="member">test_centroid_decomp</ref>();</highlight></codeline>
<codeline lineno="3430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_theory::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__theory_1_1test" kindref="compound">graph_theory::test</ref>;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>18<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/test_hld.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/hld.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehld" kindref="compound">hld</ref><sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Mono</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>QueryDS&gt;</highlight></codeline>
<codeline lineno="3454"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhld_1_1HLD" kindref="compound">HLD</ref><sp/>{</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3456" refid="classhld_1_1HLD_1a8d5d8abcf2da6437d67365cf2f70ef66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhld_1_1HLD_1a8d5d8abcf2da6437d67365cf2f70ef66" kindref="member">HLD</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;data)</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>heavy(graph.size(),<sp/>-1),<sp/>head(graph.size(),<sp/>-1),<sp/>pos(graph.size(),<sp/>-1),<sp/>d{graph}<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.distance[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d(0);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref><sp/>=<sp/><ref refid="namespacegraph__theory_1a9d6eaad6577fb0289aee53b10fd4a260" kindref="member">get_size</ref>(d);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>heavy<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/><ref refid="test__compiled_8cpp_1a438bd5fc0a79e42a6a2abb632203f925" kindref="member">rev</ref>(d.queue))<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[idx]<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>2<sp/>*<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[idx]]<sp/>&gt;=<sp/><ref refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" kindref="member">sz</ref>[d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[idx]])<sp/>{</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heavy[d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[idx]]<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Walk<sp/>down<sp/>each<sp/>heavy<sp/>path<sp/>and<sp/>set<sp/>head<sp/>and<sp/>pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>glob_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/>d.queue)<sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head[idx]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head[x]<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[x]<sp/>=<sp/>glob_pos;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++glob_pos;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>heavy[x];</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(glob_pos<sp/>==<sp/>graph.size());</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>perm_data(graph.size());<sp/></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(idx,<sp/>graph.size())<sp/>{<sp/>perm_data[pos[idx]]<sp/>=<sp/>data[idx];<sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>QueryDS{perm_data};</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3488" refid="classhld_1_1HLD_1ace75fa88e8df29573405e9241c56baf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhld_1_1HLD_1ace75fa88e8df29573405e9241c56baf0" kindref="member">func_path</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>assuming<sp/>the<sp/>operation<sp/>is<sp/>commutative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>find<sp/>the<sp/>LCA<sp/>and<sp/>use<sp/>that<sp/>to<sp/>do<sp/>it<sp/>for<sp/>non-commutative<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>swap<sp/>u<sp/>and<sp/>v<sp/>if<sp/>there&apos;s<sp/>a<sp/>tie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1aa72cfb348ae79fd2bdb5ded63cd36ef2" kindref="member">swap2</ref>(u,<sp/>v,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d.distance[head[x]];<sp/>});</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head[u]<sp/>==<sp/>head[v])<sp/>{</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(pos[head[v]],<sp/>pos[v]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>d.<ref refid="structdsu__ds_1_1dsu_1a3d0a7cd63b9c90f5a19a03f7f2abb6d8" kindref="member">parent</ref>[head[v]];</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deal<sp/>with<sp/>the<sp/>last<sp/>heavy<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(pos[v],<sp/>pos[u]<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3510" refid="classhld_1_1HLD_1a89ad91fa5429a48db553da8d44849415" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classhld_1_1HLD_1a89ad91fa5429a48db553da8d44849415" kindref="member">query</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ret{<ref refid="test__compiled_8cpp_1a09af32a8d21cf0ca5017ce40502a2a09" kindref="member">identity</ref>(Monoid{},<sp/>T{})};</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_path(u,<sp/>v,<sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{<sp/>ret<sp/>=<sp/>Monoid{}(ret,<sp/>ds.query(u,<sp/>v));<sp/>});</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3516" refid="classhld_1_1HLD_1a5010452fe04b89ecba385cec7a0c183f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhld_1_1HLD_1a5010452fe04b89ecba385cec7a0c183f" kindref="member">update</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_path(u,<sp/>v,<sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{<sp/>ds.update(u,<sp/>v,<sp/>val);<sp/>});</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>heavy;<sp/></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>head;<sp/><sp/></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>pos;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1DFS" kindref="compound">DFS&lt;&gt;</ref><sp/>d;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DFS<sp/>of<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>why<sp/>doesn&apos;t<sp/>vector&lt;T&gt;{1}<sp/>work?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryDS<sp/>ds{vector&lt;T&gt;{-100,<sp/>-100}};<sp/></highlight><highlight class="comment">//<sp/>DS<sp/>used<sp/>for<sp/>querying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3528"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hld</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/graph/tree/test_hld.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehld_1_1test" kindref="compound">hld::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehld_1_1test_1a2c2ea10aedda3e4e51f08d38ea3fa3f0" kindref="member">test_hld</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/><ref refid="namespacetree" kindref="compound">tree</ref>(6);</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>1,<sp/>5);</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>0,<sp/>2);</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>2,<sp/>4);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>data{5,<sp/>3,<sp/>6,<sp/>1,<sp/>2,<sp/>7};</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhld_1_1HLD" kindref="compound">HLD&lt;ll, plus&lt;&gt;</ref>,<sp/><ref refid="classsparse__table_1_1DisjointSparseTable" kindref="compound">DisjointSparseTable&lt;ll, plus&lt;&gt;</ref>&gt;&gt;<sp/><ref refid="namespacehld" kindref="compound">hld</ref>{<ref refid="namespacetree" kindref="compound">tree</ref>,<sp/>data};</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>-&gt;<sp/>1<sp/>-&gt;<sp/>0<sp/>-&gt;<sp/>2<sp/>-&gt;<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum_of_idxs<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>&amp;idxs)<sp/>{</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>:<sp/>idxs)<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>data[u];</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(5,<sp/>4)<sp/>==<sp/>sum_of_idxs({5,<sp/>1,<sp/>0,<sp/>2,<sp/>4})));</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(1,<sp/>0)<sp/>==<sp/>sum_of_idxs({1,<sp/>0})));</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(0,<sp/>1)<sp/>==<sp/>sum_of_idxs({0,<sp/>1})));</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(2,<sp/>1)<sp/>==<sp/>sum_of_idxs({2,<sp/>0,<sp/>1})));</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(4,<sp/>3)<sp/>==<sp/>sum_of_idxs({4,<sp/>2,<sp/>3})));</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespacehld" kindref="compound">hld</ref>.query(4,<sp/>4)<sp/>==<sp/>sum_of_idxs({4})));</highlight></codeline>
<codeline lineno="3554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3555"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hld::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehld_1_1test" kindref="compound">hld::test</ref>;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>21<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/test_link_cut.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/graph/tree/link_cut.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelink__cut" kindref="compound">link_cut</ref><sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>=<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">SplayNode&lt;ll, true&gt;</ref>;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="namespacelink__cut_1adfba82a1de72ee424f998c467fec0333" kindref="member">make_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref>{};</highlight></codeline>
<codeline lineno="3568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelink__cut_1aa421dd91c5a7dc689972109e651b8c9a" kindref="member">detach_child</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]-&gt;path_parent<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]-&gt;parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>();</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1aa421dd91c5a7dc689972109e651b8c9a" kindref="member">detach_child</ref>(node);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[1]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*par<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node-&gt;path_parent)<sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par<sp/>=<sp/>node-&gt;path_parent;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>();</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1aa421dd91c5a7dc689972109e651b8c9a" kindref="member">detach_child</ref>(par);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a510653918c7b8181c888bbb608a9e6ee" kindref="member">attach</ref>(1,<sp/>node);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;path_parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a34a54d6c33025f4be7b37065e584b8c5" kindref="member">splay</ref>();</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>par;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(node);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[0];<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[0])</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(node);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelink__cut_1ab6b1e676cdcb014dd718dcef1bc009de" kindref="member">cut</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*node)<sp/>{</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(node);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[0]-&gt;parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a6aa336f7fa7dcd6d509cdb8bbf9967ee" kindref="member">child</ref>[0]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*par,<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*child)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(child);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(par);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;<ref refid="structsplay__tree_1_1SplayNode_1a510653918c7b8181c888bbb608a9e6ee" kindref="member">attach</ref>(0,<sp/>par);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(<ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*u,<sp/><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref><sp/>*v)<sp/>{</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(u)<sp/>!=<sp/><ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(v))<sp/>{</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(u);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelink__cut_1a35ca65f479c028ae63d97a8dc605a676" kindref="member">access</ref>(v);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>link_cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelink__cut" kindref="compound">link_cut</ref>;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>2<sp/>&quot;./tools/../src/graph/tree/test_link_cut.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelink__cut_1_1test" kindref="compound">link_cut::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelink__cut_1_1test_1ad63bee2821de932f5d295238e48d106f" kindref="member">test_link_cut_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Node<sp/>*&gt;<sp/>nodes(10);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/>generate(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(nodes),<sp/><ref refid="namespacelink__cut_1adfba82a1de72ee424f998c467fec0333" kindref="member">make_tree</ref>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[1],<sp/>nodes[2]);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[2])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[1])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[1],<sp/>nodes[2])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[0],<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[2],<sp/>nodes[1])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[0],<sp/>nodes[2])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[0],<sp/>nodes[1])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[1],<sp/>nodes[1])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[1],<sp/>nodes[8])<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[2])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[1])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[0])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[3],<sp/>nodes[4]);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[4],<sp/>nodes[5]);</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[5])<sp/>==<sp/>nodes[3]);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[0],<sp/>nodes[3]);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[4],<sp/>nodes[1])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[4],<sp/>nodes[4])<sp/>==<sp/>nodes[4]);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[6],<sp/>nodes[4])<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[6],<sp/>nodes[7]);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[6],<sp/>nodes[8]);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[8],<sp/>nodes[9]);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[0],<sp/>nodes[6]);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacetree_1ad6fb77bc640502f7cfbc3b49c7891419" kindref="member">lca</ref>(nodes[6],<sp/>nodes[4])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[3])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[2])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1ab6b1e676cdcb014dd718dcef1bc009de" kindref="member">cut</ref>(nodes[1]);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[2])<sp/>==<sp/>nodes[1]);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1ab6b1e676cdcb014dd718dcef1bc009de" kindref="member">cut</ref>(nodes[3]);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[3])<sp/>==<sp/>nodes[3]);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[4])<sp/>==<sp/>nodes[3]);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[5])<sp/>==<sp/>nodes[3]);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1ab6b1e676cdcb014dd718dcef1bc009de" kindref="member">cut</ref>(nodes[4]);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>(nodes[0],<sp/>nodes[4]);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[5])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[9])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[6])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1ab6b1e676cdcb014dd718dcef1bc009de" kindref="member">cut</ref>(nodes[8]);</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[9])<sp/>==<sp/>nodes[8]);</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[8])<sp/>==<sp/>nodes[8]);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelink__cut_1a06bdf6c4d130290a538a96eb2803fec3" kindref="member">find_root</ref>(nodes[0])<sp/>==<sp/>nodes[0]);</highlight></codeline>
<codeline lineno="3671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>link_cut::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelink__cut_1_1test" kindref="compound">link_cut::test</ref>;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>22<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/number_theory/test_modulo.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace_1_1test" kindref="compound">modulo_namespace::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1_1test_1a528d9ed1db3200393555b3dc75036599" kindref="member">test_power</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(2,<sp/>3)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(3,<sp/>10)<sp/>==<sp/>59049);</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{56888193});</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>-1000)<sp/>*<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{1},<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemodulo__namespace_1_1test_1a1125f7652707749c464a2dfa2732a94c" kindref="member">test_md</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{7,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{34}<sp/>/<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{-2}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{4});</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{2}<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{6}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3});</highlight></codeline>
<codeline lineno="3690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemodulo__namespace_1_1test_1a1574d4c610506ea86664c88fc549aedf" kindref="member">test_modulo</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a528d9ed1db3200393555b3dc75036599" kindref="member">test_power</ref>();</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemodulo__namespace_1_1test_1a1125f7652707749c464a2dfa2732a94c" kindref="member">test_md</ref>();</highlight></codeline>
<codeline lineno="3694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3695"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>modulo_namespace::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace_1_1test" kindref="compound">modulo_namespace::test</ref>;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>23<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/number_theory/test_number_theory.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/number_theory/number_theory.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703" refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" refkind="member"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" kindref="member">divs</ref>;</highlight></codeline>
<codeline lineno="3705" refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" refkind="member"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/><ref refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" kindref="member">divs</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" kindref="member">divs</ref>[n]<sp/>==<sp/>n;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{n,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>tz<sp/>=<sp/>__builtin_ctz(n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>(n<sp/>-<sp/>1)<sp/>&gt;&gt;<sp/>tz;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prime_a<sp/>=<sp/>[&amp;](<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>tz)<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v{2,<sp/>325,<sp/>9375,<sp/>28178,<sp/>450775,<sp/>9780504,<sp/>1795265022};</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_of(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>prime_a);</highlight></codeline>
<codeline lineno="3731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3733" refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" refkind="member"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(d,<sp/>1,<sp/>x<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(x<sp/>%<sp/>d))<sp/>{</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y<sp/>=<sp/>x<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(d);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(y);</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v));</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3755" refid="test__compiled_8cpp_1ae8dd217fd3a3de037c6a1031aef548aa" refkind="member"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="test__compiled_8cpp_1ae8dd217fd3a3de037c6a1031aef548aa" kindref="member">sieve</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>d(n),<sp/>ps;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>2,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps.push_back(d[i]<sp/>=<sp/>i);</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p<sp/>&lt;=<sp/>d[i]<sp/>&amp;&amp;<sp/>p<sp/>*<sp/>i<sp/>&lt;<sp/>n))<sp/>{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(d[p<sp/>*<sp/>i]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[p<sp/>*<sp/>i]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775" refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" refkind="member"><highlight class="normal">unordered_map&lt;ll,<sp/>ll&gt;<sp/><ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>g<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/><ref refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" kindref="member">divs</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="test__compiled_8cpp_1a1463d536aba4bb122d7fe13985968590" kindref="member">divs</ref>[n];</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(n))<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{n,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>c<sp/>=<sp/>0;<sp/>g<sp/>==<sp/>n;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>+<sp/>x<sp/>+<sp/>c;<sp/>};</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>a<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>f(a),<sp/>b<sp/>=<sp/>f(f(b)),<sp/>(g<sp/>=<sp/>gcd(<ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(a<sp/>-<sp/>b),<sp/>n))<sp/>==<sp/>1;)<sp/>{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{n,<sp/>1}};</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(1<sp/>&lt;<sp/>g<sp/>&amp;&amp;<sp/>g<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>!(n<sp/>%<sp/>g));</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(g)<sp/>+<sp/><ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(n<sp/>/<sp/>g);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3799" refid="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" kindref="member">egcd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>&amp;x,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>?<sp/><ref refid="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" kindref="member">egcd</ref>(<ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(b,<sp/>a),<sp/>a,<sp/>y,<sp/>x),<sp/>x<sp/>-=<sp/>b<sp/>/<sp/>a<sp/>*<sp/>y<sp/>:<sp/>(x<sp/>=<sp/>0,<sp/>y<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3805" refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref><sp/>=<sp/><ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(n);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>n<sp/>/<sp/>p.first;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3816" refid="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" kindref="member">dlog</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(gcd(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a),<sp/>modulo::modulus)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(a,<sp/>x)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>sq<sp/>=<sp/>sqrt(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(modulo::modulus))<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;modulo,<sp/>ll&gt;<sp/>powers;</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a_sq<sp/>=<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(a,<sp/>sq);</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>pw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>sq<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>powers[pw]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pw<sp/>*=<sp/>a_sq;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>cnt<sp/>=<sp/>0;;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>powers.find(x);<sp/>it<sp/>!=<sp/>end(powers))<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check(<ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(it-&gt;second<sp/>*<sp/>sq<sp/>-<sp/>cnt,<sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(modulo::modulus)));</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840" refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" kindref="member">primitive_root</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modulo::modulus<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tot<sp/>=<sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(modulo::modulus);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pfactor<sp/>=<sp/><ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(tot);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>modulo::modulus)<sp/>{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_primitive_root<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gcd(i,<sp/>modulo::modulus)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/>pfactor)<sp/>{</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{i},<sp/>tot<sp/>/<sp/>p.first)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_primitive_root())<sp/>{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>invalid_argument{</highlight><highlight class="stringliteral">&quot;M<sp/>has<sp/>no<sp/>primitive<sp/>root!&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="3863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>2<sp/>&quot;./tools/../src/number_theory/test_number_theory.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865" refid="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" kindref="member">test_prime</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(2));</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(3));</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(4));</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(5));</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>6)));</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7)));</highlight></codeline>
<codeline lineno="3872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3873" refid="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" kindref="member">test_divisors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(1)<sp/>==<sp/>vector&lt;ll&gt;{1}));</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(2)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2}));</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(3)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>3}));</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(4)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2,<sp/>4}));</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(36)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2,<sp/>3,<sp/>4,<sp/>6,<sp/>9,<sp/>12,<sp/>18,<sp/>36}));</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(49)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>7,<sp/>49}));</highlight></codeline>
<codeline lineno="3880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3881" refid="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" kindref="member">test_sieve</ref>()<sp/>{<sp/>assert((<ref refid="test__compiled_8cpp_1ae8dd217fd3a3de037c6a1031aef548aa" kindref="member">sieve</ref>(11)<sp/>==<sp/>vector&lt;ll&gt;{0,<sp/>0,<sp/>2,<sp/>3,<sp/>2,<sp/>5,<sp/>2,<sp/>7,<sp/>2,<sp/>3,<sp/>2}));<sp/>}</highlight></codeline>
<codeline lineno="3882" refid="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" kindref="member">test_fac</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(1)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{}));</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(1)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{}));</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(2)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>1}}));</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(3)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{3,<sp/>1}}));</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(4)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>2}}));</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(36)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>2},<sp/>{3,<sp/>2}}));</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="test__compiled_8cpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(49)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{7,<sp/>2}}));</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891" refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1aa6039763e84c50eb24fdee392c581898" kindref="member">egcd</ref>(a,<sp/>b,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>*<sp/>a<sp/>+<sp/>y<sp/>*<sp/>b<sp/>==<sp/>gcd(a,<sp/>b));</highlight></codeline>
<codeline lineno="3895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3896" refid="test__compiled_8cpp_1a1764567e56d415f536db0a4aa89e782f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(6,<sp/>15);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(3,<sp/>4);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(6,<sp/>6);</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(2,<sp/>1);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(63,<sp/>12);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3903" refid="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" kindref="member">test_totient</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(1)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(2)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(6)<sp/>==<sp/>2<sp/>&amp;&amp;<sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(84)<sp/>==<sp/>24<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(127)<sp/>==<sp/>126);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3907" refid="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" kindref="member">test_dlog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[](<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{m,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(a,<sp/>x);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a67527905c2b2c027c8b458902db2d05a" kindref="member">dlog</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(a,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(x,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(m,<sp/>1,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gcd(a,<sp/>m)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check(a,<sp/>x,<sp/>m);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3923" refid="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" kindref="member">test_primitive_root</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>m,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{m,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="test__compiled_8cpp_1a6542b189f3759f43899a8b1978d58e2c" kindref="member">primitive_root</ref>()<sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>check(1,<sp/>0);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>check(3,<sp/>2);</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>check(6,<sp/>5);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/>check(7,<sp/>3);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3933" refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" kindref="member">test_number_theory</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a87d7c3ba2489977a16ec40544a918e00" kindref="member">test_prime</ref>();</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" kindref="member">test_divisors</ref>();</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1afcfd3b1e3415393029bc6a496d825459" kindref="member">test_fac</ref>();</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" kindref="member">test_totient</ref>();</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a7aac53ce82614d79c7098a1de32ed1e7" kindref="member">test_dlog</ref>();</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a0ff115471f41e78245b5dc48eaf8032f" kindref="member">test_primitive_root</ref>();</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a8956d5feae5d2dd01656f6f960d568c7" kindref="member">test_sieve</ref>();</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>();</highlight></codeline>
<codeline lineno="3942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>24<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/test_dict_search.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/dict_search.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools" kindref="compound">string_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ll<sp/>start<sp/>=<sp/>&apos;a&apos;,<sp/>ll<sp/>alphabet_size<sp/>=<sp/>26&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leaf{};</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*parent{};</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>edge_char{};</highlight></codeline>
<codeline lineno="3959" refid="structstring__tools_1_1Trie_1ad3ba1336804cc5520df5c870e806e26b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*&amp;<ref refid="structstring__tools_1_1Trie_1ad3ba1336804cc5520df5c870e806e26b" kindref="member">next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_storage[c<sp/>-<sp/>start];<sp/>}</highlight></codeline>
<codeline lineno="3960" refid="structstring__tools_1_1Trie_1a58174618b92907ee56eb2914625b7959" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structstring__tools_1_1Trie_1a58174618b92907ee56eb2914625b7959" kindref="member">next</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;next(c));</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3965" refid="structstring__tools_1_1Trie_1a819249dc8ec7d31d7666f3c6a9b85e3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1a819249dc8ec7d31d7666f3c6a9b85e3c" kindref="member">next_default</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;vert<sp/>=<sp/>next(c);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vert)<sp/>{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref>{};</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert-&gt;<ref refid="structstring__tools_1_1Trie_1ac64a1f3655dbb77417b9be9c41ea2097" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert-&gt;<ref refid="structstring__tools_1_1Trie_1aef06d67ed53a08634d0df64b6e9df1af" kindref="member">edge_char</ref><sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vert;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3975" refid="structstring__tools_1_1Trie_1a9fe6156d37bd26e9fd4d8e9b5a6e21c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1Trie_1a9fe6156d37bd26e9fd4d8e9b5a6e21c4" kindref="member">insert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;next_default(c);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;leaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur-&gt;str<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3985" refid="structstring__tools_1_1Trie_1ac02e556e3dfd0c6608ffde23cee5a9dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1ac02e556e3dfd0c6608ffde23cee5a9dc" kindref="member">find_leaf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/>find_node(str);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>&amp;&amp;<sp/>node-&gt;leaf<sp/>?<sp/>node<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3990" refid="structstring__tools_1_1Trie_1a219e9e60d7843d09a2e4d2ee54b733ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1a219e9e60d7843d09a2e4d2ee54b733ee" kindref="member">find_node</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;<ref refid="structstring__tools_1_1Trie_1ad3ba1336804cc5520df5c870e806e26b" kindref="member">next</ref>(c);</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cur)<sp/>{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4001" refid="structstring__tools_1_1Trie_1ad0189e6ff15f4d305addadb7e011b80b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1ad0189e6ff15f4d305addadb7e011b80b" kindref="member">link</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!suffix_link_cache)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)<sp/>{</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent-&gt;parent)<sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent-&gt;<ref refid="structstring__tools_1_1Trie_1ad0189e6ff15f4d305addadb7e011b80b" kindref="member">link</ref>()-&gt;<ref refid="structstring__tools_1_1Trie_1aa30d5277840d084371dcb2193168b4a0" kindref="member">go</ref>(edge_char);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix_link_cache<sp/>=<sp/>get();</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suffix_link_cache;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4017" refid="structstring__tools_1_1Trie_1aa30d5277840d084371dcb2193168b4a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1aa30d5277840d084371dcb2193168b4a0" kindref="member">go</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;go_val<sp/>=<sp/>go_cache[c<sp/>-<sp/>start];</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!go_val)<sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_c<sp/>=<sp/>next(c))<sp/>{</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_c;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent<sp/>?<sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>()-&gt;go(c)<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>go_val<sp/>=<sp/>get();</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>go_val;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4031" refid="structstring__tools_1_1Trie_1ab8f1d2a13b82d8dbaccc886df20f8371" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*<ref refid="structstring__tools_1_1Trie_1ab8f1d2a13b82d8dbaccc886df20f8371" kindref="member">exit_link</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!exit_link_cache)<sp/>{</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)<sp/>{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_link_cache<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>suffix<sp/>=<sp/><ref refid="namespacelink__cut_1a4547d61253b63b606fb1d477541d454e" kindref="member">link</ref>();</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_link_cache<sp/>=<sp/>suffix-&gt;leaf<sp/>?<sp/>suffix<sp/>:<sp/>suffix-&gt;exit_link();</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exit_link_cache;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4047" refid="structstring__tools_1_1Trie_1a0bfc816d1bbcfa5a160a8f34400816d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1Trie_1a0bfc816d1bbcfa5a160a8f34400816d4" kindref="member">search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;text)<sp/>{</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;pair&lt;array&lt;ll,<sp/>2&gt;,<sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*&gt;&gt;<sp/>matches;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(idx,<sp/>text.size())<sp/>{</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;go(text[idx]);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exit<sp/>=<sp/>cur;<sp/>exit;<sp/>exit<sp/>=<sp/>exit-&gt;exit_link())<sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exit-&gt;leaf)<sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>=<sp/>idx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches.push_back({{j<sp/>-<sp/><ref refid="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" kindref="member">ssize</ref>(exit-&gt;str),<sp/>j},<sp/>exit});</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>array&lt;Trie<sp/>*,<sp/>alphabet_size&gt;<sp/>next_storage{};</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/>array&lt;Trie<sp/>*,<sp/>alphabet_size&gt;<sp/>go_cache{};</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*suffix_link_cache{};</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1Trie" kindref="compound">Trie</ref><sp/>*exit_link_cache{};</highlight></codeline>
<codeline lineno="4067"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4068"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>2<sp/>&quot;./tools/../src/string/test_dict_search.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Trie_Type&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a03b432c4506ad64b1db8ff0a6c897b49" kindref="member">test_dict_search_impl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trie<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Trie_Type{};</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;<sp/>good_words{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hell&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;water&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wo&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;er&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;yyy&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;yyyy&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;<sp/>bad_words{</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;think&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;codeforces&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mike&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;worl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hel&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;helloworld&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trie-&gt;insert(word);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(trie-&gt;find_leaf(word));</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>bad_words)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!trie-&gt;find_leaf(word));</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hello<sp/>=<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello-&gt;go(</highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>==<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello-&gt;go(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)<sp/>==<sp/>trie);</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;water&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;er&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zhelloperzzasdfnpokncopdeforcesofoajcodeforcessyyyyyyyyyzzz&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(trie-&gt;search({}))<sp/>expected;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>str.size())<sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.substr(i,<sp/>j<sp/>-<sp/>i)<sp/>==<sp/>word)<sp/>{</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.push_back({{i,<sp/>j},<sp/>trie-&gt;find_leaf(word)});</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;search(str)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a5165ff514ae968de6c81aedd2ce599ab" kindref="member">test_dict_search</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>test_dict_search_impl&lt;Trie&lt;&gt;&gt;();</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>test_dict_search_impl&lt;Trie&lt;&apos;\0&apos;,<sp/>256&gt;&gt;();</highlight></codeline>
<codeline lineno="4108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4109"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref>;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>25<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/test_string.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/string.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools" kindref="compound">string_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstring__tools_1_1hash__str" kindref="compound">hash_str</ref><sp/>{</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>lcg_mod<sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>62)<sp/>-<sp/>57;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*st;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;modulo&gt;<sp/>h,<sp/>p;</highlight></codeline>
<codeline lineno="4126" refid="structstring__tools_1_1hash__str_1aba56bc5901a45e72721a12256a831e69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1hash__str_1aba56bc5901a45e72721a12256a831e69" kindref="member">hash_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string_view<sp/>str)</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>st(str.data()),<sp/>h(str.size()<sp/>+<sp/>1),<sp/>p(str.size())<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w{lcg_mod,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>g<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>str.size())<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>*=<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{0x51a3e995948c0deULL};</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[i<sp/>+<sp/>1]<sp/>=<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{str[i]}<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sum(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(h),<sp/>begin(h));</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>inv<sp/>=<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{1}<sp/>/<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{0x51a3e995948c0deULL};</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>p.size())<sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>*=<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{inv};</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4142" refid="structstring__tools_1_1hash__str_1a75581b5cc9b3b8bfc41efbe0b395818d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structstring__tools_1_1hash__str_1a75581b5cc9b3b8bfc41efbe0b395818d" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string_view<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w{lcg_mod,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l<sp/>=<sp/>v.data()<sp/>-<sp/>st;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>((h[l<sp/>+<sp/>v.size()]<sp/>-<sp/>h[l])<sp/>*<sp/>p[l]);</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4152"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstring__tools_1_1bytehash" kindref="compound">bytehash</ref><sp/>{</highlight></codeline>
<codeline lineno="4153" refid="structstring__tools_1_1bytehash_1afc02fa27b45d663d63c6b9f2532a150c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1bytehash_1afc02fa27b45d663d63c6b9f2532a150c" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash&lt;string_view&gt;{}(</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_view{</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;x),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(x)});</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4159"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="namespacestring__tools_1a4a75212a844e6d429ae67ed0bb52ac1c" kindref="member">prefix</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>p(n);</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>=<sp/>p[i<sp/>-<sp/>1];;<sp/>j<sp/>=<sp/>p[j<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[j]<sp/>==<sp/>s[i])<sp/>{</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j)<sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4176"><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1a314ab0a3b3f972a1af0b738851323829" kindref="member">search_all</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/><ref refid="namespacestring__tools_1a4a75212a844e6d429ae67ed0bb52ac1c" kindref="member">prefix</ref>(s<sp/>+<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>+<sp/>t);</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>t.size())<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[s.size()<sp/>+<sp/>1<sp/>+<sp/>i]<sp/>==<sp/>s.size())<sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(i);</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1a01217477dcb709d208fc7a38ee91d26e" kindref="member">empstr</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4188"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref><sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;ll&gt;<sp/>{</highlight></codeline>
<codeline lineno="4189" refid="structstring__tools_1_1search__it_1acb50112dd85865f007cd61cce21075ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1search__it_1acb50112dd85865f007cd61cce21075ca" kindref="member">iterator_category</ref><sp/>=<sp/>input_iterator_tag;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t,<sp/>s;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n,<sp/>ed;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>p;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>=<sp/>0,<sp/>o<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4194" refid="structstring__tools_1_1search__it_1aca022e021ec03287386571ef78a8e954" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1search__it_1aca022e021ec03287386571ef78a8e954" kindref="member">search_it</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t_,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s_)</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>t(t_),<sp/>s(s_),<sp/>n(s.size()),<sp/>ed(n<sp/>+<sp/>1<sp/>+<sp/>t.size()),<sp/>p(n)<sp/>{</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4198" refid="structstring__tools_1_1search__it_1a1605669d491f38f76e0f32902a4b0ce7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1search__it_1a1605669d491f38f76e0f32902a4b0ce7" kindref="member">search_it</ref>()<sp/>:<sp/><ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref>(<ref refid="namespacestring__tools_1a01217477dcb709d208fc7a38ee91d26e" kindref="member">empstr</ref>,<sp/><ref refid="namespacestring__tools_1a01217477dcb709d208fc7a38ee91d26e" kindref="member">empstr</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="4199" refid="structstring__tools_1_1search__it_1af1edaa6e375d857575d012a55cdd4980" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1search__it_1af1edaa6e375d857575d012a55cdd4980" kindref="member">operator*</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(n);</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>-<sp/>(n<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203" refid="structstring__tools_1_1search__it_1ae3b12022612273c38ee27b30942ded0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstring__tools_1_1search__it_1ae3b12022612273c38ee27b30942ded0b" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++i;<sp/>i<sp/>&lt;<sp/>ed;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur<sp/>=<sp/>i<sp/>&lt;=<sp/>n<sp/>?<sp/>s.c_str()[i]<sp/>:<sp/>t[**</highlight><highlight class="keyword">this</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>=<sp/>o;;<sp/>j<sp/>=<sp/>p[j<sp/>-<sp/>1])<sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[j]<sp/>==<sp/>cur)<sp/>{</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>j<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!j)<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a2a9660e705c73071a9c68c86e5e92e29" kindref="member">operator==</ref>(<ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sa<sp/>=<sp/>a.<ref refid="structstring__tools_1_1search__it_1aab70ce1b2fdb25d6476e2a68e3e42fef" kindref="member">n</ref>,<sp/>sb<sp/>=<sp/>b.<ref refid="structstring__tools_1_1search__it_1aab70ce1b2fdb25d6476e2a68e3e42fef" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>^<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref><sp/>==<sp/>b.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa)<sp/>{</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref><sp/>==<sp/>a.<ref refid="structstring__tools_1_1search__it_1a87ec86b38282706ad524ea778ba728b0" kindref="member">ed</ref>;</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)<sp/>{</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="structstring__tools_1_1search__it_1a87ec86b38282706ad524ea778ba728b0" kindref="member">ed</ref><sp/>==<sp/>b.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1adf37877debb40c87ce158743d128a8df" kindref="member">operator&lt;</ref>(<ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sa<sp/>=<sp/>a.<ref refid="structstring__tools_1_1search__it_1aab70ce1b2fdb25d6476e2a68e3e42fef" kindref="member">n</ref>,<sp/>sb<sp/>=<sp/>b.<ref refid="structstring__tools_1_1search__it_1aab70ce1b2fdb25d6476e2a68e3e42fef" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa<sp/>^<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref><sp/>&lt;<sp/>b.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa)<sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref><sp/>&lt;<sp/>a.<ref refid="structstring__tools_1_1search__it_1a87ec86b38282706ad524ea778ba728b0" kindref="member">ed</ref>;</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)<sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.<ref refid="structstring__tools_1_1search__it_1a87ec86b38282706ad524ea778ba728b0" kindref="member">ed</ref><sp/>&lt;<sp/>b.<ref refid="structstring__tools_1_1search__it_1abbec6589aea3d745e199d755d85d554a" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1a9ea78f4e72ed84a9dc9c77e705185739" kindref="member">search_ra</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts<sp/>&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range</ref>{<ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref>(args...),<sp/><ref refid="structstring__tools_1_1search__it" kindref="compound">search_it</ref>()};</highlight></codeline>
<codeline lineno="4253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools" kindref="compound">string_tools</ref>;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/string/test_string.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1ac1a1619c70d343d8407613e3c4bbd27a" kindref="member">test_hash_str</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>main_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;OmniTemplate,<sp/>OmniTemplate&quot;</highlight><highlight class="normal">sv;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1hash__str" kindref="compound">hash_str</ref><sp/>func{main_str};</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/>func(main_str.substr(0,<sp/>3));</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;string_view,<sp/>ll,<sp/>hash_str&gt;<sp/>mapping({},<sp/>func);</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omni1<sp/>=<sp/>main_str.substr(0,<sp/>4);</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omni2<sp/>=<sp/>main_str.substr(14,<sp/>4);</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omn<sp/>=<sp/>main_str.substr(14,<sp/>3);</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(omni1<sp/>==<sp/>omni2);</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/>mapping[omni1]<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapping[omni2]<sp/>==<sp/>42);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapping[omn]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a64626566a9a577a41d0fd03883992faa" kindref="member">test_bytehash</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1bytehash" kindref="compound">bytehash</ref><sp/>func{};</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(func(i)<sp/>!=<sp/>func(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((func(tuple{to_string(i),<sp/>i})<sp/>!=<sp/>func(tuple{to_string(i),<sp/>i<sp/>+<sp/>1})));</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a93443a5be0ecc44e9264ce39390c8441" kindref="member">test_string</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1ac1a1619c70d343d8407613e3c4bbd27a" kindref="member">test_hash_str</ref>();</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a64626566a9a577a41d0fd03883992faa" kindref="member">test_bytehash</ref>();</highlight></codeline>
<codeline lineno="4281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4282"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref>;</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>26<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/test_suffix_array.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/string/suffix_array.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools" kindref="compound">string_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacestring__tools_1af59e7388a466fccce148991db2eb61db" kindref="member">suffix_array</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(str.size()),<sp/>order(str.size());</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/>iota(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/>0LL);</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(str),<sp/>begin(order));</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sort_step<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w{str.size(),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair_key<sp/>=<sp/>[&amp;,<sp/>order](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array{</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order[idx],</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{idx,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}}<sp/>+<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{len,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}})]};</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1a713c1fa985af64dbe0374a15cc3d4383" kindref="member">counting_sort</ref>(</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str[idx];<sp/>},<sp/>256);</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1a713c1fa985af64dbe0374a15cc3d4383" kindref="member">counting_sort</ref>(</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>order[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{idx,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}}<sp/>-</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{len,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}})];</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.size());</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{x,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}}<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{len,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}});</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>+=<sp/>(i<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>pair_key(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[i<sp/>-<sp/>1])<sp/>!=<sp/>pair_key(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[i]));</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order[<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>[i]]<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/>sort_step(0);</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>len<sp/>=<sp/>1;<sp/>len<sp/>&lt;<sp/>str.size();<sp/>len<sp/>*=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort_step(len);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>;</highlight></codeline>
<codeline lineno="4330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="namespacestring__tools_1ab41ebf14517712e71f78118e8b897214" kindref="member">lcp_array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;suffix_arr)<sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>str.size();</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/><ref refid="test__compiled_8cpp_1a4cb6b7e98aadd3fa7ffc759c5e14596d" kindref="member">invert</ref>(multiplies{},<sp/>suffix_arr);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>match<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>lcp(n);</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>:<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>suffix_arr[start]<sp/>+<sp/>match,<sp/>j<sp/>=<sp/>suffix_arr[start<sp/>+<sp/>1]<sp/>+<sp/>match;</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(max(i,<sp/>j)<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>str[i]<sp/>==<sp/>str[j]))<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++match;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcp[start]<sp/>=<sp/>match;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/>max(match<sp/>-<sp/>1,<sp/>0LL);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lcp;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4352"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>2<sp/>&quot;./tools/../src/string/test_suffix_array.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacestring__tools_1_1test_1ae99e912d4303fb69fb94d5197acfb0fa" kindref="member">suffix_array_naive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(str.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/>iota(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/>0LL);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>),<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>([&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string_view{str}.substr(idx);<sp/>}));</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1aac2edb1d7263538c044fead501c02085" kindref="member">random_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str(len,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>uniform_int_distribution&lt;char&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>);</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a0311b754634857f1293f70831da06fd2" kindref="member">lcp_array_naive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpermutation_1_1Permutation" kindref="compound">Permutation</ref><sp/>&amp;suffix_arr)<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>str.size();</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>lcp(n);</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>str.substr(suffix_arr[i]),<sp/>b<sp/>=<sp/>str.substr(suffix_arr[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcp[i]<sp/>=<sp/>mismatch(<ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(a),<sp/><ref refid="test__compiled_8cpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(b)).first<sp/>-<sp/>begin(a);</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lcp;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a81ed0421a8991a10c16c1fdaa0cf8cf6" kindref="member">test_suffix_array</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>string<sp/>str<sp/>=<sp/>&quot;zomniomnitemplatecodeforceshelloworldwatera&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(len,<sp/>0,<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(it,<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/><ref refid="namespacestring__tools_1_1test_1aac2edb1d7263538c044fead501c02085" kindref="member">random_str</ref>(len);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>suffix_arr<sp/>=<sp/><ref refid="namespacestring__tools_1af59e7388a466fccce148991db2eb61db" kindref="member">suffix_array</ref>(str);</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(suffix_arr<sp/>==<sp/><ref refid="namespacestring__tools_1_1test_1ae99e912d4303fb69fb94d5197acfb0fa" kindref="member">suffix_array_naive</ref>(str));</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacestring__tools_1ab41ebf14517712e71f78118e8b897214" kindref="member">lcp_array</ref>(str,<sp/>suffix_arr)<sp/>==<sp/><ref refid="namespacestring__tools_1_1test_1a0311b754634857f1293f70831da06fd2" kindref="member">lcp_array_naive</ref>(str,<sp/>suffix_arr));</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref>;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>27<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/utility/test_coroutine.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/utility/coroutine.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399" refid="namespacecoroutine" refkind="compound"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecoroutine" kindref="compound">coroutine</ref><sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CO_SWITCH<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401" refid="test__compiled_8cpp_1a07a24840ac2854166f541e047362d0bf" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cobegin<sp/>static<sp/>ll<sp/>pos<sp/>=<sp/>0;<sp/>switch<sp/>(pos)<sp/>{<sp/>case<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403" refid="test__compiled_8cpp_1a1672ec864a13c8374fa9bfc6595e67d6" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>coend<sp/>default:<sp/>throw<sp/>out_of_range(&quot;Coroutine<sp/>reached<sp/>end.&quot;);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407" refid="test__compiled_8cpp_1a904227d8e8b2e67adef1e140e9990a5c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>coreturn(x)<sp/>pos<sp/>=<sp/>__LINE__;<sp/>return<sp/>x;<sp/>case<sp/>__LINE__:;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4411" refid="test__compiled_8cpp_1a40b2517161c64f0179823b67d4af0242" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428" refid="namespacecoroutine_1a4777caf41e11578bb927d2bc250530ea" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacecoroutine_1a4777caf41e11578bb927d2bc250530ea" kindref="member">coro</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a1672ec864a13c8374fa9bfc6595e67d6" kindref="member">cobegin</ref><sp/><ref refid="test__compiled_8cpp_1a40b2517161c64f0179823b67d4af0242" kindref="member">coreturn</ref>(404);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a40b2517161c64f0179823b67d4af0242" kindref="member">coreturn</ref>(i<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a40b2517161c64f0179823b67d4af0242" kindref="member">coreturn</ref>(505);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a904227d8e8b2e67adef1e140e9990a5c" kindref="member">coend</ref></highlight></codeline>
<codeline lineno="4435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>coroutine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/utility/test_coroutine.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4438" refid="namespacecoroutine_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecoroutine_1_1test" kindref="compound">coroutine::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4439" refid="namespacecoroutine_1_1test_1a22ebde81203b27ead34dd1fcc2afdbfc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacecoroutine_1_1test_1a22ebde81203b27ead34dd1fcc2afdbfc" kindref="member">test_coroutine</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>a<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(<ref refid="namespacecoroutine_1a4777caf41e11578bb927d2bc250530ea" kindref="member">coro</ref>(a));</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(out_of_range<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((v<sp/>==<sp/>vector&lt;ll&gt;{404,<sp/>0<sp/>*<sp/>0,<sp/>1<sp/>*<sp/>1,<sp/>2<sp/>*<sp/>2,<sp/>3<sp/>*<sp/>3,<sp/>505}));</highlight></codeline>
<codeline lineno="4449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>coroutine::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecoroutine_1_1test" kindref="compound">coroutine::test</ref>;</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>28<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/utility/test_graph_draw.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>1<sp/>&quot;./tools/../src/utility/graph_draw.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight></codeline>
<codeline lineno="4459" refid="namespacegraph__draw" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__draw" kindref="compound">graph_draw</ref><sp/>{</highlight></codeline>
<codeline lineno="4460" refid="namespacegraph__draw_1a44d5f564d8f26d47b49ecfb516589e62" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__draw_1a44d5f564d8f26d47b49ecfb516589e62" kindref="member">graph_to_dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>&amp;graph,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>undirected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/>ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>(undirected<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;graph&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;digraph&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>G<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(u,<sp/>graph.size())<sp/>{</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>:<sp/>graph[u])<sp/>{</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!undirected<sp/>||<sp/>u<sp/>&lt;=<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>u<sp/>&lt;&lt;<sp/>(undirected<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();</highlight></codeline>
<codeline lineno="4473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4474" refid="namespacegraph__draw_1acb94157dfde90c9f5dc096b224ec156e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__draw_1acb94157dfde90c9f5dc096b224ec156e" kindref="member">show_dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream(</highlight><highlight class="stringliteral">&quot;graph.dot&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;dot<sp/>-Tpng<sp/>graph.dot<sp/>-o<sp/>graph.png<sp/>&amp;&amp;<sp/>xdg-open<sp/>graph.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4478"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>3<sp/>&quot;./tools/../src/utility/test_graph_draw.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480" refid="namespacegraph__draw_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__draw_1_1test" kindref="compound">graph_draw::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4481" refid="namespacegraph__draw_1_1test_1a037737d6386f4405a42dc842eb4d7436" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__draw_1_1test_1a037737d6386f4405a42dc842eb4d7436" kindref="member">test_graph_draw</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref><sp/>graph(6);</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(graph,<sp/>0,<sp/>5);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref><sp/>=<sp/><ref refid="namespacegraph__draw_1a44d5f564d8f26d47b49ecfb516589e62" kindref="member">graph_to_dot</ref>(graph,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__draw_1acb94157dfde90c9f5dc096b224ec156e" kindref="member">show_dot</ref>(<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>graph_draw::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegraph__draw_1_1test" kindref="compound">graph_draw::test</ref>;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>29<sp/>&quot;src/test/test.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494" refid="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1a5da77c5a58b4193f997d91f2130efd53" kindref="member">multitest</ref>{};</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>why<sp/>can&apos;t<sp/>we<sp/>compile<sp/>this<sp/>on<sp/>G++-10?<sp/>Compiler<sp/>bug?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496" refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__compiled_8cpp_1af095a232149097b5605064623a9345ac" kindref="member">main2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test_bigint();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1aa1aed4e58acebcfd6d9150b64f4ad975" kindref="member">test_counting_sort</ref>();</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a81ed0421a8991a10c16c1fdaa0cf8cf6" kindref="member">test_suffix_array</ref>();</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5165ff514ae968de6c81aedd2ce599ab" kindref="member">test_dict_search</ref>();</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutility_1_1test_1a8aec6a2b496df7ad483a46db1649ea2c" kindref="member">test_utility</ref>();</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1_1test_1a147e0cf4f86928e4e422c6b9198a2371" kindref="member">test_graph_theory</ref>();</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedsu__ds_1_1test_1adafe4323a317f827a39c3516cf6d792b" kindref="member">test_dsu</ref>();</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesat2_1_1test_1a39c93d63732b7216ede171b3589de7f2" kindref="member">test_sat2</ref>();</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemodulo__namespace_1_1test_1a1574d4c610506ea86664c88fc549aedf" kindref="member">test_modulo</ref>();</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1aed36f6b8b9706133e9b5302b1618e9ef" kindref="member">test_number_theory</ref>();</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacequeue__tools_1_1test_1ae0e3be2c757c8f50b8baee654071b01e" kindref="member">test_queue</ref>();</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesplay__tree_1_1test_1a5aa5fd954b1cb0fb099a2310d2801e9e" kindref="member">test_splay_tree</ref>();</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a05eb98d10b7444bbdc9fe64f4d99676a" kindref="member">test_geometry</ref>();</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecombinatorics_1_1test_1a28cd50807d464588cc9b5add7bed4f97" kindref="member">test_combinatorics</ref>();</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a93443a5be0ecc44e9264ce39390c8441" kindref="member">test_string</ref>();</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecoroutine_1_1test_1a22ebde81203b27ead34dd1fcc2afdbfc" kindref="member">test_coroutine</ref>();</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1aec6af708eda9aa2982dcba2a651f4bf9" kindref="member">test_linear_algebra</ref>();</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepermutation_1_1test_1a35c04b3a3683be26d7eb0723d772fad4" kindref="member">test_permutation</ref>();</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__compiled_8cpp_1af86f570cf0a5201c700ffeec06aec7f6" kindref="member">test_bit</ref>();</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesegment__tree_1_1test_1a9d9bbf8a59763caf631ceb0808e1b105" kindref="member">test_segment_tree</ref>();</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepolynomial__ns_1_1test_1a5ed51dd96ea5d0597e0c721fb647bfcc" kindref="member">test_polynomial</ref>();</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesparse__table_1_1test_1ad6ec7466ef06bcb50a79ee26c4a05db0" kindref="member">test_sparse_table</ref>();</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehld_1_1test_1a2c2ea10aedda3e4e51f08d38ea3fa3f0" kindref="member">test_hld</ref>();</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelink__cut_1_1test_1ad63bee2821de932f5d295238e48d106f" kindref="member">test_link_cut_tree</ref>();</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegraph__draw_1_1test_1a037737d6386f4405a42dc842eb4d7436" kindref="member">test_graph_draw</ref>();</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/>clog<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[0;32mAccepted\e[0m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp"/>
  </compounddef>
</doxygen>
