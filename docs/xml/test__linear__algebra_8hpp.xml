<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__linear__algebra_8hpp" kind="file" language="C++">
    <compoundname>test_linear_algebra.hpp</compoundname>
    <includes refid="linear__algebra_8hpp" local="yes">linear_algebra.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="13">
        <label>polynomial.hpp</label>
        <link refid="polynomial_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp</label>
        <link refid="test__linear__algebra_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp</label>
        <link refid="test__linear__algebra_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacelinear__algebra">linear_algebra</innernamespace>
    <innernamespace refid="namespacelinear__algebra_1_1test">linear_algebra::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="linear__algebra_8hpp" kindref="compound">linear_algebra.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespacelinear__algebra_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra_1_1test" kindref="compound">linear_algebra::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelinear__algebra_1a9857489fa641b19465aed9647a854219" kindref="member">invert</ref>(a)<sp/>*<sp/>a<sp/>==<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/><ref refid="namespacelinear__algebra_1a9857489fa641b19465aed9647a854219" kindref="member">invert</ref>(a)<sp/>==<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8" refid="namespacelinear__algebra_1_1test_1a58d68feee7c76f77519389051a942161" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a58d68feee7c76f77519389051a942161" kindref="member">test_invert</ref>()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="core_2all_8hpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(a);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a8104ca6c18938c522aa7a1225170aab1" kindref="member">test_invert_impl</ref>(b);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15" refid="namespacelinear__algebra_1_1test_1a9a0a8549e208f8a719d5450d21b339ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a9a0a8549e208f8a719d5450d21b339ed" kindref="member">test_matrix</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="core_2all_8hpp_1ad54dde638d1ae3e9bb08956f539b1883" kindref="member">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/>(b<sp/>/<sp/>a)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21" refid="namespacelinear__algebra_1_1test_1a5e39baa2e5b5fa6453ab6307d6e4f201" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1a5e39baa2e5b5fa6453ab6307d6e4f201" kindref="member">test_lin_recur</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;ll&gt;{1,<sp/>2},<sp/>5)<sp/>==<sp/>21);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;ll&gt;{2,<sp/>3,<sp/>1},<sp/>4)<sp/>==<sp/>65);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespacelinear__algebra_1_1test_1a931e55dd26d27ac448311db318de875a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classpolynomial__ns_1_1Polynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/><ref refid="namespacelinear__algebra_1_1test_1a931e55dd26d27ac448311db318de875a" kindref="member">lin_recur_coef</ref>(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{}</highlight></codeline>
<codeline lineno="27" refid="namespacelinear__algebra_1_1test_1aec6af708eda9aa2982dcba2a651f4bf9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1_1test_1aec6af708eda9aa2982dcba2a651f4bf9" kindref="member">test_linear_algebra</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a9a0a8549e208f8a719d5450d21b339ed" kindref="member">test_matrix</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a5e39baa2e5b5fa6453ab6307d6e4f201" kindref="member">test_lin_recur</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1_1test_1a58d68feee7c76f77519389051a942161" kindref="member">test_invert</ref>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test_lin_recur_coef();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linear_algebra::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra_1_1test" kindref="compound">linear_algebra::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp"/>
  </compounddef>
</doxygen>
