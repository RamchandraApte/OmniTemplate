<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structseg" kind="struct" language="C++" prot="public">
    <compoundname>seg</compoundname>
    <templateparamlist>
      <param>
        <type>auto</type>
        <declname>op</declname>
        <defname>op</defname>
      </param>
      <param>
        <type>lli</type>
        <declname>id_</declname>
        <defname>id_</defname>
        <defval>identity(op)</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structseg_1a36b9d2f5614b71814a226c0285c24d5c" prot="public" static="no">
        <type>decltype(identity(op))</type>
        <definition>using seg&lt; op, id_ &gt;::T =  decltype(identity(op))</definition>
        <argsstring></argsstring>
        <name>T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="4" column="1" bodyfile="seg_old.hpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structseg_1ad581224128223063bf41930f7d1143f7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr T</type>
        <definition>constexpr T seg&lt; op, id_ &gt;::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= id_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="5" column="20" bodyfile="seg_old.hpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structseg_1aee612dceef417b2d76fcf2cf2a560852" prot="public" static="yes" mutable="no">
        <type>const static auto</type>
        <definition>const static auto seg&lt; op, id_ &gt;::def</definition>
        <argsstring></argsstring>
        <name>def</name>
        <initializer>= -1LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="17" column="19" bodyfile="seg_old.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structseg_1aec39c86816f724381919a788bb6e899e" prot="public" static="no" mutable="no">
        <type>const <ref refid="structll" kindref="compound">ll</ref></type>
        <definition>const ll seg&lt; op, id_ &gt;::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of nodes of teh segment tree. Does not need to be a power of two. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="6" column="10" bodyfile="seg_old.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structseg_1aad9da220752b136fa737498955050354" prot="public" static="no" mutable="yes">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; seg&lt; op, id_ &gt;::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="8" column="16" bodyfile="seg_old.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structseg_1ae151eed87c688785b0071279a82f0a59" prot="public" static="no" mutable="no">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; seg&lt; op, id_ &gt;::z</definition>
        <argsstring></argsstring>
        <name>z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="8" column="18" bodyfile="seg_old.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structseg_1a71b2f9f35c3edacf1a431f8ab6b1b952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>seg&lt; op, id_ &gt;::seg</definition>
        <argsstring>(const Cont &amp;v)</argsstring>
        <name>seg</name>
        <param>
          <type>const Cont &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="10" column="1" bodyfile="seg_old.hpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structseg_1abe9e9d5eca61fc8414635dd7f6c2cce3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto seg&lt; op, id_ &gt;::fix</definition>
        <argsstring>(ll l, ll &amp;r, ll nl, ll &amp;nr) const</argsstring>
        <name>fix</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>nl</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="18" column="6" bodyfile="seg_old.hpp" bodystart="18" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structseg_1a47c33b5e0170ed5349eb68520ee245c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto seg&lt; op, id_ &gt;::down</definition>
        <argsstring>(ll i) const</argsstring>
        <name>down</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="28" column="6" bodyfile="seg_old.hpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structseg_1a335fb2d0d59eec6986073813d40614b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T seg&lt; op, id_ &gt;::gt</definition>
        <argsstring>(ll l, remove_const_t&lt; decltype(def)&gt; r=def, remove_const_t&lt; decltype(1LL)&gt; i=1LL, remove_const_t&lt; decltype(0LL)&gt; nl=0LL, remove_const_t&lt; decltype(def)&gt; nr=def) const</argsstring>
        <name>gt</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(def)&gt;</type>
          <declname>r</declname>
          <defval>def</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(1LL)&gt;</type>
          <declname>i</declname>
          <defval>1LL</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(0LL)&gt;</type>
          <declname>nl</declname>
          <defval>0LL</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(def)&gt;</type>
          <declname>nr</declname>
          <defval>def</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="36" column="3" bodyfile="seg_old.hpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structseg_1aa44bb7f037de2a3f92ec2183bcef1523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto seg&lt; op, id_ &gt;::up</definition>
        <argsstring>(T v, ll l, remove_const_t&lt; decltype(def)&gt; r=def, remove_const_t&lt; decltype(1LL)&gt; i=1LL, remove_const_t&lt; decltype(0LL)&gt; nl=0LL, remove_const_t&lt; decltype(def)&gt; nr=def)</argsstring>
        <name>up</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(def)&gt;</type>
          <declname>r</declname>
          <defval>def</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(1LL)&gt;</type>
          <declname>i</declname>
          <defval>1LL</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(0LL)&gt;</type>
          <declname>nl</declname>
          <defval>0LL</defval>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(def)&gt;</type>
          <declname>nr</declname>
          <defval>def</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="44" column="6" bodyfile="seg_old.hpp" bodystart="44" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>seg&lt; op, id_ &gt;</label>
        <link refid="structseg"/>
        <childnode refid="2" relation="usage">
          <edgelabel>n</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>ll</label>
        <link refid="structll"/>
      </node>
    </collaborationgraph>
    <location file="seg_old.hpp" line="3" column="26" bodyfile="seg_old.hpp" bodystart="3" bodyend="57"/>
    <listofallmembers>
      <member refid="structseg_1aad9da220752b136fa737498955050354" prot="public" virt="non-virtual"><scope>seg</scope><name>a</name></member>
      <member refid="structseg_1aee612dceef417b2d76fcf2cf2a560852" prot="public" virt="non-virtual"><scope>seg</scope><name>def</name></member>
      <member refid="structseg_1a47c33b5e0170ed5349eb68520ee245c6" prot="public" virt="non-virtual"><scope>seg</scope><name>down</name></member>
      <member refid="structseg_1abe9e9d5eca61fc8414635dd7f6c2cce3" prot="public" virt="non-virtual"><scope>seg</scope><name>fix</name></member>
      <member refid="structseg_1a335fb2d0d59eec6986073813d40614b2" prot="public" virt="non-virtual"><scope>seg</scope><name>gt</name></member>
      <member refid="structseg_1ad581224128223063bf41930f7d1143f7" prot="public" virt="non-virtual"><scope>seg</scope><name>id</name></member>
      <member refid="structseg_1aec39c86816f724381919a788bb6e899e" prot="public" virt="non-virtual"><scope>seg</scope><name>n</name></member>
      <member refid="structseg_1a71b2f9f35c3edacf1a431f8ab6b1b952" prot="public" virt="non-virtual"><scope>seg</scope><name>seg</name></member>
      <member refid="structseg_1a36b9d2f5614b71814a226c0285c24d5c" prot="public" virt="non-virtual"><scope>seg</scope><name>T</name></member>
      <member refid="structseg_1aa44bb7f037de2a3f92ec2183bcef1523" prot="public" virt="non-virtual"><scope>seg</scope><name>up</name></member>
      <member refid="structseg_1ae151eed87c688785b0071279a82f0a59" prot="public" virt="non-virtual"><scope>seg</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
