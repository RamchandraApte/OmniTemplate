<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="cht_8hpp" kind="file" language="C++">
    <compoundname>cht.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="test__cht_8hpp" local="yes">/home/ram/OmniTemplate/src/ds/test_cht.hpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="13">
        <label>queue</label>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="23">
        <label>experimental/source_location</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="25">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>unordered_set</label>
      </node>
      <node id="22">
        <label>experimental/iterator</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/cht.hpp</label>
        <link refid="cht_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>random</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
      <node id="16">
        <label>stack</label>
      </node>
      <node id="28">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>climits</label>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="17">
        <label>thread</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>set</label>
      </node>
      <node id="7">
        <label>complex</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="24">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/ds/test_cht.hpp</label>
        <link refid="test__cht_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/cht.hpp</label>
        <link refid="cht_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structconvex__hull__trick_1_1CHT" prot="public">convex_hull_trick::CHT</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespaceconvex__hull__trick">convex_hull_trick</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="4" refid="cht_8hpp_1a18b063c150d95a5ec77dab71218c4f48" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="range_8hpp_1adf37877debb40c87ce158743d128a8df" kindref="member">operator&lt;</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{real(x),<sp/>imag(x)};<sp/>})(a,<sp/>b);</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="namespaceconvex__hull__trick" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick" kindref="compound">convex_hull_trick</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>generalize<sp/>these<sp/>products<sp/>for<sp/>multidimensional<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(conj(a)<sp/>*<sp/>b);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16" refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imag(conj(a)<sp/>*<sp/>b);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22" refid="namespaceconvex__hull__trick_1abeaee6745d46728e8edf0f80a1e92ddf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1abeaee6745d46728e8edf0f80a1e92ddf" kindref="member">area</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>(b<sp/>-<sp/>a,<sp/>c<sp/>-<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="33" refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>area_pts<sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1abeaee6745d46728e8edf0f80a1e92ddf" kindref="member">area</ref>(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a<sp/>==<sp/>b<sp/>||<sp/>a<sp/>==<sp/>c<sp/>||<sp/>b<sp/>==<sp/>c<sp/>||<sp/>area_pts))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>invalid_argument{</highlight><highlight class="stringliteral">&quot;Points<sp/>are<sp/>collinear.&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>area_pts<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40" refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(vector&lt;point&gt;<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_sort<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>why<sp/>do_sort?</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>h;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_sort)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*min_element(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>([](<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{imag(a),<sp/>real(a)};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(v),<sp/>bind(<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>,<sp/>p,<sp/>_1,<sp/>_2));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.push_back(p);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h.size()<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>!<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(h[h.size()<sp/>-<sp/>2],<sp/>h.back(),<sp/>x))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.pop_back();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h.push_back(x);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*partition_point(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(r),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(f(i)<sp/>&lt;<sp/>f(i<sp/>+<sp/>1));<sp/>});</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66" refid="structconvex__hull__trick_1_1CHT" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structconvex__hull__trick_1_1CHT" kindref="compound">CHT</ref><sp/>{</highlight></codeline>
<codeline lineno="67" refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/><ref refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" kindref="member">lines</ref>;<sp/></highlight></codeline>
<codeline lineno="68" refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" kindref="member">CHT</ref>(vector&lt;point&gt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" kindref="member">uniq</ref>(v,<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>(<ref refid="utility_8hpp_1a21362d5df7197db64cd8c8e4602d7f52" kindref="member">LAMBDA</ref>(imag),<sp/>equal_to{}),<sp/><ref refid="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" kindref="member">key_compare</ref>(<ref refid="utility_8hpp_1a21362d5df7197db64cd8c8e4602d7f52" kindref="member">LAMBDA</ref>(conj)));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" kindref="member">lines</ref><sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(v,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72" refid="structconvex__hull__trick_1_1CHT_1a033ef6e8e798b2803762f8c199da345a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structconvex__hull__trick_1_1CHT_1a033ef6e8e798b2803762f8c199da345a" kindref="member">min</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eval<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real(<ref refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" kindref="member">lines</ref>[i])<sp/>*<sp/>x<sp/>+<sp/>imag(<ref refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" kindref="member">lines</ref>[i]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval(<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{size(<ref refid="structconvex__hull__trick_1_1CHT_1a51367d06707736271c8a23d9ce294fbe" kindref="member">lines</ref>)<sp/>-<sp/>1},<sp/>eval));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>convex_hull_trick</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/ds/cht.hpp"/>
  </compounddef>
</doxygen>
