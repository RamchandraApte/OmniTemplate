<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classSegmentTree" kind="class" language="C++" prot="public">
    <compoundname>SegmentTree</compoundname>
    <includes refid="segment__tree_8hpp" local="no">segment_tree.hpp</includes>
    <innerclass refid="structSegmentTree_1_1LazyPart" prot="public">SegmentTree::LazyPart</innerclass>
    <innerclass refid="structSegmentTree_1_1NodeCore" prot="public">SegmentTree::NodeCore</innerclass>
    <innerclass refid="structSegmentTree_1_1NodeExp" prot="public">SegmentTree::NodeExp</innerclass>
    <innerclass refid="structSegmentTree_1_1NodeImp" prot="public">SegmentTree::NodeImp</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename Query</type>
      </param>
      <param>
        <type>typename Update</type>
      </param>
      <param>
        <type>bool</type>
        <declname>has_lazy</declname>
        <defname>has_lazy</defname>
        <defval>true</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>has_ptr</declname>
        <defname>has_ptr</defname>
        <defval>true</defval>
      </param>
      <param>
        <type>bool</type>
        <declname>has_pers</declname>
        <defname>has_pers</defname>
        <defval>true</defval>
      </param>
      <param>
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <declname>base</declname>
        <defname>base</defname>
        <defval>2</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" static="no">
        <type>conditional_t&lt; has_ptr, <ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::Node =  conditional_t&lt;has_ptr, NodeExp *, ll&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="639" column="5" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentTree_1afba544d564a42497c23bb83786c8530f" prot="public" static="no">
        <type>conditional_t&lt; has_ptr, <ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *, <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref> &gt;</type>
        <definition>using SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::Node =  conditional_t&lt;has_ptr, NodeExp *, NodeImp&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="48" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" static="no">
        <type>conditional_t&lt; has_ptr, <ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::Node =  conditional_t&lt;has_ptr, NodeExp *, ll&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="627" column="2" bodyfile="e_compiled.cpp" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" static="no">
        <type>conditional_t&lt; has_ptr, <ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::Node =  conditional_t&lt;has_ptr, NodeExp *, ll&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="35" column="1" bodyfile="segment_tree.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classSegmentTree_1afba544d564a42497c23bb83786c8530f" prot="public" static="no">
        <type>conditional_t&lt; has_ptr, <ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *, <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref> &gt;</type>
        <definition>using SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::Node =  conditional_t&lt;has_ptr, NodeExp *, NodeImp&gt;</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="44" column="1" bodyfile="segment_tree_multi.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classSegmentTree_1a8cf63359e5492051a7e7953793ea77eb" prot="private" static="no" mutable="no">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="763" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSegmentTree_1a0d4f61c8a7e6932de1b352fa858b76d3" prot="private" static="no" mutable="no">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::ceil_size</definition>
        <argsstring></argsstring>
        <name>ceil_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="764" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSegmentTree_1a9e69c2fd14687cc30d039da9abc176a2" prot="private" static="no" mutable="no">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::root</definition>
        <argsstring></argsstring>
        <name>root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="765" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSegmentTree_1a106a0267ecd0a253f790f606a10c89b7" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="structSegmentTree_1_1NodeCore" kindref="compound">NodeCore</ref> &gt;</type>
        <definition>vector&lt; NodeCore &gt; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::nodes</definition>
        <argsstring></argsstring>
        <name>nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="766" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="766" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const ll size_arg)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>size_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="618" column="5" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="618" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="625" column="5" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="625" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(NodeExp *const &amp;obj)</argsstring>
        <name>get_core</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="641" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="641" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(const ll idx)</argsstring>
        <name>get_core</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="642" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="642" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(NodeExp *const &amp;obj, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="643" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="643" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(const ll idx, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="644" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="644" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="649" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="649" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="652" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="652" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>down</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="665" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="665" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="685" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="685" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node custom_root)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>custom_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="700" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="700" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="706" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="706" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val, Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="707" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="707" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="739" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="739" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::destroy</definition>
        <argsstring>(Node node)</argsstring>
        <name>destroy</name>
        <param>
          <type>Node</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="745" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="745" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::~SegmentTree</definition>
        <argsstring>()</argsstring>
        <name>~SegmentTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="755" column="5" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="755" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const ll size_arg)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>size_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="26" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(NodeExp *const &amp;obj)</argsstring>
        <name>get_core</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="49" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1afa035757c1304cbb912560c2e7a5658c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(const NodeImp idx)</argsstring>
        <name>get_core</name>
        <param>
          <type>const <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="50" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(NodeExp *const &amp;obj, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="51" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a5d94f182b8dce5dc8e76ec30e73f8ce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
        <definition>NodeImp SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(const NodeImp idx, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type>const <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="52" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>down</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="53" column="13" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="53" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a691d643b2872c8d23c062cc050341983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query_impl</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r, const Bound bound, const Bounds... bounds)</argsstring>
        <name>query_impl</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const Bound</type>
          <declname>bound</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="72" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="72" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a801baf5cdb91eda5d2c01c39e3953a31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query_pers</definition>
        <argsstring>(const Node custom_root, const Bounds... bounds)</argsstring>
        <name>query_pers</name>
        <param>
          <type>const Node</type>
          <declname>custom_root</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="88" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a54816e3b51b87889fc2038329fed254b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const Bounds... bounds)</argsstring>
        <name>query</name>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="94" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a89a183ae20045f72d80ef9ca1627d3b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update_impl</definition>
        <argsstring>(Node idx, const ll node_l, const ll node_r, const T val, const Bound bound, const Bounds... bounds)</argsstring>
        <name>update_impl</name>
        <param>
          <type>Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const Bound</type>
          <declname>bound</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="95" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="95" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aef5bdc8818b9c0da150ad1f4d6d87360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const T val, const Bounds... bounds)</argsstring>
        <name>update</name>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" line="132" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_segment_tree_multi.hpp.rst.txt" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const ll size_arg)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>size_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="606" column="2" bodyfile="e_compiled.cpp" bodystart="606" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="613" column="2" bodyfile="e_compiled.cpp" bodystart="613" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(NodeExp *const &amp;obj)</argsstring>
        <name>get_core</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="629" column="7" bodyfile="e_compiled.cpp" bodystart="629" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(const ll idx)</argsstring>
        <name>get_core</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="630" column="7" bodyfile="e_compiled.cpp" bodystart="630" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(NodeExp *const &amp;obj, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="631" column="7" bodyfile="e_compiled.cpp" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(const ll idx, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="632" column="7" bodyfile="e_compiled.cpp" bodystart="632" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="637" column="10" bodyfile="e_compiled.cpp" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="640" column="10" bodyfile="e_compiled.cpp" bodystart="640" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>down</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="653" column="7" bodyfile="e_compiled.cpp" bodystart="653" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="673" column="4" bodyfile="e_compiled.cpp" bodystart="673" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node custom_root)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>custom_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="688" column="4" bodyfile="e_compiled.cpp" bodystart="688" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="694" column="4" bodyfile="e_compiled.cpp" bodystart="694" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val, Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="695" column="7" bodyfile="e_compiled.cpp" bodystart="695" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="727" column="7" bodyfile="e_compiled.cpp" bodystart="727" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::destroy</definition>
        <argsstring>(Node node)</argsstring>
        <name>destroy</name>
        <param>
          <type>Node</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="733" column="7" bodyfile="e_compiled.cpp" bodystart="733" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::~SegmentTree</definition>
        <argsstring>()</argsstring>
        <name>~SegmentTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="743" column="2" bodyfile="e_compiled.cpp" bodystart="743" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const ll size_arg)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>size_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="16" column="1" bodyfile="segment_tree.hpp" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="23" column="1" bodyfile="segment_tree.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(NodeExp *const &amp;obj)</argsstring>
        <name>get_core</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="37" column="6" bodyfile="segment_tree.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(const ll idx)</argsstring>
        <name>get_core</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="38" column="6" bodyfile="segment_tree.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(NodeExp *const &amp;obj, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="39" column="6" bodyfile="segment_tree.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(const ll idx, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="40" column="6" bodyfile="segment_tree.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="45" column="6" bodyfile="segment_tree.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::build</definition>
        <argsstring>(const vector&lt; T &gt; &amp;arr, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>build</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="46" column="6" bodyfile="segment_tree.hpp" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>down</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push lazy updates down </para>
        </detaileddescription>
        <inbodydescription>
<para>Push lazy update down</para>
        </inbodydescription>
        <location file="segment_tree.hpp" line="59" column="6" bodyfile="segment_tree.hpp" bodystart="59" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the sum over the intersection of [query_l, query_r) with [node_l, node_r)</para>
        </inbodydescription>
        <location file="segment_tree.hpp" line="79" column="3" bodyfile="segment_tree.hpp" bodystart="79" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r, const Node custom_root)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const Node</type>
          <declname>custom_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="94" column="3" bodyfile="segment_tree.hpp" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const ll l, const ll r)</argsstring>
        <name>query</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="100" column="3" bodyfile="segment_tree.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val, Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Update the range l to r with the update val returns the new node</para>
        </inbodydescription>
        <location file="segment_tree.hpp" line="101" column="6" bodyfile="segment_tree.hpp" bodystart="101" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const ll l, const ll r, const T val)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="133" column="6" bodyfile="segment_tree.hpp" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::destroy</definition>
        <argsstring>(Node node)</argsstring>
        <name>destroy</name>
        <param>
          <type>Node</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Deallocate memory associated with the subtree of node</para>
        </inbodydescription>
        <location file="segment_tree.hpp" line="139" column="6" bodyfile="segment_tree.hpp" bodystart="139" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::~SegmentTree</definition>
        <argsstring>()</argsstring>
        <name>~SegmentTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Free memory allocator by the segment tree. Note: does not work for persistent</para>
        </inbodydescription>
        <location file="segment_tree.hpp" line="149" column="1" bodyfile="segment_tree.hpp" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::SegmentTree</definition>
        <argsstring>(const ll size_arg)</argsstring>
        <name>SegmentTree</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>size_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="22" column="1" bodyfile="segment_tree_multi.hpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(NodeExp *const &amp;obj)</argsstring>
        <name>get_core</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="45" column="6" bodyfile="segment_tree_multi.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1afa035757c1304cbb912560c2e7a5658c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_core</definition>
        <argsstring>(const NodeImp idx)</argsstring>
        <name>get_core</name>
        <param>
          <type>const <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="46" column="6" bodyfile="segment_tree_multi.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(NodeExp *const &amp;obj, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type><ref refid="structSegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref> *const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="47" column="6" bodyfile="segment_tree_multi.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a5d94f182b8dce5dc8e76ec30e73f8ce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
        <definition>NodeImp SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::get_child</definition>
        <argsstring>(const NodeImp idx, const ll i)</argsstring>
        <name>get_child</name>
        <param>
          <type>const <ref refid="structSegmentTree_1_1NodeImp" kindref="compound">NodeImp</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="48" column="9" bodyfile="segment_tree_multi.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::down</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r)</argsstring>
        <name>down</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Push lazy update down</para>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="49" column="6" bodyfile="segment_tree_multi.hpp" bodystart="49" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a691d643b2872c8d23c062cc050341983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query_impl</definition>
        <argsstring>(const Node idx, const ll node_l, const ll node_r, const Bound bound, const Bounds... bounds)</argsstring>
        <name>query_impl</name>
        <param>
          <type>const Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const Bound</type>
          <declname>bound</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the sum over the intersection of [query_l, query_r) with [node_l, node_r)</para>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="69" column="15" bodyfile="segment_tree_multi.hpp" bodystart="69" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a801baf5cdb91eda5d2c01c39e3953a31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query_pers</definition>
        <argsstring>(const Node custom_root, const Bounds... bounds)</argsstring>
        <name>query_pers</name>
        <param>
          <type>const Node</type>
          <declname>custom_root</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="87" column="15" bodyfile="segment_tree_multi.hpp" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a54816e3b51b87889fc2038329fed254b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::query</definition>
        <argsstring>(const Bounds... bounds)</argsstring>
        <name>query</name>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="93" column="15" bodyfile="segment_tree_multi.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a89a183ae20045f72d80ef9ca1627d3b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update_impl</definition>
        <argsstring>(Node idx, const ll node_l, const ll node_r, const T val, const Bound bound, const Bounds... bounds)</argsstring>
        <name>update_impl</name>
        <param>
          <type>Node</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const Bound</type>
          <declname>bound</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Update the range l to r with the update val returns the new node</para>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="94" column="18" bodyfile="segment_tree_multi.hpp" bodystart="94" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1aef5bdc8818b9c0da150ad1f4d6d87360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Bounds</declname>
            <defname>Bounds</defname>
          </param>
        </templateparamlist>
        <type>Node</type>
        <definition>Node SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::update</definition>
        <argsstring>(const T val, const Bounds... bounds)</argsstring>
        <name>update</name>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const Bounds...</type>
          <declname>bounds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree_multi.hpp" line="134" column="18" bodyfile="segment_tree_multi.hpp" bodystart="134" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>static ll SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::mid</definition>
        <argsstring>(const ll node_l, const ll node_r, const ll i)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="645" column="15" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="645" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>static ll SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::mid</definition>
        <argsstring>(const ll node_l, const ll node_r, const ll i)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="e_compiled.cpp" line="633" column="12" bodyfile="e_compiled.cpp" bodystart="633" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>static ll SegmentTree&lt; T, Query, Update, has_lazy, has_ptr, has_pers, base &gt;::mid</definition>
        <argsstring>(const ll node_l, const ll node_r, const ll i)</argsstring>
        <name>mid</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_l</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>node_r</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="segment_tree.hpp" line="41" column="11" bodyfile="segment_tree.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic persistent explicit/implicit lazy based segment tree. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>is the value type of the segment tree </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>is the monoid for queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Update</parametername>
</parameternamelist>
<parameterdescription>
<para>is the monoid for queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Query</parametername>
</parameternamelist>
<parameterdescription>
<para>must be an additive monoid of a semiring </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Update</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a multiplicative monoid of a semiring </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>is the segment tree base. Default is 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="616" column="53" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="616" bodyend="767"/>
    <listofallmembers>
      <member refid="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1adf84a3e42be8f05d4f6c1dacd0f8fc8c" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1aabaaa7303a83cf52dc1a8def8abfe9f0" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>build</name></member>
      <member refid="classSegmentTree_1a0d4f61c8a7e6932de1b352fa858b76d3" prot="private" virt="non-virtual"><scope>SegmentTree</scope><name>ceil_size</name></member>
      <member refid="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>destroy</name></member>
      <member refid="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>destroy</name></member>
      <member refid="classSegmentTree_1aa065cdae0467e72ec4862dbbb3b7b8d3" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>destroy</name></member>
      <member refid="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>down</name></member>
      <member refid="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>down</name></member>
      <member refid="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>down</name></member>
      <member refid="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>down</name></member>
      <member refid="classSegmentTree_1a4fcb8374e3b27c774bb7554133353a4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>down</name></member>
      <member refid="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a5d94f182b8dce5dc8e76ec30e73f8ce7" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a251001698b3243d2adadc13c84b10458" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a1eba29efb9fb95e7559e4480f52838cc" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a5d94f182b8dce5dc8e76ec30e73f8ce7" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_child</name></member>
      <member refid="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1afa035757c1304cbb912560c2e7a5658c" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1ac5881ec5bcb5658a80ecca16660503cd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1a49a185b358936de0e027b42bb32017d4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1afa035757c1304cbb912560c2e7a5658c" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>get_core</name></member>
      <member refid="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>mid</name></member>
      <member refid="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>mid</name></member>
      <member refid="classSegmentTree_1a60de928bef44ff17754a2a7c8c39f39d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>mid</name></member>
      <member refid="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>Node</name></member>
      <member refid="classSegmentTree_1afba544d564a42497c23bb83786c8530f" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>Node</name></member>
      <member refid="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>Node</name></member>
      <member refid="classSegmentTree_1a1737e3385e2a9842bb67546ff7960acd" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>Node</name></member>
      <member refid="classSegmentTree_1afba544d564a42497c23bb83786c8530f" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>Node</name></member>
      <member refid="classSegmentTree_1a106a0267ecd0a253f790f606a10c89b7" prot="private" virt="non-virtual"><scope>SegmentTree</scope><name>nodes</name></member>
      <member refid="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a54816e3b51b87889fc2038329fed254b" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1abc6c56bef599124548c2ed1c90d6e87e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a9f9282f29c2d91d1ef3989ea7384892b" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a15af5893144423311e3c41a53de3d59e" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a54816e3b51b87889fc2038329fed254b" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query</name></member>
      <member refid="classSegmentTree_1a691d643b2872c8d23c062cc050341983" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query_impl</name></member>
      <member refid="classSegmentTree_1a691d643b2872c8d23c062cc050341983" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query_impl</name></member>
      <member refid="classSegmentTree_1a801baf5cdb91eda5d2c01c39e3953a31" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query_pers</name></member>
      <member refid="classSegmentTree_1a801baf5cdb91eda5d2c01c39e3953a31" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>query_pers</name></member>
      <member refid="classSegmentTree_1a9e69c2fd14687cc30d039da9abc176a2" prot="private" virt="non-virtual"><scope>SegmentTree</scope><name>root</name></member>
      <member refid="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1a11490d67106ccf45a9474bcdd09510db" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1adb7a7bf899bb690d84283257baa678c4" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>SegmentTree</name></member>
      <member refid="classSegmentTree_1a8cf63359e5492051a7e7953793ea77eb" prot="private" virt="non-virtual"><scope>SegmentTree</scope><name>size_</name></member>
      <member refid="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1aef5bdc8818b9c0da150ad1f4d6d87360" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a00e7570a50ddee7944c35de35d8924ff" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a6565444d7616870fd1d4c36028ed0c4d" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1aef5bdc8818b9c0da150ad1f4d6d87360" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update</name></member>
      <member refid="classSegmentTree_1a89a183ae20045f72d80ef9ca1627d3b9" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update_impl</name></member>
      <member refid="classSegmentTree_1a89a183ae20045f72d80ef9ca1627d3b9" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>update_impl</name></member>
      <member refid="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>~SegmentTree</name></member>
      <member refid="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>~SegmentTree</name></member>
      <member refid="classSegmentTree_1a334b6dc9e4d6a407c04c89f4c9bca7cb" prot="public" virt="non-virtual"><scope>SegmentTree</scope><name>~SegmentTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
