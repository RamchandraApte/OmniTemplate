<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__flow_8hpp" kind="file" language="C++">
    <compoundname>test_flow.hpp</compoundname>
    <includes refid="flow_8hpp" local="yes">flow.hpp</includes>
    <includedby refid="graph_2all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/all.hpp</includedby>
    <includedby refid="test__all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/test_all.hpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bits/stdc++.h</label>
      </node>
      <node id="14">
        <label>polynomial.hpp</label>
        <link refid="polynomial_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algebra/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>experimental/source_location</label>
      </node>
      <node id="10">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/iterator</label>
      </node>
      <node id="4">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/test_flow.hpp</label>
        <link refid="test__flow_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>flow.hpp</label>
        <link refid="flow_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/test_flow.hpp</label>
        <link refid="test__flow_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceflow">flow</innernamespace>
    <innernamespace refid="namespaceflow_1_1test">flow::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="flow_8hpp" kindref="compound">flow.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespaceflow_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow_1_1test" kindref="compound">flow::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;algo)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(3,<sp/>3);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(4,<sp/>4);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][2]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][3]<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(4,<sp/>4);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][1]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[1][3]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[0][2]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[2][1]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30" refid="namespaceflow_1_1test_1a66e8ca51e96f06ce0369f386cab9ac25" refkind="member"><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow_1_1test_1a66e8ca51e96f06ce0369f386cab9ac25" kindref="member">random_flow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>2<sp/>+<sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>30);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i2,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j2,<sp/>i2<sp/>+<sp/>1,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>=<sp/>i2,<sp/>j<sp/>=<sp/>j2;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(i,<sp/>j);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>[i][j]<sp/>=<sp/>1<sp/>+<sp/>(<ref refid="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" kindref="member">reng</ref>()<sp/>%<sp/>30);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44" refid="namespaceflow_1_1test_1ae4d5bb4d481a3e83a36a3797ff8f782c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func2&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1ae4d5bb4d481a3e83a36a3797ff8f782c" kindref="member">test_compare_flow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func1<sp/>&amp;algo1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func2<sp/>&amp;algo2,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n_it<sp/>=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>n_it)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceflow" kindref="compound">flow</ref><sp/>=<sp/><ref refid="namespaceflow_1_1test_1a66e8ca51e96f06ce0369f386cab9ac25" kindref="member">random_flow</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>generated<sp/>flow<sp/>diff?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo1(<ref refid="namespaceflow" kindref="compound">flow</ref>))<sp/>==<sp/><ref refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" kindref="member">total_flow</ref>(algo2(<ref refid="namespaceflow" kindref="compound">flow</ref>)));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51" refid="namespaceflow_1_1test_1ae0cbf7db821b857cafff43a95f252818" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflow_1_1test_1ae0cbf7db821b857cafff43a95f252818" kindref="member">test_flow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(<ref refid="namespaceflow_1a724fa814b55772a3c6ba9254b8403e70" kindref="member">edmond_karp</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1a736d0df4682738fa9d4502d37fda8352" kindref="member">test_flow_algo</ref>(<ref refid="namespaceflow_1ab1878f3966f553be99c58d55aa46709e" kindref="member">dinic</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceflow_1_1test_1ae4d5bb4d481a3e83a36a3797ff8f782c" kindref="member">test_compare_flow</ref>(<ref refid="namespaceflow_1a724fa814b55772a3c6ba9254b8403e70" kindref="member">edmond_karp</ref>,<sp/><ref refid="namespaceflow_1ab1878f3966f553be99c58d55aa46709e" kindref="member">dinic</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>flow::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflow_1_1test" kindref="compound">flow::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/graph/test_flow.hpp"/>
  </compounddef>
</doxygen>
