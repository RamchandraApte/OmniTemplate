<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__operations_8hpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_operations.hpp.rst.txt</compoundname>
    <includes refid="range_8hpp" local="yes">range.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt</label>
        <link refid="program__listing__file__operations_8hpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structMax" prot="public">Max</innerclass>
    <innerclass refid="structMin" prot="public">Min</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="program__listing__file__operations_8hpp_8rst_8txt_1a2e3fb564092d70d9bee87555035d8711" prot="public" static="no">
        <name>aug</name>
        <param><defname>op</defname></param>
        <initializer>       template &lt;typename T1, typename T2&gt;                                    \
       auto operator op##=(T1 &amp;a, const T2 &amp;b) {                              \
           return a = a op b;                                             \
       }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="16" column="12"/>
      </memberdef>
      <memberdef kind="define" id="program__listing__file__operations_8hpp_8rst_8txt_1afcd538daef660984ecb8abf34697904b" prot="public" static="no">
        <name>ret</name>
        <param><defname>x</defname></param>
        <param><defname>id</defname></param>
        <initializer>       if (f == static_cast&lt;decltype(f)&gt;(x)) {                                \
           return id;                                                     \
       }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="96" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__operations_8hpp_8rst_8txt_1a7e3e869caf82c4587ed958dfaf6aeaf9" prot="public" static="no" mutable="no">
        <type>_program_listing_file_operations</type>
        <definition>_program_listing_file_operations hpp</definition>
        <argsstring></argsstring>
        <name>hpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="2" column="34" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__operations_8hpp_8rst_8txt_1ade36003886c25cb047fb702e2ccfc073" prot="public" static="no" mutable="no">
        <type>const unordered_set&lt; T &gt; &amp;</type>
        <definition>vector&lt;T&gt; b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <initializer>{
       unordered_set&lt;T&gt; ret</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="67" column="36" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__operations_8hpp_8rst_8txt_1a339672ff94e6199019102f50d317c3d7" prot="public" static="no" mutable="no">
        <type>const unordered_set&lt; T &gt; unordered_set&lt; T &gt; &amp;</type>
        <definition>return ret</definition>
        <argsstring></argsstring>
        <name>ret</name>
        <initializer>{
       for (const auto &amp;x : a) {
           if (!b.count(x)) {
               ret.insert(x);
           }
       }
       return ret</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="68" column="28" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__operations_8hpp_8rst_8txt_1a66b97d6dee15f33d7b6731ccf48092cf" prot="public" static="no" mutable="no">
        <type>return</type>
        <definition>return c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="89" column="15" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ab3f40c25c4fe1dd034a65cb314e4838e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_program_listing_file_operations T2 auto</type>
        <definition>_program_listing_file_operations T2 auto operator+=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="21" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a566f5b78944cfa1ff2b470ecd0522ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator-=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="22" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ac66e5f2d4fb3a7d5076a44e419736713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator*=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="23" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a35c5f7ec97de94c93f2301e16d3f7efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator/=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="24" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a4cb6b7e98aadd3fa7ffc759c5e14596d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_floating_point_v&lt; T &gt;, T &gt;</type>
        <definition>enable_if_t&lt;is_floating_point_v&lt;T&gt;, T&gt; invert</definition>
        <argsstring>(multiplies&lt;&gt;, const T &amp;x)</argsstring>
        <name>invert</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="25" column="28" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ae9e59a2d15287021fd21d14d2eb206c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Group</type>
          </param>
        </templateparamlist>
        <type>Group</type>
        <definition>Group operator/</definition>
        <argsstring>(Group const &amp;a, Group const &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>Group const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Group const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="26" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ab6822e2f5527212c7db6dd31be7f3ba6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator-</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="28" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a98ed0803268ba29fcc8977206b177923" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator!=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="32" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a1297749985d820e08c6c88a285dc80eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="35" column="18" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ae3edbf9ffcbf3c8b40d15f6666442cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="38" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ad8f1353b1f5665443a78d860006e9920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="41" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1af7daaa583bad5f3001ffa1144d9bca37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tm</definition>
        <argsstring>() using uset</argsstring>
        <name>tm</name>
        <initializer>= T(*)(T, T)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="85" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_range.hpp.rst.txt" bodystart="52" bodyend="60" declfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" declline="95" declcolumn="4"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a87d3fb5fed45f1a54221f7a8705addb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>um</type>
        <definition>um operator+</definition>
        <argsstring>(um a, um const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>um</type>
          <declname>a</declname>
        </param>
        <param>
          <type>um const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="45" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a8acbbd6e305005c27020dfb9bbe27d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator|</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="51" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a9e98ecb7739ca6a5c0069a9a26d2a731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&amp;</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="57" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="57" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a112457f0dec614c365300860421202c0" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type></type>
        <definition>tm</definition>
        <argsstring>() auto sub_set(unordered_set&lt; T &gt; const &amp;a</argsstring>
        <name>tm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="67" column="4"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a989ec0363b5c2816082124a9b0cd2d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>return</type>
        <definition>return sub_set</definition>
        <argsstring>(a, b, ret)</argsstring>
        <name>sub_set</name>
        <param>
          <type>a</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <param>
          <type>ret</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="78" column="15" declfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" declline="78" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a92a5a5b8a2fe98f951ba55f5412cbc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sub_set</definition>
        <argsstring>(b, a, ret)</argsstring>
        <name>sub_set</name>
        <param>
          <type>b</type>
        </param>
        <param>
          <type>a</type>
        </param>
        <param>
          <type>ret</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="82" column="8" declfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" declline="82" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ac748aa2982293b2480271d6f92be38e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; c</definition>
        <argsstring>(a.size())</argsstring>
        <name>c</name>
        <param>
          <type>a.</type>
          <declname>size</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="87" column="15" declfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" declline="87" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a915663194fec79c061edfaea61707bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fo</definition>
        <argsstring>(i, a.size())</argsstring>
        <name>fo</name>
        <param>
          <type>i</type>
        </param>
        <param>
          <type>a.</type>
          <declname>size</declname>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="88" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1af877591533298d5fba3df85680cabb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator+</definition>
        <argsstring>(Iterator it, enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, ll &gt; n)</argsstring>
        <name>operator+</name>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="91" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1ac969ae49524a67aba9be0f061955ef23" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structll" kindref="compound">ll</ref></type>
        <definition>constexpr ll identity</definition>
        <argsstring>(bin_op&lt; ll const &amp; &gt; const &amp;f)</argsstring>
        <name>identity</name>
        <param>
          <type>bin_op&lt; <ref refid="structll" kindref="compound">ll</ref> const &amp; &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="100" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a1927210d55cc1384803f4a609d7174ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structll" kindref="compound">ll</ref></type>
        <definition>constexpr ll identity</definition>
        <argsstring>(bin_op&lt; ll &gt; const &amp;f)</argsstring>
        <name>identity</name>
        <param>
          <type>bin_op&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="105" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a09af32a8d21cf0ca5017ce40502a2a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(plus&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>plus&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="109" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1acc5a0ae67ef6a3bd347c85cab4a15313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(multiplies&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="110" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1a19000e539a20acfdcd7e8fdce1d970f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Max, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="structMax" kindref="compound">Max</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="114" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__operations_8hpp_8rst_8txt_1aa9ba94adf14b5b5566e3a750fa5255b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Min, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="structMin" kindref="compound">Min</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" line="118" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt" bodystart="118" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_operations.hpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/>operations.hpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">=======================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_operations.hpp&gt;`<sp/>(``operations.hpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;range.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>operations<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/>#define<sp/>aug(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>op##=(T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>a<sp/>=<sp/>a<sp/>op<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>aug(+);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>aug(-);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>aug(*);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>aug(/);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>enable_if_t&lt;is_floating_point_v&lt;T&gt;,<sp/>T&gt;<sp/>invert(multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>/<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Group&gt;<sp/>Group<sp/>operator/(Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>invert(multiplies{},<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>-b;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(b<sp/>&lt;<sp/>a);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;=<sp/>a;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;<sp/>a;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>using<sp/>uset<sp/>=<sp/>unordered_set&lt;T&gt;;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>um<sp/>operator+(um<sp/>a,<sp/>um<sp/>const<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[p.first]<sp/>+=<sp/>p.second;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>bg;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(al(sm));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&amp;(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>sm)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bg.count(x))<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>auto<sp/>sub_set(unordered_set&lt;T&gt;<sp/>const<sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/>const<sp/>&amp;b,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>&amp;ret)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b.count(x))<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>auto<sp/>operator-(unordered_set&lt;T&gt;<sp/>const<sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/>const<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_set(a,<sp/>b,<sp/>ret);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>auto<sp/>operator^(unordered_set&lt;T&gt;<sp/>const<sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/>const<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_set(b,<sp/>a,<sp/>ret);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>auto<sp/>operator*(vector&lt;T&gt;<sp/>a,<sp/>vector&lt;T&gt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>c(a.size());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fo(i,<sp/>a.size())<sp/>{<sp/>c[i]<sp/>=<sp/>a[i]<sp/>*<sp/>b[i];<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+(Iterator<sp/>it,<sp/>enable_if_t&lt;!is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator_traits&lt;decltype(it)&gt;::iterator_category,<sp/>random_access_iterator_tag&gt;::value,<sp/><ref refid="structll" kindref="compound">ll</ref>&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance(it,<sp/>n);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>using<sp/>bin_op<sp/>=<sp/>T(*)(T,<sp/>T);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="preprocessor">#define<sp/>ret(x,<sp/>id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(f<sp/>==<sp/>static_cast&lt;decltype(f)&gt;(x))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>id;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>constexpr<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(bin_op&lt;ll<sp/>const<sp/>&amp;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(max&lt;ll&gt;,<sp/>-inf);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(min&lt;ll&gt;,<sp/>inf);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>constexpr<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(bin_op&lt;ll&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret(gcd&lt;ll&gt;,<sp/>0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(plus&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(multiplies&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMax" kindref="compound">Max</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(T<sp/>a,<sp/>T<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(<ref refid="structMax" kindref="compound">Max</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-inf;<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMin" kindref="compound">Min</ref><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(T<sp/>a,<sp/>T<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(<ref refid="structMin" kindref="compound">Min</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//}<sp/>//<sp/>namespace<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>namespace<sp/>operations;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_operations.hpp.rst.txt"/>
  </compounddef>
</doxygen>
