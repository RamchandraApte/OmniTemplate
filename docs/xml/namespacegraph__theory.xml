<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacegraph__theory" kind="namespace" language="C++">
    <compoundname>graph_theory</compoundname>
    <innerclass refid="structgraph__theory_1_1BFS" prot="public">graph_theory::BFS</innerclass>
    <innerclass refid="structgraph__theory_1_1DFS" prot="public">graph_theory::DFS</innerclass>
    <innerclass refid="structgraph__theory_1_1edge" prot="public">graph_theory::edge</innerclass>
    <innerclass refid="structgraph__theory_1_1GeneralSearch" prot="public">graph_theory::GeneralSearch</innerclass>
    <innerclass refid="structgraph__theory_1_1GraphAdj" prot="public">graph_theory::GraphAdj</innerclass>
    <innernamespace refid="namespacegraph__theory_1_1bipartite">graph_theory::bipartite</innernamespace>
    <innernamespace refid="namespacegraph__theory_1_1test">graph_theory::test</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegraph__theory_1adf2ab789ab7321886b5f11d88a9e7fe6" prot="public" static="no">
        <type>vector&lt; vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt;</type>
        <definition>using graph_theory::GraphAdj_Base = typedef vector&lt;vector&lt;ll&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>GraphAdj_Base</name>
        <briefdescription>
<para>Adjacency-list representation of graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="6" column="1" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" prot="public" static="no">
        <type>vector&lt; vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt;</type>
        <definition>using graph_theory::GraphAdj = typedef vector&lt;vector&lt;ll&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>GraphAdj</name>
        <briefdescription>
<para>Adjacency-list representation of graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2274" column="1" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2274" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegraph__theory_1a4dbe54e2a6c2e93add66dc32c647c876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graph_theory::operator&lt;</definition>
        <argsstring>(edge const &amp;a, edge const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compare the edges by weight, with ties compared by a and b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="30" column="1" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="30" bodyend="30"/>
        <references refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" compoundref="core_8hpp" startline="27" endline="27">graph_theory::edge::to_tuple</references>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a9112d064de59f0aa5737bc1d90e9bf32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graph_theory::operator==</definition>
        <argsstring>(edge const &amp;a, edge const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="31" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="31" bodyend="31"/>
        <references refid="structgraph__theory_1_1edge_1ac97b1e4068cb11d040a30689327e322f" compoundref="core_8hpp" startline="27" endline="27">graph_theory::edge::to_tuple</references>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1ac98f689dd795d68d4d96aabe64b5de71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; graph_theory::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, edge const &amp;e)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Print the edge. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="33" column="13" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="33" bodyend="35"/>
        <references refid="structgraph__theory_1_1edge_1ae8364c3bd91a36e17fc27897682b793b" compoundref="core_8hpp" startline="26">graph_theory::edge::a</references>
        <references refid="structgraph__theory_1_1edge_1a57daf64fddd9cbc445c13c4a828a2a06" compoundref="core_8hpp" startline="26">graph_theory::edge::b</references>
        <references refid="structgraph__theory_1_1edge_1afd1df0689bec85ffbdb52d3735a2edc6" compoundref="core_8hpp" startline="26">graph_theory::edge::weight</references>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a934a24e545f14f58f25359de518e8d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::shortest_dist</definition>
        <argsstring>(vector&lt; vector&lt; pr &gt;&gt; graph, ll source)</argsstring>
        <name>shortest_dist</name>
        <param>
          <type>vector&lt; vector&lt; <ref refid="core_2all_8hpp_1a58e2677d80a09b5be0f0e56ef70d4507" kindref="member">pr</ref> &gt;&gt;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Adds edge <formula id="22">$u \leftrightarrow v$</formula> to graph graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given an adjacency-list of a graph, returns the shortest distance to each vertex from the source. Algorithm: Dijkstra</para>
<para>Given an adjacency-list of a graph, returns the shortest distance to each vertex from the source. Algorithm: Dijkstra</para>
<para>Given an adjacency-list of a graph, returns the shortest distance to each vertex from the source. Algorithm: Dijkstra</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="37" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="37" bodyend="63"/>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="36">fo</references>
        <references refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" compoundref="core_2all_8hpp" startline="95">inf</references>
        <referencedby refid="namespacegraph__theory_1_1test_1a85895e3668b3921ec39edbbe8ab3cb37" compoundref="test__all_8hpp" startline="25" endline="41">graph_theory::test::test_shortest_dist</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1ae6ad3f54671798a8d8f3c4253ea83db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::shortest_dist</definition>
        <argsstring>(matrix&lt; ll &gt; const &amp;graph)</argsstring>
        <name>shortest_dist</name>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Given a 2D matrix of distances for each edge in g, returns a 2D matrix of the shortest distances. </para>
        </briefdescription>
        <detaileddescription>
<para>We do not consider paths of length zero. Algorithm: Floyd-Warshall </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="68" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="68" bodyend="82"/>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="36">fo</references>
        <references refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" compoundref="linear__algebra_8hpp" startline="37" endline="37">linear_algebra::matrix&lt; T &gt;::is_square</references>
        <references refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" compoundref="linear__algebra_8hpp" startline="11">linear_algebra::matrix&lt; T &gt;::rows_n</references>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a43f33335bd84b91252969b3b17f8b09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::mst</definition>
        <argsstring>(vector&lt; edge &gt; edges, const ll n)</argsstring>
        <name>mst</name>
        <param>
          <type>vector&lt; <ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> &gt;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum spanning forest of the set of edges es, as a set of edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="84" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="84" bodyend="95"/>
        <references refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="core_2all_8hpp" startline="38">al</references>
        <referencedby refid="namespacegraph__theory_1_1test_1ab6022fd4e376f6aa5e2fe088ff623d57" compoundref="test__all_8hpp" startline="42" endline="47">graph_theory::test::test_mst</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a9d6eaad6577fb0289aee53b10fd4a260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Searcher</type>
          </param>
        </templateparamlist>
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>vector&lt; ll &gt; graph_theory::get_size</definition>
        <argsstring>(const Searcher &amp;search)</argsstring>
        <name>get_size</name>
        <param>
          <type>const Searcher &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
<para>Given a searcher object, returns an array containing the size of each subtree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="123" column="20" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="123" bodyend="131"/>
        <references refid="range_8hpp_1a438bd5fc0a79e42a6a2abb632203f925" compoundref="range_8hpp" startline="57" endline="60">rev</references>
        <references refid="namespacetree_1ae464c2bd0d1e78d727832472c579c2f6" compoundref="lca_8hpp" startline="4">tree::sz</references>
        <referencedby refid="centroid_8hpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="centroid_8hpp" startline="6" endline="49">centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a7ffa7c1e75caecd92d5c385d41eb313d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>graph_theory::DFS</definition>
        <argsstring>(Graph) -&gt; DFS&lt; Graph &gt;</argsstring>
        <name>DFS</name>
        <param>
          <type>Graph</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="148" column="13" declfile="/home/ram/OmniTemplate/src/graph/core.hpp" declline="148" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>graph_theory::BFS</definition>
        <argsstring>(Graph) -&gt; BFS&lt; Graph &gt;</argsstring>
        <name>BFS</name>
        <param>
          <type>Graph</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="171" column="13" declfile="/home/ram/OmniTemplate/src/graph/core.hpp" declline="171" declcolumn="13"/>
        <referencedby refid="tree_8hpp_1a202200d4d06aea05b7638be837590286" compoundref="tree_8hpp" startline="5" endline="15">tree_diameter</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::trans</definition>
        <argsstring>(const GraphAdj &amp;graph)</argsstring>
        <name>trans</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Returns the transpose graph of directed graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="173" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="173" bodyend="181"/>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="36">fo</references>
        <referencedby refid="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" compoundref="core_8hpp" startline="184" endline="202">scc</referencedby>
        <referencedby refid="namespacegraph__theory_1_1test_1a39d1cd9f78ffe067260878347c9e178d" compoundref="test__all_8hpp" startline="20" endline="24">graph_theory::test::test_trans</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1afcb5da494d1b16139a1be66e66543043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::scc</definition>
        <argsstring>(const GraphAdj &amp;graph)</argsstring>
        <name>scc</name>
        <param>
          <type>const <ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
<para>Returns the strongly connected component for each vertex of the graph g. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="184" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="184" bodyend="202"/>
        <references refid="namespacegraph__theory_1a5250f51004add91c3b7f66fe5a030a2f" compoundref="core_8hpp" startline="173" endline="181">trans</references>
        <referencedby refid="namespacesat2_1a7e3bde170b608f8eb02f83eaf34073e3" compoundref="2sat_8hpp" startline="6" endline="31">sat2::sat2</referencedby>
        <referencedby refid="namespacegraph__theory_1_1test_1a12ae68923e728fc307296eb6e6a56466" compoundref="test__all_8hpp" startline="48" endline="61">graph_theory::test::test_scc</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1aa68bcc78bd4d2bbd33ce272bbb2d5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::graph_in</definition>
        <argsstring>(GraphAdj &amp;g, ll m)</argsstring>
        <name>graph_in</name>
        <param>
          <type><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Reads 1-indexed list of edges into graph g. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Reads 1-indexed list of edges into graph g</para>
<para>Reads 1-indexed list of edges into graph g</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/core.hpp" line="205" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/core.hpp" bodystart="205" bodyend="207"/>
        <references refid="structgraph__theory_1_1GraphAdj_1a63eca6a610102ccb3d716c5a9ac88f08" compoundref="core_8hpp" startline="13" endline="22">graph_theory::GraphAdj::read</references>
      </memberdef>
      <memberdef kind="function" id="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::add_edge</definition>
        <argsstring>(GraphAdj &amp;graph, ll u, ll v)</argsstring>
        <name>add_edge</name>
        <param>
          <type><ref refid="structgraph__theory_1_1GraphAdj" kindref="compound">GraphAdj</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Adds edge <formula id="22">$u \leftrightarrow v$</formula> to graph graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/test/test_compiled.cpp" line="2288" column="6" bodyfile="/home/ram/OmniTemplate/src/test/test_compiled.cpp" bodystart="2288" bodyend="2291"/>
        <referencedby refid="test__compiled_8cpp_1a789f23d7fc22d09960694892eeb41223" compoundref="test__compiled_8cpp" startline="2557" endline="2609">biconnected_ear</referencedby>
        <referencedby refid="test__compiled_8cpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__compiled_8cpp" startline="2633" endline="2722">test_biconnected</referencedby>
        <referencedby refid="test__compiled_8cpp_1a1f3c802afdfa77c5389c557f5284a486" compoundref="test__compiled_8cpp" startline="3337" endline="3349">test_centroid_decomp</referencedby>
        <referencedby refid="namespacegraph__draw_1_1test_1a037737d6386f4405a42dc842eb4d7436" compoundref="test__compiled_8cpp" startline="4481" endline="4490">graph_draw::test::test_graph_draw</referencedby>
        <referencedby refid="test__compiled_8cpp_1ac5d2f097a07285733e610a52b16e790b" compoundref="test__compiled_8cpp" startline="3022" endline="3038">test_graph_view</referencedby>
        <referencedby refid="test__compiled_8cpp_1a3723e2fdc7693c4777b321d0619f189d" compoundref="test__compiled_8cpp" startline="3116" endline="3138">test_tree_diameter</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ram/OmniTemplate/src/graph/bipartite.hpp" line="4" column="1"/>
  </compounddef>
</doxygen>
