<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacegraph__theory" kind="namespace" language="C++">
    <compoundname>graph_theory</compoundname>
    <innerclass refid="structgraph__theory_1_1bfs" prot="public">graph_theory::bfs</innerclass>
    <innerclass refid="structgraph__theory_1_1dfs" prot="public">graph_theory::dfs</innerclass>
    <innerclass refid="structgraph__theory_1_1edge" prot="public">graph_theory::edge</innerclass>
    <innerclass refid="structgraph__theory_1_1gsearch" prot="public">graph_theory::gsearch</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d__compiled_8cpp_1a4dbe54e2a6c2e93add66dc32c647c876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graph_theory::operator&lt;</definition>
        <argsstring>(edge const &amp;a, edge const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Compare the edges by weight, with ties compared by a and b</para>
<para>Compare the edges by weight, with ties compared by a and b</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="957" column="1" bodyfile="d_compiled.cpp" bodystart="957" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a9112d064de59f0aa5737bc1d90e9bf32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graph_theory::operator==</definition>
        <argsstring>(edge const &amp;a, edge const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="961" column="6" bodyfile="d_compiled.cpp" bodystart="961" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ac98f689dd795d68d4d96aabe64b5de71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; graph_theory::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, edge const &amp;e)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Print the edge</para>
<para>Print the edge</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="964" column="13" bodyfile="d_compiled.cpp" bodystart="964" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a7baea0d3e99864e50ed82e6e93a88eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::add_edge</definition>
        <argsstring>(vector&lt; vl &gt; &amp;graph, ll u, ll v)</argsstring>
        <name>add_edge</name>
        <param>
          <type>vector&lt; vl &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Adds edge <formula id="9">$u \leftrightarrow v$</formula> to graph graph</para>
<para>Adds edge <formula id="9">$u \leftrightarrow v$</formula> to graph graph</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="968" column="6" bodyfile="d_compiled.cpp" bodystart="968" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a934a24e545f14f58f25359de518e8d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::shortest_dist</definition>
        <argsstring>(vector&lt; vector&lt; pr &gt;&gt; graph, ll source)</argsstring>
        <name>shortest_dist</name>
        <param>
          <type>vector&lt; vector&lt; pr &gt;&gt;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given an adjacency-list of a graph, returns the shortest distance to each vertex from the source. Algorithm: Dijkstra</para>
<para>Given an adjacency-list of a graph, returns the shortest distance to each vertex from the source. Algorithm: Dijkstra</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="973" column="6" bodyfile="d_compiled.cpp" bodystart="973" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ae6ad3f54671798a8d8f3c4253ea83db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::shortest_dist</definition>
        <argsstring>(matrix&lt; ll &gt; const &amp;graph)</argsstring>
        <name>shortest_dist</name>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; const &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a 2D matrix of distances for each edge in g, returns a 2D matrix of the shortest distances. We do not consider paths of length zero. Algorithm: Floyd-Warshall </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1003" column="6" bodyfile="d_compiled.cpp" bodystart="1003" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ae36eab02a5882508df9bcd38fed73b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_shortest_dist</definition>
        <argsstring>()</argsstring>
        <name>test_shortest_dist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1017" column="6" bodyfile="d_compiled.cpp" bodystart="1017" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a43f33335bd84b91252969b3b17f8b09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::mst</definition>
        <argsstring>(vector&lt; edge &gt; edges, const ll n)</argsstring>
        <name>mst</name>
        <param>
          <type>vector&lt; <ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref> &gt;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the minimum spanning forest of the set of edges es, as a set of edges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1035" column="6" bodyfile="d_compiled.cpp" bodystart="1035" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a84ac78302ab327b1a880654a74f696b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_mst</definition>
        <argsstring>()</argsstring>
        <name>test_mst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1047" column="6" bodyfile="d_compiled.cpp" bodystart="1047" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a9d6eaad6577fb0289aee53b10fd4a260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Searcher</type>
          </param>
        </templateparamlist>
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>vector&lt; ll &gt; graph_theory::get_size</definition>
        <argsstring>(const Searcher &amp;search)</argsstring>
        <name>get_size</name>
        <param>
          <type>const Searcher &amp;</type>
          <declname>search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a searcher object, returns an array containing the size of each subtree </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1081" column="20" bodyfile="d_compiled.cpp" bodystart="1081" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a2aea60be1c24dc82badd96e40923038b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_bfs</definition>
        <argsstring>()</argsstring>
        <name>test_bfs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1126" column="6" bodyfile="d_compiled.cpp" bodystart="1126" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1af33d0502161df2d1b82be4b1e8dcaa13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::trans</definition>
        <argsstring>(const vector&lt; vl &gt; &amp;graph)</argsstring>
        <name>trans</name>
        <param>
          <type>const vector&lt; vl &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the transpose graph of directed graph </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1138" column="6" bodyfile="d_compiled.cpp" bodystart="1138" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a734cad165e9d3343718dea3cab4febc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_trans</definition>
        <argsstring>()</argsstring>
        <name>test_trans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1148" column="6" bodyfile="d_compiled.cpp" bodystart="1148" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1abf42c204d44caae5b7ea48d8261dfd9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::scc</definition>
        <argsstring>(const vector&lt; vl &gt; &amp;graph)</argsstring>
        <name>scc</name>
        <param>
          <type>const vector&lt; vl &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the strongly connected component for each vertex of the graph g.</para>
<para>Returns the strongly connected component for each vertex of the graph g.</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1153" column="6" bodyfile="d_compiled.cpp" bodystart="1153" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a67e1bb0651ba8b410525f0a06c154f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_scc</definition>
        <argsstring>()</argsstring>
        <name>test_scc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1174" column="6" bodyfile="d_compiled.cpp" bodystart="1174" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1abc2dae699efd9d44942e1a27d801d9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::bipartite</definition>
        <argsstring>(const vector&lt; vl &gt; &amp;graph)</argsstring>
        <name>bipartite</name>
        <param>
          <type>const vector&lt; vl &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns a bipartite coloring if possible</para>
<para>Returns a bipartite coloring if possible</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1188" column="6" bodyfile="d_compiled.cpp" bodystart="1188" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1aeebcf017acc0533f31c46d62d0cebe72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_bipartite</definition>
        <argsstring>()</argsstring>
        <name>test_bipartite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1207" column="6" bodyfile="d_compiled.cpp" bodystart="1207" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a178da2acee19545ba0378a75ffea2fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::max_match</definition>
        <argsstring>(const vector&lt; vl &gt; &amp;graph)</argsstring>
        <name>max_match</name>
        <param>
          <type>const vector&lt; vl &gt; &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a maximum matching of bipartite graph using the Hopcroft-Karp algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1226" column="6" bodyfile="d_compiled.cpp" bodystart="1226" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a2c4ec732b90bd1beb930f2dc68e47294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll graph_theory::matching_size</definition>
        <argsstring>(const vl &amp;matching)</argsstring>
        <name>matching_size</name>
        <param>
          <type>const vl &amp;</type>
          <declname>matching</declname>
        </param>
        <briefdescription>
<para>Returns the size of the matching. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matching</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a a vector where idx is matched with matching[idx], or not matched if matching[idx] = -1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1287" column="4" bodyfile="d_compiled.cpp" bodystart="1287" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1abbe5b980d32347acbd0811f9c189d097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_max_match</definition>
        <argsstring>()</argsstring>
        <name>test_max_match</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1290" column="6" bodyfile="d_compiled.cpp" bodystart="1290" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1af419fd09d176890f30126a49064cbd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_add_edge</definition>
        <argsstring>()</argsstring>
        <name>test_add_edge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1353" column="6" bodyfile="d_compiled.cpp" bodystart="1353" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a305e818c99814cd465186b57c0a73f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto graph_theory::graph_in</definition>
        <argsstring>(vector&lt; vl &gt; &amp;g, ll m)</argsstring>
        <name>graph_in</name>
        <param>
          <type>vector&lt; vl &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Reads 1-indexed list of edges into graph g</para>
<para>Reads 1-indexed list of edges into graph g</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1365" column="6" bodyfile="d_compiled.cpp" bodystart="1365" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a9361a6539ccda780bb95468f68d876f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; array&lt; <ref refid="structll" kindref="compound">ll</ref>, 2 &gt;, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>pair&lt; array&lt; ll, 2 &gt;, ll &gt; graph_theory::tree_diameter</definition>
        <argsstring>(const vector&lt; vector&lt; ll &gt;&gt; &amp;g)</argsstring>
        <name>tree_diameter</name>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;&gt; &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns diameter and center of a tree :param: g</para>
<para>Returns diameter and center of a tree :param: g</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1377" column="6" bodyfile="d_compiled.cpp" bodystart="1377" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1aa96a8c7fd5bf97d564842e0a0312db5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_tree_diameter</definition>
        <argsstring>()</argsstring>
        <name>test_tree_diameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1389" column="6" bodyfile="d_compiled.cpp" bodystart="1389" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1aa2b38897f4c429325f0eb73b1137755a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graph_theory::test_graph_theory</definition>
        <argsstring>()</argsstring>
        <name>test_graph_theory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="1412" column="6" bodyfile="d_compiled.cpp" bodystart="1412" bodyend="1422"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="d_compiled.cpp" line="951" column="22"/>
  </compounddef>
</doxygen>
