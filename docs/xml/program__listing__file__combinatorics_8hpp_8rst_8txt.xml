<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__combinatorics_8hpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_combinatorics.hpp.rst.txt</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt</label>
        <link refid="program__listing__file__combinatorics_8hpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a4761ecf7b2a041b052c633106b25a4d8" prot="public" static="no" mutable="no">
        <type>_program_listing_file_combinatorics</type>
        <definition>_program_listing_file_combinatorics hpp</definition>
        <argsstring></argsstring>
        <name>hpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="2" column="37" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1adae6a67fc0375c4abb754d64b9eed42f" prot="public" static="no" mutable="no">
        <type>_program_listing_file_combinatorics const T</type>
        <definition>const range&lt; T &gt; &amp; b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <initializer>{
       return accumulate(<ref refid="structint__it" kindref="compound">int_it</ref>&lt;T&gt;{a + 1 - b}, <ref refid="structint__it" kindref="compound">int_it</ref>&lt;T&gt;{a + 1}, T{1},
                 multiplies&lt;&gt;{})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="16" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1aedfa862b47420de0d171586777f5fa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_perm</definition>
        <argsstring>()</argsstring>
        <name>test_perm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="20" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a689932709b90db0dee974cad175d1266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T fact</definition>
        <argsstring>(const T n)</argsstring>
        <name>fact</name>
        <param>
          <type>const T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="28" column="18" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a1da351da5f459306dd3182e8e0e3a5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fact</definition>
        <argsstring>()</argsstring>
        <name>test_fact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="31" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a396e919799266861bfebc6282573b8fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T choose</definition>
        <argsstring>(const T a, const T b)</argsstring>
        <name>choose</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="37" column="18" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a18ebcc5a7f4095dab1cc6d9bacd8d607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_choose</definition>
        <argsstring>()</argsstring>
        <name>test_choose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="40" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__combinatorics_8hpp_8rst_8txt_1a0c5a7372e7932ba5830e38929ec38c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_combinatorics</definition>
        <argsstring>()</argsstring>
        <name>test_combinatorics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" line="50" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt" bodystart="50" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_combinatorics.hpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/><ref refid="namespacecombinatorics" kindref="compound">combinatorics</ref>.hpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">==========================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_combinatorics.hpp&gt;`<sp/>(``<ref refid="namespacecombinatorics" kindref="compound">combinatorics</ref>.hpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics" kindref="compound">combinatorics</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulate(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>{a<sp/>+<sp/>1<sp/>-<sp/>b},<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref>{a<sp/>+<sp/>1},<sp/>T{1},</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiplies&lt;&gt;{});</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_perm()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>2)<sp/>==<sp/>4<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>4)<sp/>==<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(4,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(0,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(1,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(1,<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(n,<sp/>n);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_fact()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(4)<sp/>==<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(8)<sp/>==<sp/>8<sp/>*<sp/>7<sp/>*<sp/>6<sp/>*<sp/>5<sp/>*<sp/>4<sp/>*<sp/>3<sp/>*<sp/>2<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" kindref="member">perm</ref>(a,<sp/>b)<sp/>/<sp/><ref refid="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" kindref="member">fact</ref>(b);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_choose()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>2)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>3)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(5,<sp/>5)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(0,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(1,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(1,<sp/>1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" kindref="member">choose</ref>(6,<sp/>3)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_combinatorics()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_perm();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_fact();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_choose();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>combinatorics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecombinatorics" kindref="compound">combinatorics</ref>;</highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_combinatorics.hpp.rst.txt"/>
  </compounddef>
</doxygen>
