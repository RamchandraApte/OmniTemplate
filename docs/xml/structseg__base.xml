<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structseg__base" kind="struct" language="C++" prot="public">
    <compoundname>seg_base</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structseg__base_1ad05224442279f2966fdbfc335ac3fa12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto&amp; seg_base&lt; T &gt;::v</definition>
        <argsstring>(T const &amp;x) const</argsstring>
        <name>v</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="116" column="6" bodyfile="seg_old.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structseg__base_1a01e5b733416c3317cf4772b1562a397d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool seg_base&lt; T &gt;::ok</definition>
        <argsstring>(T const &amp;x) const</argsstring>
        <name>ok</name>
        <param>
          <type>T const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="117" column="6" bodyfile="seg_old.hpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structseg__base_1aeee601535b14981decb6c71b1288cfc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>seg_base&lt; T &gt;::seg_base</definition>
        <argsstring>(const ll &amp;n, const T &amp;id)</argsstring>
        <name>seg_base</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="seg_old.hpp" line="118" column="1" bodyfile="seg_old.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="seg_old.hpp" line="115" column="30" bodyfile="seg_old.hpp" bodystart="115" bodyend="119"/>
    <listofallmembers>
      <member refid="structseg__base_1a01e5b733416c3317cf4772b1562a397d" prot="public" virt="non-virtual"><scope>seg_base</scope><name>ok</name></member>
      <member refid="structseg__base_1aeee601535b14981decb6c71b1288cfc3" prot="public" virt="non-virtual"><scope>seg_base</scope><name>seg_base</name></member>
      <member refid="structseg__base_1ad05224442279f2966fdbfc335ac3fa12" prot="public" virt="non-virtual"><scope>seg_base</scope><name>v</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
