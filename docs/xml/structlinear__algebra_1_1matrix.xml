<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structlinear__algebra_1_1matrix" kind="struct" language="C++" prot="public">
    <compoundname>linear_algebra::matrix</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" prot="public" static="no" mutable="no">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll linear_algebra::matrix&lt; T &gt;::rows_n</definition>
        <argsstring></argsstring>
        <name>rows_n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Matrix class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="795" column="5" bodyfile="d_compiled.cpp" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" prot="public" static="no" mutable="no">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll linear_algebra::matrix&lt; T &gt;::cols_n</definition>
        <argsstring></argsstring>
        <name>cols_n</name>
        <briefdescription>
<para>Row, column. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="795" column="12" bodyfile="d_compiled.cpp" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlinear__algebra_1_1matrix_1ab36fb1d4542f2a43af3b44c22ffe083e" prot="public" static="no" mutable="no">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt; T &gt; linear_algebra::matrix&lt; T &gt;::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="796" column="9" bodyfile="d_compiled.cpp" bodystart="796" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(ll r_, ll c_, remove_const_t&lt; decltype(0LL)&gt; v=0LL)</argsstring>
        <name>matrix</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r_</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>c_</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(0LL)&gt;</type>
          <declname>v</declname>
          <defval>0LL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="797" column="11" bodyfile="d_compiled.cpp" bodystart="797" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(T d)</argsstring>
        <name>matrix</name>
        <param>
          <type>T</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="801" column="11" bodyfile="d_compiled.cpp" bodystart="801" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(vector&lt; vector&lt; pr &gt;&gt; const &amp;g)</argsstring>
        <name>matrix</name>
        <param>
          <type>vector&lt; vector&lt; pr &gt;&gt; const &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="802" column="11" bodyfile="d_compiled.cpp" bodystart="802" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const initializer_list&lt; initializer_list&lt; ll &gt;&gt; &amp;vals)</argsstring>
        <name>matrix</name>
        <param>
          <type>const initializer_list&lt; initializer_list&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;&gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="812" column="11" bodyfile="d_compiled.cpp" bodystart="812" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="819" column="7" bodyfile="d_compiled.cpp" bodystart="819" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="822" column="7" bodyfile="d_compiled.cpp" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(ll r_, ll c_, remove_const_t&lt; decltype(0LL)&gt; v=0LL)</argsstring>
        <name>matrix</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r_</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>c_</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(0LL)&gt;</type>
          <declname>v</declname>
          <defval>0LL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="809" column="14" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="809" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(T d)</argsstring>
        <name>matrix</name>
        <param>
          <type>T</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="813" column="14" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="813" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(vector&lt; vector&lt; pr &gt;&gt; const &amp;g)</argsstring>
        <name>matrix</name>
        <param>
          <type>vector&lt; vector&lt; pr &gt;&gt; const &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="814" column="14" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="814" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const initializer_list&lt; initializer_list&lt; ll &gt;&gt; &amp;vals)</argsstring>
        <name>matrix</name>
        <param>
          <type>const initializer_list&lt; initializer_list&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;&gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="824" column="14" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="824" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="831" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="831" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="834" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="834" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(ll r_, ll c_, remove_const_t&lt; decltype(0LL)&gt; v=0LL)</argsstring>
        <name>matrix</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>r_</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>c_</declname>
        </param>
        <param>
          <type>remove_const_t&lt; decltype(0LL)&gt;</type>
          <declname>v</declname>
          <defval>0LL</defval>
        </param>
        <briefdescription>
<para>Array storing the data, in row-major order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="12" column="10" bodyfile="linear_algebra.hpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(T d)</argsstring>
        <name>matrix</name>
        <param>
          <type>T</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="16" column="10" bodyfile="linear_algebra.hpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(vector&lt; vector&lt; pr &gt;&gt; const &amp;g)</argsstring>
        <name>matrix</name>
        <param>
          <type>vector&lt; vector&lt; pr &gt;&gt; const &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="17" column="10" bodyfile="linear_algebra.hpp" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>linear_algebra::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const initializer_list&lt; initializer_list&lt; ll &gt;&gt; &amp;vals)</argsstring>
        <name>matrix</name>
        <param>
          <type>const initializer_list&lt; initializer_list&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;&gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="27" column="10" bodyfile="linear_algebra.hpp" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="34" column="6" bodyfile="linear_algebra.hpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto linear_algebra::matrix&lt; T &gt;::operator[]</definition>
        <argsstring>(const ll i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="linear_algebra.hpp" line="37" column="6" bodyfile="linear_algebra.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="d_compiled.cpp" line="793" column="25" bodyfile="d_compiled.cpp" bodystart="793" bodyend="823"/>
    <listofallmembers>
      <member refid="structlinear__algebra_1_1matrix_1ab36fb1d4542f2a43af3b44c22ffe083e" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>a</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>cols_n</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a58ba608331165bf9a70a199be0f19bd4" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>matrix</name></member>
      <member refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>operator[]</name></member>
      <member refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" prot="public" virt="non-virtual"><scope>linear_algebra::matrix</scope><name>rows_n</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
