<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacestd" kind="namespace" language="C++">
    <compoundname>std</compoundname>
    <innerclass refid="structstd_1_1hash_3_01ll_01_4" prot="public">std::hash&lt; ll &gt;</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innerclass refid="structstd_1_1is__integral_3_01ll_01_4" prot="public">std::is_integral&lt; ll &gt;</innerclass>
    <innerclass refid="structstd_1_1is__signed_3_01ll_01_4" prot="public">std::is_signed&lt; ll &gt;</innerclass>
    <innerclass refid="structstd_1_1is__unsigned_3_01ll_01_4" prot="public">std::is_unsigned&lt; ll &gt;</innerclass>
    <innerclass refid="structstd_1_1numeric__limits_3_01ll_01_4" prot="public">std::numeric_limits&lt; ll &gt;</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d__compiled_8cpp_1a2939a795e467c7daa07c80b7456d78b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; std::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, pair&lt; T... &gt; const &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>pair&lt; T... &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="366" column="1" bodyfile="d_compiled.cpp" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a1920aa20adebf218cbbdf8bb06a4c351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto std::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, const Container &amp;v) -&gt; decltype(begin(v), declval&lt; decltype(os)&gt;())</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="370" column="1" bodyfile="d_compiled.cpp" bodystart="370" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a26ed2eacd641d0bb463e15dd04d3dd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto std::operator&lt;&lt;</definition>
        <argsstring>(rin &amp;os, const T &amp;v) -&gt; decltype(begin(v), declval&lt; decltype(os)&gt;())</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="structrin" kindref="compound">rin</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="387" column="1" bodyfile="d_compiled.cpp" bodystart="387" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__e__compiled_8cpp_8rst_8txt_1adb57ec3700683fb9209f7771f011bb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pr</type>
        <definition>pr std::operator+</definition>
        <argsstring>(pr a, const pr &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>pr</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const pr &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" line="889" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_e_compiled.cpp.rst.txt" bodystart="889" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__my__int_8hpp_8rst_8txt_1a9c62d70a4d570035afd252221695db29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ll_t</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t&lt;is_same_v&lt;ll_t, <ref refid="structll" kindref="compound">ll</ref>&gt;, void&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto std::operator+</definition>
        <argsstring>(T a, ll_t b)</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ll_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_my_int.hpp.rst.txt" line="93" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_my_int.hpp.rst.txt" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="geometry_8hpp_1a18b063c150d95a5ec77dab71218c4f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool std::operator&lt;</definition>
        <argsstring>(point const &amp;a, point const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>point const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Compare points a and b lexicographically</para>
        </inbodydescription>
        <location file="geometry.hpp" line="4" column="1" bodyfile="geometry.hpp" bodystart="4" bodyend="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="d_compiled.cpp" line="364" column="13"/>
  </compounddef>
</doxygen>
