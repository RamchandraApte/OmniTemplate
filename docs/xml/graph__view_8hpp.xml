<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="graph__view_8hpp" kind="file" language="C++">
    <compoundname>graph_view.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includedby refid="graph_2all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/all.hpp</includedby>
    <includedby refid="centroid_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/tree/centroid.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/graph_view.hpp</label>
        <link refid="graph__view_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="13">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_centroid.hpp</label>
        <link refid="test__centroid_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/graph/graph_view.hpp</label>
        <link refid="graph__view_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/ram/OmniTemplate/src/graph/tree/centroid.hpp</label>
        <link refid="centroid_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structSubgraph" prot="public">Subgraph</innerclass>
    <innerclass refid="structSubgraph_1_1iterator" prot="public">Subgraph::iterator</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="graph__view_8hpp_1ac5d2f097a07285733e610a52b16e790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_graph_view</definition>
        <argsstring>()</argsstring>
        <name>test_graph_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/graph/graph_view.hpp" line="35" column="6" bodyfile="/home/ram/OmniTemplate/src/graph/graph_view.hpp" bodystart="35" bodyend="51"/>
        <references refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" compoundref="graph_2all_8hpp" startline="25" endline="28">graph_theory::add_edge</references>
        <references refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a">graph_theory::BFS</references>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="16">fo</references>
        <referencedby refid="namespacegraph__theory_1_1test_1a147e0cf4f86928e4e422c6b9198a2371" compoundref="test__all_8hpp" startline="71" endline="85">graph_theory::test::test_graph_theory</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight></codeline>
<codeline lineno="5" refid="structSubgraph" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pred&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>{</highlight></codeline>
<codeline lineno="6" refid="structSubgraph_1a8ef8bd07c52421ca8ac3f062411faaf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;<ref refid="structSubgraph_1a8ef8bd07c52421ca8ac3f062411faaf8" kindref="member">graph</ref>;</highlight></codeline>
<codeline lineno="7" refid="structSubgraph_1aa34c43219f5bdcbbaf84ef789d7129ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pred<sp/>&amp;<ref refid="structSubgraph_1aa34c43219f5bdcbbaf84ef789d7129ff" kindref="member">pred</ref>;</highlight></codeline>
<codeline lineno="8" refid="structSubgraph_1ae7e40a1b65946ca79caa9daf18266027" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1ae7e40a1b65946ca79caa9daf18266027" kindref="member">Subgraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>&amp;graph_arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pred<sp/>&amp;pred_arg)<sp/>:<sp/><ref refid="structSubgraph_1a8ef8bd07c52421ca8ac3f062411faaf8" kindref="member">graph</ref>{graph_arg},<sp/><ref refid="structSubgraph_1aa34c43219f5bdcbbaf84ef789d7129ff" kindref="member">pred</ref>{pred_arg}<sp/>{}</highlight></codeline>
<codeline lineno="9" refid="structSubgraph_1_1iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;ll&gt;<sp/>{</highlight></codeline>
<codeline lineno="10" refid="structSubgraph_1_1iterator_1a9e5cef7fa051d00f90d9ec0169c9dcbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>&amp;<ref refid="structSubgraph_1_1iterator_1a9e5cef7fa051d00f90d9ec0169c9dcbf" kindref="member">subgraph</ref>;</highlight></codeline>
<codeline lineno="11" refid="structSubgraph_1_1iterator_1a10d1a1a6cf7db867ac72166374e5d381" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structSubgraph_1_1iterator_1a10d1a1a6cf7db867ac72166374e5d381" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="12" refid="structSubgraph_1_1iterator_1afeae90118e21789c96dcafee8954a8d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;ll&gt;<sp/>&amp;<ref refid="structSubgraph_1_1iterator_1afeae90118e21789c96dcafee8954a8d6" kindref="member">adj_list</ref>;</highlight></codeline>
<codeline lineno="13" refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;ll&gt;::const_iterator<sp/><ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>;</highlight></codeline>
<codeline lineno="14" refid="structSubgraph_1_1iterator_1a440012a4b9cc8741005dadd14c51c4b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a440012a4b9cc8741005dadd14c51c4b7" kindref="member">iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>&amp;subgraph_arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i_arg)<sp/>:<sp/><ref refid="structSubgraph_1_1iterator_1a9e5cef7fa051d00f90d9ec0169c9dcbf" kindref="member">subgraph</ref>{subgraph_arg},<sp/><ref refid="structSubgraph_1_1iterator_1a10d1a1a6cf7db867ac72166374e5d381" kindref="member">i</ref>{i_arg},<sp/><ref refid="structSubgraph_1_1iterator_1afeae90118e21789c96dcafee8954a8d6" kindref="member">adj_list</ref>{<ref refid="structSubgraph_1_1iterator_1a9e5cef7fa051d00f90d9ec0169c9dcbf" kindref="member">subgraph</ref>.<ref refid="structSubgraph_1a8ef8bd07c52421ca8ac3f062411faaf8" kindref="member">graph</ref>[<ref refid="structSubgraph_1_1iterator_1a10d1a1a6cf7db867ac72166374e5d381" kindref="member">i</ref>]},<sp/><ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>{<ref refid="structSubgraph_1_1iterator_1afeae90118e21789c96dcafee8954a8d6" kindref="member">adj_list</ref>.begin()}<sp/>{<sp/><ref refid="structSubgraph_1_1iterator_1aa4009857163f12e31ecdce2aba538664" kindref="member">advance</ref>();<sp/>}</highlight></codeline>
<codeline lineno="15" refid="structSubgraph_1_1iterator_1aa4009857163f12e31ecdce2aba538664" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1aa4009857163f12e31ecdce2aba538664" kindref="member">advance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/><ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref><sp/>!=<sp/><ref refid="structSubgraph_1_1iterator_1afeae90118e21789c96dcafee8954a8d6" kindref="member">adj_list</ref>.end()<sp/>&amp;&amp;<sp/>!<ref refid="structSubgraph_1_1iterator_1a9e5cef7fa051d00f90d9ec0169c9dcbf" kindref="member">subgraph</ref>.<ref refid="structSubgraph_1aa34c43219f5bdcbbaf84ef789d7129ff" kindref="member">pred</ref>(<ref refid="structSubgraph_1_1iterator_1a10d1a1a6cf7db867ac72166374e5d381" kindref="member">i</ref>,<sp/>*<ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>);<sp/>++<ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19" refid="structSubgraph_1_1iterator_1a18d3eb38e8a8e1c31f11985dc9d5e759" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structSubgraph_1_1iterator_1a18d3eb38e8a8e1c31f11985dc9d5e759" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>;<sp/>}</highlight></codeline>
<codeline lineno="20" refid="structSubgraph_1_1iterator_1a65f575b4d883de1062cbe0e5d528536c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a65f575b4d883de1062cbe0e5d528536c" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph_1_1iterator_1aa4009857163f12e31ecdce2aba538664" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24" refid="structSubgraph_1_1iterator_1a01f47caa42d1beb1481ccc16da17b6f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a01f47caa42d1beb1481ccc16da17b6f4" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref><sp/>==<sp/>oth.<ref refid="structSubgraph_1_1iterator_1ae1ba7e8a3a54d789b39f767a31704751" kindref="member">it</ref>;<sp/>}</highlight></codeline>
<codeline lineno="25" refid="structSubgraph_1_1iterator_1a51dadd6c4969a535d3aba1fc075ee8a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator_1a51dadd6c4969a535d3aba1fc075ee8a3" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>&amp;oth)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>oth);<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="27" refid="structSubgraph_1a233f31cd01de3e194b7700f782718336" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrange" kindref="compound">range&lt;iterator&gt;</ref><sp/><ref refid="structSubgraph_1a233f31cd01de3e194b7700f782718336" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>st_it{</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structSubgraph_1_1iterator" kindref="compound">iterator</ref><sp/>ed_it{</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ed_it.it<sp/>=<sp/>ed_it.adj_list.end();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range&lt;iterator&gt;</ref>{st_it,<sp/>ed_it};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33" refid="structSubgraph_1ad125a6de7af34742b45d04aac31ed2d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structSubgraph_1ad125a6de7af34742b45d04aac31ed2d6" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structSubgraph_1a8ef8bd07c52421ca8ac3f062411faaf8" kindref="member">graph</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35" refid="graph__view_8hpp_1ac5d2f097a07285733e610a52b16e790b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="graph__view_8hpp_1ac5d2f097a07285733e610a52b16e790b" kindref="member">test_graph_view</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a5ab361e566cb00eee5329a02c4553780" kindref="member">GraphAdj</ref><sp/>g(5);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>i<sp/>+<sp/>1,<sp/>g.size())<sp/>{<sp/><ref refid="namespacegraph__theory_1a2abf7b81ca97d786b3c5157c655066f1" kindref="member">add_edge</ref>(g,<sp/>i,<sp/>j);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pred<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>j)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>2<sp/>==<sp/>j<sp/>%<sp/>2;<sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSubgraph" kindref="compound">Subgraph</ref><sp/>subgraph{g,<sp/>pred};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>subgraph[i])<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pred(i,<sp/>j));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegraph__theory_1a4ebc5c354c7f3d8a187b1af524050c0a" kindref="member">BFS</ref><sp/>bfs{subgraph};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>bfs(0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>g.size())<sp/>{<sp/>assert(bfs.visited[i]<sp/>==<sp/>(i<sp/>%<sp/>2<sp/>==<sp/>0));<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/graph/graph_view.hpp"/>
  </compounddef>
</doxygen>
