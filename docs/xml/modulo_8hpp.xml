<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="modulo_8hpp" kind="file" language="C++">
    <compoundname>modulo.hpp</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <includedby refid="linear__algebra_8hpp" local="yes">linear_algebra.hpp</includedby>
    <includedby refid="program__listing__file__linear__algebra_8hpp_8rst_8txt" local="yes">docs/_build/html/_sources/api/program_listing_file_linear_algebra.hpp.rst.txt</includedby>
    <includedby refid="program__listing__file__number__theory_8hpp_8rst_8txt" local="yes">docs/_build/html/_sources/api/program_listing_file_number_theory.hpp.rst.txt</includedby>
    <includedby refid="program__listing__file__permutation_8hpp_8rst_8txt" local="yes">docs/_build/html/_sources/api/program_listing_file_permutation.hpp.rst.txt</includedby>
    <includedby refid="program__listing__file__template_8hpp_8rst_8txt" local="yes">docs/_build/html/_sources/api/program_listing_file_template.hpp.rst.txt</includedby>
    <includedby refid="number__theory_8hpp" local="yes">number_theory.hpp</includedby>
    <includedby refid="permutation_8hpp" local="yes">permutation.hpp</includedby>
    <includedby refid="template_8hpp" local="yes">template.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>graph_theory.hpp</label>
        <link refid="graph__theory_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>number_theory.hpp</label>
        <link refid="number__theory_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>2sat.hpp</label>
        <link refid="2sat_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hld.hpp</label>
        <link refid="hld_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>permutation.hpp</label>
        <link refid="permutation_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>template.hpp</label>
        <link refid="template_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structmodulo__namespace_1_1no__mod" prot="public">modulo_namespace::no_mod</innerclass>
    <innerclass refid="structmodulo__namespace_1_1modulo" prot="public">modulo_namespace::modulo</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innernamespace refid="namespacemodulo__namespace">modulo_namespace</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">modulo_namespace<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>invert_t<sp/>=<sp/>decltype(invert(std::declval&lt;Args&gt;()...));</highlight></codeline>
<codeline lineno="11"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>power(T<sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(experimental::is_detected_v&lt;invert_t,<sp/>multiplies&lt;&gt;,<sp/>decltype(a)&gt;)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>invert(multiplies{},<sp/>a);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;b<sp/>&lt;<sp/>0<sp/>but<sp/>unable<sp/>to<sp/>inverse<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret<sp/>=<sp/>identity(multiplies&lt;&gt;{},<sp/>a);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>b;<sp/>b<sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/>mod(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>%=<sp/>b;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/>mod_eq(<ref refid="structll" kindref="compound">ll</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>mod(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulus</ref><sp/>=</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e9<sp/>+</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7;<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>()<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(T<sp/>x_)<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>(mod(x_,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>::<ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulus</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>(x_)<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(plus&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator+(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.x<sp/>+<sp/>b.x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref><sp/>?<sp/>sum<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref><sp/>:<sp/>sum,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator++(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator-(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref><sp/>-<sp/>a.x,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>ADL<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">using<sp/>::operator-;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">bin(==,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator*(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ull<sp/>quot<sp/>=<sp/>ld(a.x)<sp/>*<sp/>ld(b.x)<sp/>/<sp/>ld(<ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>approximate<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/>ull(a.x)<sp/>*<sp/>ull(b.x)<sp/>-<sp/>ull(<ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>invert(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(b<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>power(b,<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref><sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">using<sp/>::operator/;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_power()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(2,<sp/>3)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(3,<sp/>10)<sp/>==<sp/>59049);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7),<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{56888193});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>-1000)<sp/>*<sp/>power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{1},<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_md()<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{7,<sp/><ref refid="structmodulo__namespace_1_1modulo_1aa226c570734645b30076408ca179e939" kindref="member">modulo::modulus</ref>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{34}<sp/>/<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{-2}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{4});</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{2}<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{6}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3});</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_modulo()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>test_power();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>test_md();</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>modulo_namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">modulo_namespace;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>operator()(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="modulo.hpp"/>
  </compounddef>
</doxygen>
