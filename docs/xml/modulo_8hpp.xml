<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="modulo_8hpp" kind="file" language="C++">
    <compoundname>modulo.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includedby refid="linear__algebra_8hpp" local="yes">/home/ram/OmniTemplate/src/algebra/linear_algebra.hpp</includedby>
    <includedby refid="permutation_8hpp" local="yes">/home/ram/OmniTemplate/src/combinatorics/permutation.hpp</includedby>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="number__theory_8hpp" local="yes">/home/ram/OmniTemplate/src/number_theory/number_theory.hpp</includedby>
    <includedby refid="test__modulo_8hpp" local="yes">/home/ram/OmniTemplate/src/number_theory/test_modulo.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/ram/OmniTemplate/src/combinatorics/test_permutation.hpp</label>
        <link refid="test__permutation_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/algebra/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/ram/OmniTemplate/src/number_theory/number_theory.hpp</label>
        <link refid="number__theory_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/ram/OmniTemplate/src/number_theory/test_modulo.hpp</label>
        <link refid="test__modulo_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/ram/OmniTemplate/src/combinatorics/permutation.hpp</label>
        <link refid="permutation_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp</label>
        <link refid="test__linear__algebra_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp</label>
        <link refid="test__number__theory_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/ram/OmniTemplate/src/graph/test_flow.hpp</label>
        <link refid="test__flow_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/ram/OmniTemplate/src/graph/flow.hpp</label>
        <link refid="flow_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structmodulo__namespace_1_1no__mod" prot="public">modulo_namespace::no_mod</innerclass>
    <innerclass refid="structmodulo__namespace_1_1modulo" prot="public">modulo_namespace::modulo</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innernamespace refid="namespacemodulo__namespace">modulo_namespace</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespacemodulo__namespace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace" kindref="compound">modulo_namespace</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespacemodulo__namespace_1a0329c7316dfca40b316f6ad7a6b60e87" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacemodulo__namespace_1a0329c7316dfca40b316f6ad7a6b60e87" kindref="member">invert_t</ref><sp/>=<sp/>decltype(<ref refid="namespacemodulo__namespace_1aac690d54b7665a90ca461724df8907c0" kindref="member">invert</ref>(std::declval&lt;Args&gt;()...));</highlight></codeline>
<codeline lineno="11" refid="namespacemodulo__namespace_1a8e6fc91a032b336ea0bbed9eabf54f69" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacemodulo__namespace_1a8e6fc91a032b336ea0bbed9eabf54f69" kindref="member">power</ref>(T<sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(experimental::is_detected_v&lt;<ref refid="namespacemodulo__namespace_1a0329c7316dfca40b316f6ad7a6b60e87" kindref="member">invert_t</ref>,<sp/>multiplies&lt;&gt;,<sp/>decltype(a)&gt;)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="namespacemodulo__namespace_1aac690d54b7665a90ca461724df8907c0" kindref="member">invert</ref>(multiplies{},<sp/>a);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref><sp/>=<sp/>-<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;b<sp/>&lt;<sp/>0<sp/>but<sp/>unable<sp/>to<sp/>inverse<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref><sp/>=<sp/><ref refid="namespacemodulo__namespace_1a55577c112e6d41b6314ad996f9e48842" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>;<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref><sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref><sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref><sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29" refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>%=<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37" refid="namespacemodulo__namespace_1a0a666ddbbb5d4d02c4aee66be7577292" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacemodulo__namespace_1a0a666ddbbb5d4d02c4aee66be7577292" kindref="member">mod_eq</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/><ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(a,<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>);<sp/>}</highlight></codeline>
<codeline lineno="39" refid="structmodulo__namespace_1_1no__mod" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="40" refid="structmodulo__namespace_1_1modulo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>{</highlight></codeline>
<codeline lineno="41" refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulus</ref><sp/>=</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e9<sp/>+</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7;<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;<sp/></highlight></codeline>
<codeline lineno="46" refid="structmodulo__namespace_1_1modulo_1ac9d3017987939152de7e7865350abb43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1ac9d3017987939152de7e7865350abb43" kindref="member">modulo</ref>()<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="48" refid="structmodulo__namespace_1_1modulo_1aec9c4507e257635e3c0e258b9667be7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1aec9c4507e257635e3c0e258b9667be7f" kindref="member">modulo</ref>(T<sp/>x_)<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>(<ref refid="namespacemodulo__namespace_1a2507e89fefa09a358a9de729b15dd642" kindref="member">mod</ref>(x_,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>::<ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulus</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="49" refid="structmodulo__namespace_1_1modulo_1ab2e25a561c35e0e2453ef27de0d66594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo_1ab2e25a561c35e0e2453ef27de0d66594" kindref="member">modulo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/><ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>(x_)<sp/>{}</highlight></codeline>
<codeline lineno="50" refid="structmodulo__namespace_1_1modulo_1a09adfcbfba74232e04a320aeebac5433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52" refid="namespacemodulo__namespace_1a69f587d528c1bb1f78d8a538b133e57b" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_M(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{x};<sp/>}</highlight></codeline>
<codeline lineno="53" refid="namespacemodulo__namespace_1a55577c112e6d41b6314ad996f9e48842" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1a55577c112e6d41b6314ad996f9e48842" kindref="member">identity</ref>(plus&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="54" refid="namespacemodulo__namespace_1aab105decd35962ad192ea2187706df9b" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1a55577c112e6d41b6314ad996f9e48842" kindref="member">identity</ref>(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="55" refid="namespacemodulo__namespace_1aa39044c62fae2707474b9960d257d9dd" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1aa39044c62fae2707474b9960d257d9dd" kindref="member">operator+</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref><sp/>+<sp/><ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>.x;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref><sp/>?<sp/>sum<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref><sp/>:<sp/>sum,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="namespacemodulo__namespace_1aef9f34a9358f523b5e12f6897a806e7e" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1aef9f34a9358f523b5e12f6897a806e7e" kindref="member">operator++</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="60" refid="namespacemodulo__namespace_1a19406485d1ce3b2430c67aea00dda27b" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1a19406485d1ce3b2430c67aea00dda27b" kindref="member">operator-</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref><sp/>-<sp/>a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>ADL<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">using<sp/>::operator-;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="namespacemodulo__namespace_1a533cfa2e1e3a79428a3b5e00430ad125" kindref="member">bin</ref>(==,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>);</highlight></codeline>
<codeline lineno="64" refid="namespacemodulo__namespace_1a7d1e0e6527c5e49efdc1ef0780a055c8" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1a7d1e0e6527c5e49efdc1ef0780a055c8" kindref="member">operator*</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref><sp/>quot<sp/>=<sp/><ref refid="core_2all_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>*<sp/><ref refid="core_2all_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>.x)<sp/>/<sp/><ref refid="core_2all_8hpp_1a2e2e73e53fc509e05f252ef083503838" kindref="member">ld</ref>(<ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>approximate<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/><ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(a.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>)<sp/>*<sp/><ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>.x)<sp/>-<sp/><ref refid="core_2all_8hpp_1aa5114a4fed348a29fb92123470476b1b" kindref="member">ull</ref>(<ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref>)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref>,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77" refid="namespacemodulo__namespace_1aac690d54b7665a90ca461724df8907c0" refkind="member"><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/><ref refid="namespacemodulo__namespace_1aac690d54b7665a90ca461724df8907c0" kindref="member">invert</ref>(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemodulo__namespace_1a8e6fc91a032b336ea0bbed9eabf54f69" kindref="member">power</ref>(<ref refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" kindref="member">b</ref>,<sp/><ref refid="structmodulo__namespace_1_1modulo_1a3fb17100685d3dfe8246407138109bc6" kindref="member">modulo::modulus</ref><sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">using<sp/>::operator/;</highlight></codeline>
<codeline lineno="83" refid="namespacemodulo__namespace_1ad645d89c7a55337c12edadb8376670e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacemodulo__namespace_1ad645d89c7a55337c12edadb8376670e3" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>modulo_namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemodulo__namespace" kindref="compound">modulo_namespace</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="89" refid="structstd_1_1hash_3_01modulo_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="90" refid="structstd_1_1hash_3_01modulo_01_4_1a509450130beda45a43f665c115bac2e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structstd_1_1hash_3_01modulo_01_4_1a509450130beda45a43f665c115bac2e7" kindref="member">operator()</ref>(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmodulo__namespace_1_1modulo_1a364cca04966c17f999945d2e0c8418a0" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/number_theory/modulo.hpp"/>
  </compounddef>
</doxygen>
