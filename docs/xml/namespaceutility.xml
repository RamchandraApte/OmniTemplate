<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespaceutility" kind="namespace" language="C++">
    <compoundname>utility</compoundname>
    <innerclass refid="structutility_1_1ar" prot="public">utility::ar</innerclass>
    <innerclass refid="structutility_1_1ar_3_01T_0fn_0e_4" prot="public">utility::ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="classutility_1_1chained__compare" prot="public">utility::chained_compare</innerclass>
    <innerclass refid="structutility_1_1Empty" prot="public">utility::Empty</innerclass>
    <innerclass refid="structutility_1_1fix" prot="public">utility::fix</innerclass>
    <innerclass refid="structutility_1_1random__device__patch" prot="public">utility::random_device_patch</innerclass>
    <innerclass refid="structutility_1_1with" prot="public">utility::with</innerclass>
    <innernamespace refid="namespaceutility_1_1test">utility::test</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceutility_1a5527c46ab55c32f4bdf48a47564e3cf0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt; T &gt;::type</type>
        <definition>using utility::ar_t = typedef typename ar&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>ar_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="135" column="13" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceutility_1a8575a7ae9db3044c9cef77ddcc62ab7c" prot="public" static="no">
        <type><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref></type>
        <definition>using utility::random_device = typedef random_device_patch</definition>
        <argsstring></argsstring>
        <name>random_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="145" column="1" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" prot="public" static="no" mutable="no">
        <type>default_random_engine</type>
        <definition>default_random_engine utility::reng</definition>
        <argsstring></argsstring>
        <name>reng</name>
        <initializer>{<ref refid="namespaceutility_1a8575a7ae9db3044c9cef77ddcc62ab7c" kindref="member">random_device</ref>{}()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="147" column="23" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="147" bodyend="-1"/>
        <referencedby refid="test__biconnected_8hpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__biconnected_8hpp" startline="23" endline="112">test_biconnected</referencedby>
        <referencedby refid="namespaceflow_1_1test_1a66e8ca51e96f06ce0369f386cab9ac25" compoundref="test__flow_8hpp" startline="30" endline="43">flow::test::random_flow</referencedby>
        <referencedby refid="namespacestring__tools_1_1test_1aac2edb1d7263538c044fead501c02085" compoundref="test__suffix__array_8hpp" startline="9" endline="15">string_tools::test::random_str</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceutility_1acf80bb2a56236f08271b2d70689cc1f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::min_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>min_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="25" column="19" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="25" bodyend="25"/>
        <referencedby refid="biconnected_8hpp_1a72476443ae31ddf840e52f4a47f79055" compoundref="biconnected_8hpp" startline="7" endline="53">biconnected</referencedby>
        <referencedby refid="namespaceflow_1a724fa814b55772a3c6ba9254b8403e70" compoundref="flow_8hpp" startline="14" endline="61">flow::edmond_karp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a80f7a687b4e8d135cde1ae1d6b169d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::max_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>max_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Set x to the minimum of x and y. </para>
        </briefdescription>
        <detaileddescription>
<para>Set x to the maximum of x and y </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="27" column="19" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="27" bodyend="27"/>
        <referencedby refid="centroid_8hpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="centroid_8hpp" startline="6" endline="49">centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a6e069fcf8b422fbc525eba2543e36a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::cache</definition>
        <argsstring>(const T &amp;f)</argsstring>
        <name>cache</name>
        <param>
          <type>const T &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set x to the minimum of x and y. </para>
        </briefdescription>
        <detaileddescription>
<para>Cache calls to f using a map of type T </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="29" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Eq</type>
            <defval>equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::uniq</definition>
        <argsstring>(Cont v, Eq const &amp;up=Eq{}, T const &amp;sp=T{})</argsstring>
        <name>uniq</name>
        <param>
          <type>Cont</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Eq const &amp;</type>
          <declname>up</declname>
          <defval>Eq{}</defval>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>sp</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
<para>Remove all duplicates element from. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>so that all elements in</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>are distinct and sorted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="41" column="7" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="41" bodyend="45"/>
        <referencedby refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" compoundref="cht_8hpp" startline="68" endline="71">convex_hull_trick::CHT::CHT</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a29adbf9294cbaa7132f9d922bea29299" compoundref="test__utility_8hpp" startline="14" endline="17">utility::test::test_uniq</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a3f485f407bcf34b3ad3831f7fda882e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Compare</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::key_compare</definition>
        <argsstring>(const Func &amp;func, const Compare &amp;compare={})</argsstring>
        <name>key_compare</name>
        <param>
          <type>const Func &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const Compare &amp;</type>
          <declname>compare</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Compare using key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The key function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>the comparison function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A comparison functor that compares two arugments by the key. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="52" column="6" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="52" bodyend="56"/>
        <referencedby refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" compoundref="cht_8hpp" startline="68" endline="71">convex_hull_trick::CHT::CHT</referencedby>
        <referencedby refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" compoundref="cht_8hpp" startline="40" endline="58">convex_hull_trick::hull</referencedby>
        <referencedby refid="cht_8hpp_1a18b063c150d95a5ec77dab71218c4f48" compoundref="cht_8hpp" startline="4" endline="7">std::operator&lt;</referencedby>
        <referencedby refid="namespacestring__tools_1_1test_1ae99e912d4303fb69fb94d5197acfb0fa" compoundref="test__suffix__array_8hpp" startline="3" endline="8">string_tools::test::suffix_array_naive</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a027d0f534d798b71531e664ed33a7318" compoundref="test__utility_8hpp" startline="18" endline="21">utility::test::test_key_compare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a50e9430d1096ce6997ae910135a9533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::prev_less</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>prev_less</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="57" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="57" bodyend="71"/>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="55">fo</references>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::bit_ceil</definition>
        <argsstring>(ll x)</argsstring>
        <name>bit_ceil</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return the smallest power of two that is at least x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="73" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="73" bodyend="78"/>
        <referencedby refid="fft_8hpp_1a27632dcb2490189a02cc98a2029a4be3" compoundref="fft_8hpp" startline="43" endline="60">fft</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a1dc18cbf86fee8a275f4cc46d125f43c" compoundref="test__utility_8hpp" startline="22" endline="31">utility::test::test_bit_ceil</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::power_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>power_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Returns the smallest power of base that is at least x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="81" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a750478c01441fac1c27f14bea2cb74ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::log_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>log_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Returns the smallest exponent such that base raised to exponent is at least x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="88" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::next_comb</definition>
        <argsstring>(ll x)</argsstring>
        <name>next_comb</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>next combination of bits Formally, returns the smallest integer y &gt; x such that popcount(y) = popcount(x). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>THe desired y must exist. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="97" column="5" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="97" bodyend="104"/>
        <referencedby refid="namespaceutility_1_1test_1a7185c2baa5f4d2655e37174048fa6e1f" compoundref="test__utility_8hpp" startline="32" endline="45">utility::test::test_next_comb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a4c8a9d0142092c8f2255e518bfdf9dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::sort2</definition>
        <argsstring>(T &amp;a, T &amp;b, const Func &amp;func)</argsstring>
        <name>sort2</name>
        <param>
          <type>T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Func &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Stable sorts a and b by func. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="106" column="20" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="106" bodyend="110"/>
        <referencedby refid="classhld_1_1HLD_1ace75fa88e8df29573405e9241c56baf0" compoundref="hld_8hpp" startline="50" endline="64">hld::HLD&lt; T, Monoid, QueryDS &gt;::func_path</referencedby>
        <referencedby refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" compoundref="dsu_8hpp" startline="16" endline="26">dsu_ds::dsu::join</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a713c1fa985af64dbe0374a15cc3d4383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
          <param>
            <type>typename Proj</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::counting_sort</definition>
        <argsstring>(Iter a, Iter b, const Proj &amp;proj, const ll proj_size)</argsstring>
        <name>counting_sort</name>
        <param>
          <type>Iter</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Proj &amp;</type>
          <declname>proj</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>proj_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="112" column="6" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="112" bodyend="130"/>
        <references refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" compoundref="core_2all_8hpp" startline="57">al</references>
        <referencedby refid="namespacestring__tools_1af59e7388a466fccce148991db2eb61db" compoundref="suffix__array_8hpp" startline="6" endline="44">string_tools::suffix_array</referencedby>
        <referencedby refid="namespaceutility_1_1test_1aa1aed4e58acebcfd6d9150b64f4ad975" compoundref="test__utility_8hpp" startline="50" endline="59">utility::test::test_counting_sort</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::ssize</definition>
        <argsstring>(const Cont &amp;cont)</argsstring>
        <name>ssize</name>
        <param>
          <type>const Cont &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="131" column="16" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="131" bodyend="131"/>
        <references refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" compoundref="range_8hpp" startline="66">cont</references>
        <referencedby refid="namespacepermutation_1a4c6e81c9c25d20631e5b1a63edeedb74" compoundref="permutation_8hpp" startline="52" endline="52">permutation::identity</referencedby>
        <referencedby refid="namespacebigint_1a1c313eef0ad422d61739b7e3cd97d849" compoundref="big__integer_8hpp" startline="26" endline="29">bigint::operator==</referencedby>
        <referencedby refid="structbigint_1_1BigInt_1a9b9c2c376d5f790991f541553de43bd0" compoundref="big__integer_8hpp" startline="10" endline="10">bigint::BigInt::operator[]</referencedby>
        <referencedby refid="classpermutation_1_1Permutation_1a0b7480d74a8c5d9db8da2151638b4048" compoundref="permutation_8hpp" startline="40" endline="48">permutation::Permutation::Permutation</referencedby>
        <referencedby refid="structstring__tools_1_1Trie_1a0bfc816d1bbcfa5a160a8f34400816d4" compoundref="dict__search_8hpp" startline="102" endline="115">string_tools::Trie&lt; start, alphabet_size &gt;::search</referencedby>
        <referencedby refid="classsparse__table_1_1SparseTable_1a625a4d7a54800fdde78057a1fcc670db" compoundref="sparse__table_8hpp" startline="9" endline="19">sparse_table::SparseTable&lt; T, Semilattice &gt;::SparseTable</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a416532ff53790338172141074151fd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool utility::valid_idx</definition>
        <argsstring>(const vector&lt; T &gt; &amp;vec, const size_t idx)</argsstring>
        <name>valid_idx</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Return whether idx is a valid index for vec. Note that if idx is negative this returns false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="163" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="163" bodyend="165"/>
        <referencedby refid="namespaceutility_1_1test_1ad5fcf407d6e5ae3ca2f4e018b99a46ea" compoundref="test__utility_8hpp" startline="66" endline="71">utility::test::test_valid_idx</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1aed2adcc88a8abb68fe298905798fa8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIt</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::iterator_identity</definition>
        <argsstring>()</argsstring>
        <name>iterator_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="166" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="166" bodyend="168"/>
        <references refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" compoundref="linear__algebra_8hpp" startline="39" endline="41">linear_algebra::identity</references>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a547ec88ecb50fe12150a8d293de2ce75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIt</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) utility::accumulate</definition>
        <argsstring>(InputIt a, InputIt b)</argsstring>
        <name>accumulate</name>
        <param>
          <type>InputIt</type>
          <declname>a</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="169" column="22" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="169" bodyend="171"/>
        <referencedby refid="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" compoundref="combinatorics_8hpp" startline="5" endline="8">combinatorics::perm</referencedby>
        <referencedby refid="namespaceutility_1_1test_1ab3119b39975103a9eb91adc193296f50" compoundref="test__utility_8hpp" startline="72" endline="77">utility::test::test_accumulate</referencedby>
        <referencedby refid="namespacesparse__table_1_1test_1a274f88cabaff31f12dbb19ed28eb1bb7" compoundref="test__sparse__table_8hpp" startline="6" endline="16">sparse_table::test::test_sparse_table_impl</referencedby>
        <referencedby refid="namespaceflow_1a6fb3adf4fcf060a6ce41b19c6c5ac5b1" compoundref="flow_8hpp" startline="159" endline="159">flow::total_flow</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a9503cf05b32620d818c2ff7e3c5cb20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIt</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::get_partial_sum</definition>
        <argsstring>(InputIt a, InputIt b)</argsstring>
        <name>get_partial_sum</name>
        <param>
          <type>InputIt</type>
          <declname>a</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="172" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="172" bodyend="176"/>
        <referencedby refid="namespaceutility_1_1test_1ac7ae1797bce001e4a1d668c5da58d252" compoundref="test__utility_8hpp" startline="78" endline="81">utility::test::test_get_partial_sum</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ram/OmniTemplate/src/core/test_utility.hpp" line="3" column="1"/>
  </compounddef>
</doxygen>
