<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceutility" kind="namespace" language="C++">
    <compoundname>utility</compoundname>
    <innerclass refid="structutility_1_1ar" prot="public">utility::ar</innerclass>
    <innerclass refid="structutility_1_1ar_3_01T_0fn_0e_4" prot="public">utility::ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="structutility_1_1Empty" prot="public">utility::Empty</innerclass>
    <innerclass refid="structutility_1_1fix" prot="public">utility::fix</innerclass>
    <innerclass refid="structutility_1_1random__device__patch" prot="public">utility::random_device_patch</innerclass>
    <innerclass refid="structutility_1_1with" prot="public">utility::with</innerclass>
    <innernamespace refid="namespaceutility_1_1test">utility::test</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceutility_1a5527c46ab55c32f4bdf48a47564e3cf0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt; T &gt;::type</type>
        <definition>using utility::ar_t = typedef typename ar&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>ar_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="97" column="13" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceutility_1a8575a7ae9db3044c9cef77ddcc62ab7c" prot="public" static="no">
        <type><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref></type>
        <definition>using utility::random_device = typedef random_device_patch</definition>
        <argsstring></argsstring>
        <name>random_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="108" column="1" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceutility_1a7fea553f6f915aa6c2affe79637d9b9f" prot="public" static="no" mutable="no">
        <type>default_random_engine</type>
        <definition>default_random_engine utility::reng</definition>
        <argsstring></argsstring>
        <name>reng</name>
        <initializer>{<ref refid="namespaceutility_1a8575a7ae9db3044c9cef77ddcc62ab7c" kindref="member">random_device</ref>{}()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="110" column="23" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="110" bodyend="-1"/>
        <referencedby refid="test__biconnected_8hpp_1a07c975aa9b96f7bdb70155ae0c3acd17" compoundref="test__biconnected_8hpp" startline="23" endline="105">test_biconnected</referencedby>
        <referencedby refid="namespaceflow_1_1test_1a66e8ca51e96f06ce0369f386cab9ac25" compoundref="test__flow_8hpp" startline="30" endline="43">flow::test::random_flow</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceutility_1a1507417750abfb917c914c44e07ed713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::max_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>max_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="19" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="19" bodyend="19"/>
        <referencedby refid="centroid_8hpp_1a3831178b7f165ffd952602f1ec4ba6a4" compoundref="centroid_8hpp" startline="6" endline="47">centroid_decomp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1ae423116f6315d5e998219f27f1f8c401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::min_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>min_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="20" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="20" bodyend="20"/>
        <referencedby refid="biconnected_8hpp_1a72476443ae31ddf840e52f4a47f79055" compoundref="biconnected_8hpp" startline="7" endline="48">biconnected</referencedby>
        <referencedby refid="namespaceflow_1a724fa814b55772a3c6ba9254b8403e70" compoundref="flow_8hpp" startline="13" endline="59">flow::edmond_karp</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a6e069fcf8b422fbc525eba2543e36a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::cache</definition>
        <argsstring>(const T &amp;f)</argsstring>
        <name>cache</name>
        <param>
          <type>const T &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Cache calls to f using a map of type T</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="21" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a531cc980b5de78f0c2f36ae3210cb9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Eq</type>
            <defval>equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::uniq</definition>
        <argsstring>(Cont v, Eq const &amp;up=Eq{}, T const &amp;sp=T{})</argsstring>
        <name>uniq</name>
        <param>
          <type>Cont</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Eq const &amp;</type>
          <declname>up</declname>
          <defval>Eq{}</defval>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>sp</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
<para>Remove all duplicates element from. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>so that all elements in</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>are distinct and sorted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="34" column="7" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="34" bodyend="38"/>
        <referencedby refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" compoundref="cht_8hpp" startline="70" endline="73">convex_hull_trick::CHT::CHT</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a29adbf9294cbaa7132f9d922bea29299" compoundref="test__utility_8hpp" startline="14" endline="17">utility::test::test_uniq</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1aa705afaf267f70799bd4ec8cbf040455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::key_compare</definition>
        <argsstring>(const Func &amp;f, T g=T{})</argsstring>
        <name>key_compare</name>
        <param>
          <type>const Func &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>g</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="39" column="22" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="39" bodyend="41"/>
        <referencedby refid="structconvex__hull__trick_1_1CHT_1a2166ed9dd69f17fe9f4ed77fbf4d0907" compoundref="cht_8hpp" startline="70" endline="73">convex_hull_trick::CHT::CHT</referencedby>
        <referencedby refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" compoundref="cht_8hpp" startline="42" endline="58">convex_hull_trick::hull</referencedby>
        <referencedby refid="cht_8hpp_1a18b063c150d95a5ec77dab71218c4f48" compoundref="cht_8hpp" startline="4" endline="7">std::operator&lt;</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a027d0f534d798b71531e664ed33a7318" compoundref="test__utility_8hpp" startline="18" endline="21">utility::test::test_key_compare</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a50e9430d1096ce6997ae910135a9533f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto utility::prev_less</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>prev_less</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="42" column="18" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="42" bodyend="56"/>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="16">fo</references>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a005fc5d8af9bba651f00c74372466b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::bit_ceil</definition>
        <argsstring>(ll x)</argsstring>
        <name>bit_ceil</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return the smallest power of two that is at least x</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="57" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="57" bodyend="63"/>
        <referencedby refid="fft_8hpp_1a27632dcb2490189a02cc98a2029a4be3" compoundref="fft_8hpp" startline="43" endline="60">fft</referencedby>
        <referencedby refid="namespaceutility_1_1test_1a1dc18cbf86fee8a275f4cc46d125f43c" compoundref="test__utility_8hpp" startline="22" endline="31">utility::test::test_bit_ceil</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::power_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>power_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="65" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a750478c01441fac1c27f14bea2cb74ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::log_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>log_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="71" column="4" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1a7cd324d23686536d1d4eeb92afb61ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::next_comb</definition>
        <argsstring>(ll x)</argsstring>
        <name>next_comb</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Formally, returns the smallest integer y &gt; x such that popcount(y) = popcount(x). Note, such y must exist.</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="77" column="5" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="77" bodyend="86"/>
        <references refid="operations_8hpp_1afcd538daef660984ecb8abf34697904b" compoundref="operations_8hpp" startline="89">ret</references>
        <referencedby refid="namespaceutility_1_1test_1a7185c2baa5f4d2655e37174048fa6e1f" compoundref="test__utility_8hpp" startline="32" endline="45">utility::test::test_next_comb</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1aa72cfb348ae79fd2bdb5ded63cd36ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void utility::swap2</definition>
        <argsstring>(T &amp;a, T &amp;b, const Func &amp;func)</argsstring>
        <name>swap2</name>
        <param>
          <type>T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Func &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Stable sorts a and b by func.</para>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="87" column="20" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="87" bodyend="92"/>
        <references refid="my__int_8hpp_1a9dc54a811b75d3d05d3deff10980ca7e" compoundref="my__int_8hpp" startline="61">b</references>
        <referencedby refid="classhld_1_1HLD_1ace75fa88e8df29573405e9241c56baf0" compoundref="hld_8hpp" startline="48" endline="62">hld::HLD&lt; T, Monoid, QueryDS &gt;::func_path</referencedby>
        <referencedby refid="structdsu__ds_1_1dsu_1a11446b57ae0bf69361258cb4ee2fd212" compoundref="dsu_8hpp" startline="15" endline="25">dsu_ds::dsu::join</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutility_1adafa966f1819210cf795fff85b2a40c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll utility::ssize</definition>
        <argsstring>(const Cont &amp;cont)</argsstring>
        <name>ssize</name>
        <param>
          <type>const Cont &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/core/utility.hpp" line="93" column="16" bodyfile="/home/ram/OmniTemplate/src/core/utility.hpp" bodystart="93" bodyend="93"/>
        <references refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" compoundref="range_8hpp" startline="60">cont</references>
        <referencedby refid="namespacepermutation_1a4c6e81c9c25d20631e5b1a63edeedb74" compoundref="permutation_8hpp" startline="49" endline="49">permutation::identity</referencedby>
        <referencedby refid="structbigint_1_1bigint_1a1589b9707458aa79ca2a2928b9f0e865" compoundref="big__integer_8hpp" startline="7" endline="7">bigint::bigint::operator[]</referencedby>
        <referencedby refid="classpermutation_1_1Permutation_1a0b7480d74a8c5d9db8da2151638b4048" compoundref="permutation_8hpp" startline="40" endline="47">permutation::Permutation::Permutation</referencedby>
        <referencedby refid="classsparse__table_1_1SparseTable_1a625a4d7a54800fdde78057a1fcc670db" compoundref="sparse__table_8hpp" startline="10" endline="18">sparse_table::SparseTable&lt; T, Semilattice &gt;::SparseTable</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ram/OmniTemplate/src/core/test_utility.hpp" line="3" column="23"/>
  </compounddef>
</doxygen>
