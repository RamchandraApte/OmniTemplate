<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__utility_8hpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_utility.hpp.rst.txt</compoundname>
    <includes refid="range_8hpp" local="yes">range.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt</label>
        <link refid="program__listing__file__utility_8hpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structfix" prot="public">fix</innerclass>
    <innerclass refid="structar_3_01T_0fn_0e_4" prot="public">ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="structrandom__device__patch" prot="public">random_device_patch</innerclass>
    <innerclass refid="structEmpty" prot="public">Empty</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="program__listing__file__utility_8hpp_8rst_8txt_1a76cdb96860b77886867832efcffeeb32" prot="public" static="no">
        <name>lambda</name>
        <param><defname>f</defname></param>
        <initializer>[](auto &amp;&amp;... args) { return f(forward&lt;decltype(args)&gt;(args)...); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="37" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="program__listing__file__utility_8hpp_8rst_8txt_1a4072e106efe575805c4864dbbd387090" prot="public" static="no">
        <name>USE_RANDOM_DEVICE_PATCH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="151" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="program__listing__file__utility_8hpp_8rst_8txt_1ab2356879e349c0b1466f1308bce4fc84" prot="public" static="no">
        <type><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref></type>
        <definition>using random_device =  random_device_patch</definition>
        <argsstring></argsstring>
        <name>random_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="153" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="153" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__utility_8hpp_8rst_8txt_1ac9172b8e089510c63fa35cc3239c6a40" prot="public" static="no" mutable="no">
        <type>_program_listing_file_utility</type>
        <definition>_program_listing_file_utility hpp</definition>
        <argsstring></argsstring>
        <name>hpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="2" column="31" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__utility_8hpp_8rst_8txt_1ac8416dc457e51816b227048c6646dc47" prot="public" static="no" mutable="no">
        <type>T &amp;</type>
        <definition>T&amp; v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="18" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__utility_8hpp_8rst_8txt_1a9fc68ed025086c5affbd401726bc07b8" prot="public" static="no" mutable="no">
        <type>default_random_engine</type>
        <definition>default_random_engine reng</definition>
        <argsstring></argsstring>
        <name>reng</name>
        <initializer>{<ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref>{}()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="155" column="26" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1acf48466fad86f91b8a54e2b181e7ceed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tp</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>with</definition>
        <argsstring>(const Tp new_, T &amp;v_)</argsstring>
        <name>with</name>
        <param>
          <type>const Tp</type>
          <declname>new_</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="19" column="20" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a7ea687c19a74d3e3a8052799d419ce3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~with</definition>
        <argsstring>()</argsstring>
        <name>~with</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="20" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a61e1ebee9702000f4f876a4e08d2d83a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_with</definition>
        <argsstring>()</argsstring>
        <name>test_with</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="22" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="22" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a33b3bd74cbc645376d1f83527eeec310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto max_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>max_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="38" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a2c9367913adf3ac58006e1eda0ddbbe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto min_eq</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>min_eq</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="39" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a81e820760e553018a680c8264aa443b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto cache</definition>
        <argsstring>(const T &amp;f)</argsstring>
        <name>cache</name>
        <param>
          <type>const T &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="40" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a73acc7df64034554661daeb64205aae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Eq</type>
            <defval>equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uniq</definition>
        <argsstring>(Cont v, Eq const &amp;up=Eq{}, T const &amp;sp=T{})</argsstring>
        <name>uniq</name>
        <param>
          <type>Cont</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Eq const &amp;</type>
          <declname>up</declname>
          <defval>Eq{}</defval>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>sp</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="50" column="10" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a135862e0b9eecf842529ef19034e3c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_uniq</definition>
        <argsstring>()</argsstring>
        <name>test_uniq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="55" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a62b5169ff6fb3c914ef819ba4fd41937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto key_compare</definition>
        <argsstring>(const Func &amp;f, T g=T{})</argsstring>
        <name>key_compare</name>
        <param>
          <type>const Func &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>g</declname>
          <defval>T{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="59" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a1b6f3df055d8b9b5a9673aaedb89d143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_key_compare</definition>
        <argsstring>()</argsstring>
        <name>test_key_compare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="62" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1ad32b8ad96cf96371fe9ad3c397218352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto prev_less</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>prev_less</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="66" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="66" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1ae0a3c71d2b30b547ab70e730ae603492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll bit_ceil</definition>
        <argsstring>(ll x)</argsstring>
        <name>bit_ceil</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="81" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1af9149defdaf4e2cb2f0e884c5caf31ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_bit_ceil</definition>
        <argsstring>()</argsstring>
        <name>test_bit_ceil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="87" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a0aba7d6e059d67e0bc00e80146684373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll power_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>power_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="97" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a2625cce520d01e9aaa8264f32e6d96d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll log_ceil</definition>
        <argsstring>(const ll x, const ll base)</argsstring>
        <name>log_ceil</name>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="103" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1ae7d7f9d0bbad247488d15de2919cfb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll next_comb</definition>
        <argsstring>(ll x)</argsstring>
        <name>next_comb</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="109" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a9a2af0b2340759f5b235759ed1116227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_next_comb</definition>
        <argsstring>()</argsstring>
        <name>test_next_comb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="117" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="117" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1ac74c8b480a6687d40239f96799557894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap2</definition>
        <argsstring>(T &amp;a, T &amp;b, const Func &amp;func)</argsstring>
        <name>swap2</name>
        <param>
          <type>T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Func &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="131" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a542d7fbdc012a04b0a61005ff10efeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Cont</type>
          </param>
        </templateparamlist>
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll ssize</definition>
        <argsstring>(const Cont &amp;cont)</argsstring>
        <name>ssize</name>
        <param>
          <type>const Cont &amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="136" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a64d8bced234416361976884aa525ceca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tm</definition>
        <argsstring>() struct ar</argsstring>
        <name>tm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="138" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="138" bodyend="138" declfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" declline="139" declcolumn="4"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1aebff8fa924a7c48ecb780e71c6316ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_ar</definition>
        <argsstring>()</argsstring>
        <name>test_ar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="141" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__utility_8hpp_8rst_8txt_1a5e29afed548a99cd2c14f21a464382d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_utility</definition>
        <argsstring>()</argsstring>
        <name>test_utility</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" line="156" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt" bodystart="156" bodyend="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_utility.hpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/>utility.hpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">====================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_utility.hpp&gt;`<sp/>(``utility.hpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;range.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/>utility<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[nodiscard]]<sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>old;<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;v;<sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp&gt;<sp/><ref refid="structutility_1_1with" kindref="compound">with</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp<sp/>new_,<sp/>T<sp/>&amp;v_)<sp/>:<sp/>old(v_),<sp/>v(v_)<sp/>{<sp/>v<sp/>=<sp/>new_;<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structutility_1_1with" kindref="compound">with</ref>()<sp/>{<sp/>v<sp/>=<sp/>old;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_with()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>var<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_func<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w(23,<sp/>var);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>23);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>45;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_func();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32" refid="structfix" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1fix" kindref="compound">fix</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Func<sp/>func;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func_)<sp/>:<sp/>func(func_)<sp/>{}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>operator()(Args<sp/>&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>forward&lt;Args&gt;(args)...);<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>lambda(f)<sp/>[](auto<sp/>&amp;&amp;...<sp/>args)<sp/>{<sp/>return<sp/>f(forward&lt;decltype(args)&gt;(args)...);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_eq(T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>max(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_eq(T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>min(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cache(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ch;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch.find(arg)<sp/>==<sp/>end(ch))<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg]<sp/>=<sp/>f(arg);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eq<sp/>=<sp/>equal_to&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uniq(Cont<sp/>v,<sp/>Eq<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;up<sp/>=<sp/>Eq{},<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;sp<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(al(v),<sp/>sp);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(unique(al(v),<sp/>up)<sp/>-<sp/>begin(v));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_uniq()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((uniq(vl{2,<sp/>-1,<sp/>3,<sp/>-1,<sp/>2,<sp/>3})<sp/>==<sp/>vl{-1,<sp/>2,<sp/>3}));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((uniq&lt;equal_to&lt;&gt;,<sp/>greater&lt;&gt;&gt;(vl{1,<sp/>-3,<sp/>5})<sp/>==<sp/>vl{5,<sp/>1,<sp/>-3}));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f,<sp/>T<sp/>g<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g(f(forward&lt;decltype(args)&gt;(args))...);<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_key_compare()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>a{24,<sp/>25};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(key_compare&lt;greater&lt;&gt;&gt;([&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[i];<sp/>})(1,<sp/>0));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prev_less(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>l(n,<sp/>-1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack&lt;ll&gt;<sp/>s;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fo(i,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.size()<sp/>&amp;&amp;<sp/>!(s.top()<sp/>&lt;<sp/>v[i]))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.pop();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.size())<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l[i]<sp/>=<sp/>s.top();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.push(v[i]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>bit_ceil(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1LL<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structll" kindref="compound">ll</ref>)<sp/>*<sp/>CHAR_BIT<sp/>-<sp/>__builtin_clzll(x<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_bit_ceil()<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(3)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(4)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil(5)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil((1LL<sp/>&lt;&lt;<sp/>45)<sp/>-<sp/>100)<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bit_ceil((1LL<sp/>&lt;&lt;<sp/>45))<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>power_ceil(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pw;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>log_ceil(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1,<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base,<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>next_comb(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>tz<sp/>=<sp/>__builtin_ctzll(x);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y<sp/>=<sp/>x<sp/>+<sp/>(<ref refid="structll" kindref="compound">ll</ref>{1}<sp/>&lt;&lt;<sp/>tz);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>y<sp/>|<sp/>(y<sp/>^<sp/>x)<sp/>&gt;&gt;<sp/>(2<sp/>+<sp/>tz);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret<sp/>&gt;<sp/>x);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(__builtin_popcountll(ret)<sp/>==<sp/>__builtin_popcountll(x));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_next_comb()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>0b111;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1011);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1101);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1110);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0b1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b10);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b100);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap2(T<sp/>&amp;a,<sp/>T<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func(a)<sp/>&gt;<sp/>func(b))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(a,<sp/>b);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>ssize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Cont<sp/>&amp;cont)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size(cont);<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>split<sp/>up<sp/>utility.hpp<sp/>maybe?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>struct<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>tm()<sp/>using<sp/>ar_t<sp/>=<sp/>typename<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="140" refid="structar_3_01T_0fn_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n&gt;<sp/>struct<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt;T[n]&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>array&lt;ar_t&lt;T&gt;,<sp/>n&gt;;<sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_ar()<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;ar_t&lt;<ref refid="structll" kindref="compound">ll</ref>[2][3]&gt;,<sp/>array&lt;array&lt;ll,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;ar_t&lt;array&lt;ll,<sp/>200&gt;[2][3]&gt;,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;array&lt;array&lt;ll,<sp/>200&gt;,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146" refid="structrandom__device__patch" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock_::now().time_since_epoch().count();<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>entropy()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="150" refid="structEmpty" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1Empty" kindref="compound">Empty</ref><sp/>{};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>USE_RANDOM_DEVICE_PATCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>USE_RANDOM_DEVICE_PATCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref><sp/>=<sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/>default_random_engine<sp/>reng{<ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref>{}()};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_utility()<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_with();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_uniq();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_next_comb();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_ar();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_bit_ceil();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_key_compare();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">utility;</highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_utility.hpp.rst.txt"/>
  </compounddef>
</doxygen>
