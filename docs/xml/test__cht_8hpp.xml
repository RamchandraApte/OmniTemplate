<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__cht_8hpp" kind="file" language="C++">
    <compoundname>test_cht.hpp</compoundname>
    <includes refid="cht_8hpp" local="yes">cht.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_cht.hpp</label>
        <link refid="test__cht_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="14">
        <label>queue</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="24">
        <label>experimental/source_location</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="26">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>unordered_set</label>
      </node>
      <node id="23">
        <label>experimental/iterator</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>cht.hpp</label>
        <link refid="cht_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>random</label>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="29">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="28">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>climits</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>thread</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_cht.hpp</label>
        <link refid="test__cht_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceconvex__hull__trick">convex_hull_trick</innernamespace>
    <innernamespace refid="namespaceconvex__hull__trick_1_1test">convex_hull_trick::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cht_8hpp" kindref="compound">cht.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespaceconvex__hull__trick_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick_1_1test" kindref="compound">convex_hull_trick::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespaceconvex__hull__trick_1_1test_1a1407d23268d09f369dbb939414ec7961" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a1407d23268d09f369dbb939414ec7961" kindref="member">test_less</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{3,<sp/>5}));</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{3,<sp/>1}));</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>1}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>1})));</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!(<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2}<sp/>&lt;<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{1,<sp/>2})));</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11" refid="namespaceconvex__hull__trick_1_1test_1a923d7187d947f574ed2f5b54d9406f69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a923d7187d947f574ed2f5b54d9406f69" kindref="member">test_dot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>({1,<sp/>2},<sp/>{2,<sp/>5})<sp/>==<sp/>1<sp/>*<sp/>2<sp/>+<sp/>2<sp/>*<sp/>5));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>({0,<sp/>2},<sp/>{3,<sp/>0})<sp/>==<sp/>0<sp/>*<sp/>3<sp/>+<sp/>2<sp/>*<sp/>0));</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15" refid="namespaceconvex__hull__trick_1_1test_1a84a3352ebc4eb5a1f911bb8e8d1af61d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a84a3352ebc4eb5a1f911bb8e8d1af61d" kindref="member">test_wedge</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>0},<sp/>{0,<sp/>1})<sp/>==<sp/>1));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>1},<sp/>{1,<sp/>1})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a4f9b285a0e38652eb9839ac60b39e34a" kindref="member">wedge</ref>({1,<sp/>0},<sp/>{0,<sp/>0})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20" refid="namespaceconvex__hull__trick_1_1test_1a9b689c83ba8f830281d1aabf43efd1e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a9b689c83ba8f830281d1aabf43efd1e4" kindref="member">test_ccw</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>({1,<sp/>0},<sp/>{1,<sp/>1},<sp/>{0,<sp/>1})));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((!<ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>({0,<sp/>1},<sp/>{1,<sp/>1},<sp/>{1,<sp/>0})));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_collinear<sp/>=<sp/>[&amp;](<ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>a,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>b,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1a09a415224250703a38ef6bd668e1cac5" kindref="member">ccw</ref>(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(invalid_argument<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({0,<sp/>1},<sp/>{0,<sp/>2},<sp/>{0,<sp/>-1});</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({2,<sp/>0},<sp/>{-3,<sp/>0},<sp/>{4,<sp/>0});</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>test_collinear({4,<sp/>6},<sp/>{6,<sp/>9},<sp/>{-4,<sp/>-6});</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35" refid="namespaceconvex__hull__trick_1_1test_1aa454df2800722deea3ac74b53e40a21b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1aa454df2800722deea3ac74b53e40a21b" kindref="member">test_convex_min</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{-100,<sp/>100},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>+<sp/>x;<sp/>})<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{2,<sp/>5},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x;<sp/>})<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="namespaceconvex__hull__trick_1a8a2d8bb18a7c97e9b898e56bbb644978" kindref="member">convex_min</ref>(<ref refid="structrange" kindref="compound">ra</ref>{-3,<sp/>5},<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x<sp/>-<sp/>4<sp/>*<sp/>x;<sp/>})<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40" refid="namespaceconvex__hull__trick_1_1test_1a585d91f97ee3a90cbcdb2ba5bbfe94ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a585d91f97ee3a90cbcdb2ba5bbfe94ac" kindref="member">test_hull</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>lines{{1,<sp/>2},<sp/>{4,<sp/>-2},<sp/>{-1,<sp/>3},<sp/>{1,<sp/>3},<sp/>{-4,<sp/>2},<sp/>{3,<sp/>4}};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>exp{lines[1],<sp/>lines[2],<sp/>lines[4],<sp/>lines[5]};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="namespaceconvex__hull__trick_1aa194f52c547fd3298f72caf6371a23ed" kindref="member">hull</ref>(lines);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(h));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(exp));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(h<sp/>==<sp/>exp);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48" refid="namespaceconvex__hull__trick_1_1test_1af431d14b14918c006bfb450ff5a69a81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1af431d14b14918c006bfb450ff5a69a81" kindref="member">test_cht</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;point&gt;<sp/>lines{{1,<sp/>2},<sp/>{4,<sp/>-2},<sp/>{-1,<sp/>3},<sp/>{1,<sp/>3},<sp/>{-4,<sp/>2},<sp/>{3,<sp/>4}};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structconvex__hull__trick_1_1CHT" kindref="compound">CHT</ref><sp/>ch{lines};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(x,<sp/>-1000,<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mn<sp/>=<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>lines)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/>min(mn,<sp/><ref refid="namespaceconvex__hull__trick_1a884b15c6042069f32e237941b4047536" kindref="member">dot</ref>(line,<sp/><ref refid="core_2all_8hpp_1ae6bbe80dfafc6e30f518f3de1cafec50" kindref="member">point</ref>{x,<sp/>1}));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ch.min(x)<sp/>==<sp/>mn);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="namespaceconvex__hull__trick_1_1test_1a05eb98d10b7444bbdc9fe64f4d99676a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a05eb98d10b7444bbdc9fe64f4d99676a" kindref="member">test_geometry</ref>()<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a923d7187d947f574ed2f5b54d9406f69" kindref="member">test_dot</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a84a3352ebc4eb5a1f911bb8e8d1af61d" kindref="member">test_wedge</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a9b689c83ba8f830281d1aabf43efd1e4" kindref="member">test_ccw</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a1407d23268d09f369dbb939414ec7961" kindref="member">test_less</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1aa454df2800722deea3ac74b53e40a21b" kindref="member">test_convex_min</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1a585d91f97ee3a90cbcdb2ba5bbfe94ac" kindref="member">test_hull</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconvex__hull__trick_1_1test_1af431d14b14918c006bfb450ff5a69a81" kindref="member">test_cht</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>convex_hull_trick::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceconvex__hull__trick_1_1test" kindref="compound">convex_hull_trick::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/ds/test_cht.hpp"/>
  </compounddef>
</doxygen>
