<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__modulo_8hpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_modulo.hpp.rst.txt</compoundname>
    <includes refid="core_8hpp" local="yes">core.hpp</includes>
    <incdepgraph>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt</label>
        <link refid="program__listing__file__modulo_8hpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core.hpp</label>
        <link refid="core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structno__mod" prot="public">no_mod</innerclass>
    <innerclass refid="structmodulo" prot="public">modulo</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__modulo_8hpp_8rst_8txt_1a9c9fc0dad8356029650b508d3da7dcf0" prot="public" static="no" mutable="no">
        <type>_program_listing_file_modulo</type>
        <definition>_program_listing_file_modulo hpp</definition>
        <argsstring></argsstring>
        <name>hpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="2" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1afc1dd5f28a1c3d3ba147d23ef021acce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T power</definition>
        <argsstring>(T a, ll b)</argsstring>
        <name>power</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="17" column="18" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="17" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1ad2760fd219bdd4497bb3f5ee8f37c8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll mod</definition>
        <argsstring>(ll a, const ll b)</argsstring>
        <name>mod</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="34" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1ab62f4e1cbc6ac98e262f8ce0bf6e9fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll mod_eq</definition>
        <argsstring>(ll &amp;a, const ll b)</argsstring>
        <name>mod_eq</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="41" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a146074c3251f452432e782dd110a5347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo identity</definition>
        <argsstring>(plus&lt;&gt;, modulo)</argsstring>
        <name>identity</name>
        <param>
          <type>plus&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="55" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1ad74657cbefb6d9077112741088cc0b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo identity</definition>
        <argsstring>(multiplies&lt;&gt;, modulo)</argsstring>
        <name>identity</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="56" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1aff442628ab569d8669a7f5a0c6d44040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo operator+</definition>
        <argsstring>(modulo const &amp;a, modulo const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="57" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a04357adb2dbe70b08b261c3f77bf0817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo operator++</definition>
        <argsstring>(modulo &amp;a)</argsstring>
        <name>operator++</name>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="61" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a58c3b8310833a82fc16f72882dc81220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo operator-</definition>
        <argsstring>(modulo const &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="62" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a486fcb1f707601c3deb38e6dc4c86fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>bin</definition>
        <argsstring>(==, modulo)</argsstring>
        <name>bin</name>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="65" column="4" declfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" declline="65" declcolumn="4"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a6cf5b40fea7fbcdeddf339b40cce289c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo operator*</definition>
        <argsstring>(modulo const &amp;a, modulo const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="66" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a1de2201b825244a50237413786f6e970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref></type>
        <definition>modulo invert</definition>
        <argsstring>(multiplies&lt;&gt;, modulo const &amp;b)</argsstring>
        <name>invert</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="78" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1a7ce526749b425b6d9a72d0dbabd3ad8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto&amp; operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, modulo const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref> const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="83" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1af63abc641089d55f193ed28ed00f7eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_power</definition>
        <argsstring>()</argsstring>
        <name>test_power</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="86" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1af249c063d4cee0dc930796b8728265e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_md</definition>
        <argsstring>()</argsstring>
        <name>test_md</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="94" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__modulo_8hpp_8rst_8txt_1ace704e27d561de2f121af8778c37d2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_modulo</definition>
        <argsstring>()</argsstring>
        <name>test_modulo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" line="99" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt" bodystart="99" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_modulo.hpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>.hpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">===================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_modulo.hpp&gt;`<sp/>(``<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>.hpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/>#include<sp/></highlight><highlight class="stringliteral">&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"><sp/>modulo_namespace<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>invert_t<sp/>=<sp/>decltype(invert(std::declval&lt;Args&gt;()...));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>power(T<sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(experimental::is_detected_v&lt;invert_t,<sp/>multiplies&lt;&gt;,<sp/>decltype(a)&gt;)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>invert(multiplies{},<sp/>a);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;b<sp/>&lt;<sp/>0<sp/>but<sp/>unable<sp/>to<sp/>inverse<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ret<sp/>=<sp/>identity(multiplies&lt;&gt;{},<sp/>a);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>b;<sp/>b<sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mod(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>%=<sp/>b;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mod_eq(<ref refid="structll" kindref="compound">ll</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>mod(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="42" refid="structno__mod" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="43" refid="structmodulo" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>modulus<sp/>=</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e9<sp/>+</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>()<sp/>:<sp/>x{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(T<sp/>x_)<sp/>:<sp/>x(mod(x_,<sp/>modulo::modulus))<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/>x(x_)<sp/>{}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(plus&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator+(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.x<sp/>+<sp/>b.x;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/>modulo::modulus<sp/>?<sp/>sum<sp/>-<sp/>modulo::modulus<sp/>:<sp/>sum,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator++(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator-(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{modulo::modulus<sp/>-<sp/>a.x,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>ADL<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>using<sp/>::operator-;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>bin(==,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator*(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ull<sp/>quot<sp/>=<sp/>ld(a.x)<sp/>*<sp/>ld(b.x)<sp/>/<sp/>ld(modulo::modulus);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>approximate<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/>ull(a.x)<sp/>*<sp/>ull(b.x)<sp/>-<sp/>ull(modulo::modulus)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/>modulo::modulus)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>invert(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(b<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>power(b,<sp/>modulo::modulus<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>using<sp/>::operator/;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_power()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(power(2,<sp/>3)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(power(3,<sp/>10)<sp/>==<sp/>59049);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{56888193});</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>-1000)<sp/>*<sp/>power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{1},<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_md()<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{7,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{34}<sp/>/<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{-2}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{4});</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{2}<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{6}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3});</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_modulo()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_power();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_md();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>modulo_namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">modulo_namespace;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>operator()(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_modulo.hpp.rst.txt"/>
  </compounddef>
</doxygen>
