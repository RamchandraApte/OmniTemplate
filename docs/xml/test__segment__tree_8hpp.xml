<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__segment__tree_8hpp" kind="file" language="C++">
    <compoundname>test_segment_tree.hpp</compoundname>
    <includes refid="segment__tree_8hpp" local="yes">segment_tree.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="12">
        <label>core/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="9">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>segment_tree.hpp</label>
        <link refid="segment__tree_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_segment_tree.hpp</label>
        <link refid="test__segment__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_segment_tree.hpp</label>
        <link refid="test__segment__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesegment__tree">segment_tree</innernamespace>
    <innernamespace refid="namespacesegment__tree_1_1test">segment_tree::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="segment__tree_8hpp" kindref="compound">segment_tree.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespacesegment__tree_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree_1_1test" kindref="compound">segment_tree::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespacesegment__tree_1_1test_1a216822c7d0ea6df09e13ff90a519e0fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_lazy,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ptr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_pers,<sp/>ll<sp/>base&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesegment__tree_1_1test_1a216822c7d0ea6df09e13ff90a519e0fd" kindref="member">test_segment_tree_impl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree&lt;ll, Max, plus&lt;&gt;</ref>,<sp/>has_lazy,<sp/>has_ptr,<sp/>has_pers,<sp/>base&gt;<sp/>seg{1000};</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>3)<sp/>==<sp/>-<ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(7,<sp/>9)<sp/>==<sp/>-<ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>10)<sp/>{<sp/>seg.update(i,<sp/>i<sp/>+<sp/>1,<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);<sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upd_old<sp/>=<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seg.update(0,<sp/>1,<sp/>0);<sp/>};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NodePtr<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>decltype(seg)::NodeExp<sp/>*;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>NodePtr<sp/>old;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old<sp/>=<sp/>upd_old();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upd_old();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(2,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old2<sp/>=<sp/>seg.update(4,<sp/>5,<sp/>3);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(2,<sp/>3,<sp/>-2);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>seg.update(4,<sp/>5,<sp/>-3);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>0,<sp/>10)<sp/>{<sp/>seg.update(i,<sp/>i<sp/>+<sp/>1,<sp/>-<ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(0,<sp/>10,<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upd1<sp/>=<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seg.update(3,<sp/>4,<sp/>10);<sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodePtr<sp/>old_lazy;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_lazy<sp/>=<sp/>upd1();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upd1();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old_lazy)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(2,<sp/>4,<sp/>20);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(3,<sp/>4)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>3)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>10)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg.update(0,<sp/>2,<sp/>10);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(1,<sp/>10)<sp/>==<sp/>30);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(2,<sp/>4,<sp/>old2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(seg.query(0,<sp/>10,<sp/>old_lazy)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66" refid="namespacesegment__tree_1_1test_1a9d9bbf8a59763caf631ceb0808e1b105" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesegment__tree_1_1test_1a9d9bbf8a59763caf631ceb0808e1b105" kindref="member">test_segment_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>false,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>false,<sp/>false,<sp/>3&gt;();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>lazy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;true,<sp/>false,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>lazy<sp/>and<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>false,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>ptr<sp/>and<sp/>pers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;false,<sp/>true,<sp/>true,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>lazy<sp/>and<sp/>ptr<sp/>and<sp/>pers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>test_segment_tree_impl&lt;true,<sp/>true,<sp/>true,<sp/>2&gt;();</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>segment_tree::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree_1_1test" kindref="compound">segment_tree::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/ds/test_segment_tree.hpp"/>
  </compounddef>
</doxygen>
