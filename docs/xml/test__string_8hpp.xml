<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__string_8hpp" kind="file" language="C++">
    <compoundname>test_string.hpp</compoundname>
    <includes refid="string_8hpp" local="yes">string.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="30">
        <label>number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="14">
        <label>queue</label>
      </node>
      <node id="2">
        <label>string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/string/test_string.hpp</label>
        <link refid="test__string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="24">
        <label>experimental/source_location</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="26">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>unordered_set</label>
      </node>
      <node id="23">
        <label>experimental/iterator</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>random</label>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="29">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="28">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>climits</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>thread</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/string/test_string.hpp</label>
        <link refid="test__string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacestring__tools">string_tools</innernamespace>
    <innernamespace refid="namespacestring__tools_1_1test">string_tools::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string_8hpp" kindref="compound">string.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespacestring__tools_1_1test_1ac1a1619c70d343d8407613e3c4bbd27a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1ac1a1619c70d343d8407613e3c4bbd27a" kindref="member">test_hash_str</ref>()<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>main_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;OmniTemplate,<sp/>OmniTemplate&quot;</highlight><highlight class="normal">sv;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1hash__str" kindref="compound">hash_str</ref><sp/>func{main_str};</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>func(main_str.substr(0,<sp/>3));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;string_view,<sp/>ll,<sp/>hash_str&gt;<sp/>mapping({},<sp/>func);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omni1<sp/>=<sp/>main_str.substr(0,<sp/>4);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omni2<sp/>=<sp/>main_str.substr(14,<sp/>4);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>omn<sp/>=<sp/>main_str.substr(14,<sp/>3);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(omni1<sp/>==<sp/>omni2);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>mapping[omni1]<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapping[omni2]<sp/>==<sp/>42);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapping[omn]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17" refid="namespacestring__tools_1_1test_1a64626566a9a577a41d0fd03883992faa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a64626566a9a577a41d0fd03883992faa" kindref="member">test_bytehash</ref>()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__tools_1_1bytehash" kindref="compound">bytehash</ref><sp/>func{};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(func(i)<sp/>!=<sp/>func(i<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((func(tuple{to_string(i),<sp/>i})<sp/>!=<sp/>func(tuple{to_string(i),<sp/>i<sp/>+<sp/>1})));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24" refid="namespacestring__tools_1_1test_1a977a58b8c95886abef97342e2508769c" refkind="member"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="namespacestring__tools_1_1test_1a977a58b8c95886abef97342e2508769c" kindref="member">brute_search_all</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>expected;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(idx,<sp/>t.size())<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.substr(idx,<sp/>s.size())<sp/>==<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.push_back(idx);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expected;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33" refid="namespacestring__tools_1_1test_1a2c6d315516d609b40b8d8a7926b144f2" refkind="member"><highlight class="normal">vector&lt;ll&gt;<sp/><ref refid="namespacestring__tools_1_1test_1a2c6d315516d609b40b8d8a7926b144f2" kindref="member">search_it_all</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref><sp/>=<sp/><ref refid="namespacestring__tools_1a937559545ed9e49347ad5e0d0678f653" kindref="member">search_ra</ref>(t,<sp/>s);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{begin(<ref refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref>),<sp/>end(<ref refid="range_8hpp_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" kindref="member">cont</ref>)};</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacestring__tools_1a84505cf4aa04e720ec0807e413ce6437" kindref="member">search_all</ref>(t,<sp/>s)<sp/>==<sp/><ref refid="namespacestring__tools_1_1test_1a977a58b8c95886abef97342e2508769c" kindref="member">brute_search_all</ref>(t,<sp/>s));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="namespacestring__tools_1_1test_1a2c6d315516d609b40b8d8a7926b144f2" kindref="member">search_it_all</ref>(t,<sp/>s)<sp/>==<sp/><ref refid="namespacestring__tools_1_1test_1a977a58b8c95886abef97342e2508769c" kindref="member">brute_search_all</ref>(t,<sp/>s));</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42" refid="namespacestring__tools_1_1test_1a13975a43792d947ac38b017fb4764290" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a13975a43792d947ac38b017fb4764290" kindref="member">test_search_it</ref>()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abbaababaaabbaababaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;aba&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;aba&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;abbaababaaabbaababaa&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abbaababaaabbcababaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;aabc&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abbaababaaabbaababaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;aaaaaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abbaababaaabbaababaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abbaababaaabbaababaa&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abccbabcbaccbaabcabbababc&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a5b129e7acba109e81757a0f02f38da1b" kindref="member">test_search_it_one</ref>(</highlight><highlight class="stringliteral">&quot;abccbabcbaccbaabca!\1+!$bbabab+!\1c&quot;</highlight><highlight class="normal">s,<sp/></highlight><highlight class="stringliteral">&quot;+!\1&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54" refid="namespacestring__tools_1_1test_1a93443a5be0ecc44e9264ce39390c8441" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a93443a5be0ecc44e9264ce39390c8441" kindref="member">test_string</ref>()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1ac1a1619c70d343d8407613e3c4bbd27a" kindref="member">test_hash_str</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a64626566a9a577a41d0fd03883992faa" kindref="member">test_bytehash</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestring__tools_1_1test_1a13975a43792d947ac38b017fb4764290" kindref="member">test_search_it</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/string/test_string.hpp"/>
  </compounddef>
</doxygen>
