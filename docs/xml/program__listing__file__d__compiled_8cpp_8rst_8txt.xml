<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="program__listing__file__d__compiled_8cpp_8rst_8txt" kind="file" language="C++">
    <compoundname>program_listing_file_d_compiled.cpp.rst.txt</compoundname>
    <includes local="no">bits/stdc++.h</includes>
    <includes local="no">experimental/iterator</includes>
    <includes local="no">experimental/source_location</includes>
    <incdepgraph>
      <node id="2">
        <label>bits/stdc++.h</label>
      </node>
      <node id="4">
        <label>experimental/source_location</label>
      </node>
      <node id="3">
        <label>experimental/iterator</label>
      </node>
      <node id="1">
        <label>docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt</label>
        <link refid="program__listing__file__d__compiled_8cpp_8rst_8txt"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structlets__add" prot="public">lets_add</innerclass>
    <innerclass refid="structit__base" prot="public">it_base</innerclass>
    <innerclass refid="structint__it" prot="public">int_it</innerclass>
    <innerclass refid="structrange" prot="public">range</innerclass>
    <innerclass refid="structMax" prot="public">Max</innerclass>
    <innerclass refid="structMin" prot="public">Min</innerclass>
    <innerclass refid="structrin" prot="public">rin</innerclass>
    <innerclass refid="structutility_1_1with" prot="public">utility::with</innerclass>
    <innerclass refid="structutility_1_1fix" prot="public">utility::fix</innerclass>
    <innerclass refid="structutility_1_1ar" prot="public">utility::ar</innerclass>
    <innerclass refid="structutility_1_1ar_3_01T_0fn_0e_4" prot="public">utility::ar&lt; T[n]&gt;</innerclass>
    <innerclass refid="structutility_1_1random__device__patch" prot="public">utility::random_device_patch</innerclass>
    <innerclass refid="structutility_1_1Empty" prot="public">utility::Empty</innerclass>
    <innerclass refid="structdsu__ds_1_1dsu" prot="public">dsu_ds::dsu</innerclass>
    <innerclass refid="structmodulo__namespace_1_1no__mod" prot="public">modulo_namespace::no_mod</innerclass>
    <innerclass refid="structmodulo__namespace_1_1modulo" prot="public">modulo_namespace::modulo</innerclass>
    <innerclass refid="structstd_1_1hash_3_01modulo_01_4" prot="public">std::hash&lt; modulo &gt;</innerclass>
    <innerclass refid="classPolynomial" prot="public">Polynomial</innerclass>
    <innerclass refid="structlinear__algebra_1_1matrix" prot="public">linear_algebra::matrix</innerclass>
    <innerclass refid="structgraph__theory_1_1edge" prot="public">graph_theory::edge</innerclass>
    <innerclass refid="structgraph__theory_1_1gsearch" prot="public">graph_theory::gsearch</innerclass>
    <innerclass refid="structgraph__theory_1_1dfs" prot="public">graph_theory::dfs</innerclass>
    <innerclass refid="structgraph__theory_1_1bfs" prot="public">graph_theory::bfs</innerclass>
    <innerclass refid="structtime__tools_1_1timer" prot="public">time_tools::timer</innerclass>
    <innernamespace refid="namespacedebug__tools">debug_tools</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespaceutility">utility</innernamespace>
    <innernamespace refid="namespacedsu__ds">dsu_ds</innernamespace>
    <innernamespace refid="namespacemodulo__namespace">modulo_namespace</innernamespace>
    <innernamespace refid="namespacelinear__algebra">linear_algebra</innernamespace>
    <innernamespace refid="namespacegraph__theory">graph_theory</innernamespace>
    <innernamespace refid="namespacetime__tools">time_tools</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78" prot="public" static="no" strong="no">
        <type></type>
        <name>isect</name>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78af9a713ed26dee661a259730e650987e4" prot="public">
          <name>null</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac667beae9e87c3d08798cd0a05efc536" prot="public">
          <name>dis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a77dcb2124006c2c1902d0f49f75eacdc" prot="public">
          <name>over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78a37a1cc6c35e50ff31a8bda2d00998c1e" prot="public">
          <name>cont</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3642ae4ffe47e0d16c399aead9674f78ac1400642bc856b68972da1ae5e7a1015" prot="public">
          <name>eq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="152" column="14" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="152" bodyend="152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a583d558126ab02babe89a77ae06a4156" prot="public" static="no">
        <type>long long</type>
        <definition>using lli =  long long</definition>
        <argsstring></argsstring>
        <name>lli</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="55" column="34" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a25adbdf7a4a6b491d22ca84426e075c6" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>using ull =  unsigned long long</definition>
        <argsstring></argsstring>
        <name>ull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="56" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ad54dde638d1ae3e9bb08956f539b1883" prot="public" static="no">
        <type>long long</type>
        <definition>using ll =  long long</definition>
        <argsstring></argsstring>
        <name>ll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="57" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a8634e9b99169b29bc9a86927e715da54" prot="public" static="no">
        <type>vector&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using vl =  vector&lt;ll&gt;</definition>
        <argsstring></argsstring>
        <name>vl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="58" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a2e2e73e53fc509e05f252ef083503838" prot="public" static="no">
        <type>long double</type>
        <definition>using ld =  long double</definition>
        <argsstring></argsstring>
        <name>ld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="59" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a58e2677d80a09b5be0f0e56ef70d4507" prot="public" static="no">
        <type>pair&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using pr =  pair&lt;ll, ll&gt;</definition>
        <argsstring></argsstring>
        <name>pr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="59" column="26" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ac6774acaa7fff278845893bd84e35525" prot="public" static="no">
        <type>complex&lt; double &gt;</type>
        <definition>using com =  complex&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>com</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="60" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ae6bbe80dfafc6e30f518f3de1cafec50" prot="public" static="no">
        <type>complex&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using point =  complex&lt;ll&gt;</definition>
        <argsstring></argsstring>
        <name>point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="61" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a52c977d91e62bd8e617e5cb2926547e1" prot="public" static="no">
        <type>bitset&lt; numeric_limits&lt; <ref refid="structll" kindref="compound">ll</ref> &gt;::digits &gt;</type>
        <definition>using bt =  bitset&lt;numeric_limits&lt;ll&gt;::digits&gt;</definition>
        <argsstring></argsstring>
        <name>bt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="63" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ac0b978e8ffc2c44656160a679f86e22a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Comp</type>
          </param>
        </templateparamlist>
        <type>std::priority_queue&lt; T, vector&lt; T &gt;, Comp &gt;</type>
        <definition>using prio_queue_t =  std::priority_queue&lt;T, vector&lt;T&gt;, Comp&gt;</definition>
        <argsstring></argsstring>
        <name>prio_queue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="65" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a71fb2247d044e41f5345bcdb26020926" prot="public" static="no">
        <type>high_resolution_clock</type>
        <definition>using clock_ =  high_resolution_clock</definition>
        <argsstring></argsstring>
        <name>clock_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="66" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a9925e7a8568cf11b8431a0e634ada482" prot="public" static="no">
        <type>unordered_map&lt; <ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
        <definition>using um =  unordered_map&lt;ll, ll&gt;</definition>
        <argsstring></argsstring>
        <name>um</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="68" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a6288a170c5a67a2c0b45c858a043722a" prot="public" static="no">
        <type><ref refid="structrange" kindref="compound">range</ref>&lt; <ref refid="structint__it" kindref="compound">int_it</ref>&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; &gt;</type>
        <definition>using ra =  range&lt;int_it&lt;ll&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="147" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ab4c4b06b1f952a0071d8ae50f97f9788" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>unordered_set&lt; T &gt;</type>
        <definition>using uset =  unordered_set&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>uset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="210" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a391ecbfa26a20f6287fb4048f56b0978" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T(*)(T, T)</type>
        <definition>using bin_op =  T(*)(T, T)</definition>
        <argsstring></argsstring>
        <name>bin_op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="262" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a9421a6cf8f46a225e0acc5ce060a4529" prot="public" static="no" mutable="no">
        <type>_program_listing_file_d_compiled</type>
        <definition>_program_listing_file_d_compiled cpp</definition>
        <argsstring></argsstring>
        <name>cpp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="2" column="34" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a10aff294e2147e1cfe921bc2648b4399" prot="public" static="no" mutable="no">
        <type>vector&lt; pair&lt; string, string &gt; &gt;</type>
        <definition>vector&lt;pair&lt;string, string&gt; &gt; lets</definition>
        <argsstring></argsstring>
        <name>lets</name>
        <initializer>{{&quot;__debug::&quot;, &quot;&quot;},
         {&quot;const &quot;, &quot;&quot;},
         {&quot;__cxx11::basic_string&lt;char&gt;&quot;, &quot;string&quot;}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="37" column="11" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a887360e3850178f6608c6613e0a1a3fd" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l0</definition>
        <argsstring></argsstring>
        <name>_l0</name>
        <initializer>{&quot;std&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="48" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a7ca1a568a8496c9b4edf4be3f432321c" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l1</definition>
        <argsstring></argsstring>
        <name>_l1</name>
        <initializer>{&quot;chrono&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="53" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a22379df1e86b2eed93316dad5f5fc29c" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l2</definition>
        <argsstring></argsstring>
        <name>_l2</name>
        <initializer>{&quot;literals&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="54" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a85e9bb6d1cb5bb2f7e0fc172bd6520a7" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l3</definition>
        <argsstring></argsstring>
        <name>_l3</name>
        <initializer>{&quot;placeholders&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="55" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a12fca5daaf2be79fe5579fffc96b2f5b" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l4</definition>
        <argsstring></argsstring>
        <name>_l4</name>
        <initializer>{&quot;long long&quot;, &quot;lli&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="55" column="53" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a00199af4a1dd1537d3460d30a23a4cfc" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l5</definition>
        <argsstring></argsstring>
        <name>_l5</name>
        <initializer>{&quot;unsigned long long&quot;, &quot;ull&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="56" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1aace759c5abdc0bfef647a05601df0e43" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l6</definition>
        <argsstring></argsstring>
        <name>_l6</name>
        <initializer>{&quot;long long&quot;, &quot;<ref refid="structll" kindref="compound">ll</ref>&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="57" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a4115c743445075aa7d4d47b740d7700a" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l7</definition>
        <argsstring></argsstring>
        <name>_l7</name>
        <initializer>{&quot;vector&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;&quot;, &quot;vl&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="58" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a6e89d1566d92575827b56cb2df6cdc2d" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l8</definition>
        <argsstring></argsstring>
        <name>_l8</name>
        <initializer>{&quot;long double&quot;, &quot;ld&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="59" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a94dfa22af10afa582d0a52c502410029" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l9</definition>
        <argsstring></argsstring>
        <name>_l9</name>
        <initializer>{&quot;pair&lt;<ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref>&gt;&quot;, &quot;pr&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="59" column="44" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a7f123dc69f133249ca8276f61dd896d3" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l10</definition>
        <argsstring></argsstring>
        <name>_l10</name>
        <initializer>{&quot;complex&lt;double&gt;&quot;, &quot;com&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="60" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a25f86eeeaca31fe984b8efa9368ca153" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l11</definition>
        <argsstring></argsstring>
        <name>_l11</name>
        <initializer>{&quot;complex&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;&quot;, &quot;point&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="61" column="25" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1afebee3862a7cdadd66b8f7bb41aef18f" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l12</definition>
        <argsstring></argsstring>
        <name>_l12</name>
        <initializer>{&quot;unsigned long long&quot;, &quot;ull&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="62" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a033f6ef338fd94ab5b978e396b7b0be0" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l13</definition>
        <argsstring></argsstring>
        <name>_l13</name>
        <initializer>{&quot;high_resolution_clock&quot;, &quot;clock_&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="66" column="26" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ac70e6dec85787b96017183a5714b152e" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l14</definition>
        <argsstring></argsstring>
        <name>_l14</name>
        <initializer>{&quot;this_thread&quot; &quot;::&quot;, &quot;&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="67" column="30" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a2b9bf23b319792cb36e876ac9ae3c35b" prot="public" static="no" mutable="no">
        <type><ref refid="structlets__add" kindref="compound">lets_add</ref></type>
        <definition>lets_add _l15</definition>
        <argsstring></argsstring>
        <name>_l15</name>
        <initializer>{&quot;unordered_map&lt;<ref refid="structll" kindref="compound">ll</ref>, <ref refid="structll" kindref="compound">ll</ref>&gt;&quot;, &quot;um&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="68" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ab89b6ceb8bf54011eedd872b54361eca" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto inf</definition>
        <argsstring></argsstring>
        <name>inf</name>
        <initializer>= <ref refid="structll" kindref="compound">ll</ref>(numeric_limits&lt;<ref refid="structll" kindref="compound">ll</ref>&gt;::max()) / 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="76" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a6a2dbe8e1a58258f9060682cf7ea063b" prot="public" static="no" mutable="no">
        <type>const auto</type>
        <definition>const auto delim</definition>
        <argsstring></argsstring>
        <name>delim</name>
        <initializer>= &quot;, &quot;s</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="77" column="15" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a989a29f26fc8591b33ecf33d4d2c7029" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <initializer>= 2 * 3.1415926535897932384626433L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="78" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a5da77c5a58b4193f997d91f2130efd53" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool multitest</definition>
        <argsstring></argsstring>
        <name>multitest</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="1508" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="1508" bodyend="-1" declfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" declline="79" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1acf30f45bb690161eda6eb343b019d6e7" prot="public" static="no" mutable="no">
        <type>auto &amp;</type>
        <definition>auto&amp; in</definition>
        <argsstring></argsstring>
        <name>in</name>
        <initializer>= cin</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="1476" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="1476" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a2a9660e705c73071a9c68c86e5e92e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator==</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="125" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1adf37877debb40c87ce158743d128a8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="126" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a5b1fcbc62cc963f6ab2598b13f114dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="137" column="16" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a295cbb09d532a8eeeaab519fd1db0928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&amp;</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="140" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a438bd5fc0a79e42a6a2abb632203f925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto rev</definition>
        <argsstring>(const Range &amp;r)</argsstring>
        <name>rev</name>
        <param>
          <type>const Range &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="143" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1acb6120c8a8224e1d4465bf980bc01d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt;</type>
        <definition>int_it&lt;T&gt; operator+</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a, int_it&lt; T &gt; const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="148" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a8b072587149274d1639908e4edb23d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt;</type>
        <definition>int_it&lt;T&gt; operator-</definition>
        <argsstring>(int_it&lt; T &gt; const &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structint__it" kindref="compound">int_it</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="151" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a5eeb4818d038580518b4e590a066ec12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto intersect</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="153" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="153" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a2e6b26fca3ba13b074816e7b97f8245d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator^</definition>
        <argsstring>(range&lt; T &gt; const &amp;a, range&lt; T &gt; const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structrange" kindref="compound">range</ref>&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="168" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a3eb62dcf88ab5afad4d62c6fea4bb570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto filter</definition>
        <argsstring>(vector&lt; ra &gt; &amp;v)</argsstring>
        <name>filter</name>
        <param>
          <type>vector&lt; <ref refid="structrange" kindref="compound">ra</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="171" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="171" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a141476c36a8f609ac7c776be162abb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator+=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator+=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="187" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a566f5b78944cfa1ff2b470ecd0522ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator-=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="188" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ac66e5f2d4fb3a7d5076a44e419736713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator*=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator*=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="189" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a35c5f7ec97de94c93f2301e16d3f7efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator/=</definition>
        <argsstring>(T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="190" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a4cb6b7e98aadd3fa7ffc759c5e14596d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_floating_point_v&lt; T &gt;, T &gt;</type>
        <definition>enable_if_t&lt;is_floating_point_v&lt;T&gt;, T&gt; invert</definition>
        <argsstring>(multiplies&lt;&gt;, const T &amp;x)</argsstring>
        <name>invert</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="191" column="28" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ae9e59a2d15287021fd21d14d2eb206c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Group</type>
          </param>
        </templateparamlist>
        <type>Group</type>
        <definition>Group operator/</definition>
        <argsstring>(Group const &amp;a, Group const &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>Group const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Group const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="192" column="22" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ab6822e2f5527212c7db6dd31be7f3ba6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator-</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="194" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a98ed0803268ba29fcc8977206b177923" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto operator!=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="198" column="19" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a1297749985d820e08c6c88a285dc80eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="201" column="18" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ae3edbf9ffcbf3c8b40d15f6666442cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;=</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="204" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ad8f1353b1f5665443a78d860006e9920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&gt;</definition>
        <argsstring>(const T1 &amp;a, const T2 &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="207" column="23" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a87d3fb5fed45f1a54221f7a8705addb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>um</type>
        <definition>um operator+</definition>
        <argsstring>(um a, um const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>um</type>
          <declname>a</declname>
        </param>
        <param>
          <type>um const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="211" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="211" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a8acbbd6e305005c27020dfb9bbe27d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator|</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="218" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a9e98ecb7739ca6a5c0069a9a26d2a731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&amp;</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="224" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="224" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a17c44ba56ddae051a9fdf806cab4bb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sub_set</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b, unordered_set&lt; T &gt; &amp;ret)</argsstring>
        <name>sub_set</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; &amp;</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="234" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1af237204859d16b6fadb92d576c7b33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator-</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="243" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a278d4d0450b96c1926a34fe49f29d602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator^</definition>
        <argsstring>(unordered_set&lt; T &gt; const &amp;a, unordered_set&lt; T &gt; const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unordered_set&lt; T &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="247" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a7fcf9006b0b6d5ce6b426ac6dea3b567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator*</definition>
        <argsstring>(vector&lt; T &gt; a, vector&lt; T &gt; b)</argsstring>
        <name>operator*</name>
        <param>
          <type>vector&lt; T &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>vector&lt; T &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="252" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1af877591533298d5fba3df85680cabb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator+</definition>
        <argsstring>(Iterator it, enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, ll &gt; n)</argsstring>
        <name>operator+</name>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>enable_if_t&lt;!is_same&lt; typename iterator_traits&lt; decltype(it)&gt;::iterator_category, random_access_iterator_tag &gt;::value, <ref refid="structll" kindref="compound">ll</ref> &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="258" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ac969ae49524a67aba9be0f061955ef23" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structll" kindref="compound">ll</ref></type>
        <definition>constexpr ll identity</definition>
        <argsstring>(bin_op&lt; ll const &amp; &gt; const &amp;f)</argsstring>
        <name>identity</name>
        <param>
          <type>bin_op&lt; <ref refid="structll" kindref="compound">ll</ref> const &amp; &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="267" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a1927210d55cc1384803f4a609d7174ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="structll" kindref="compound">ll</ref></type>
        <definition>constexpr ll identity</definition>
        <argsstring>(bin_op&lt; ll &gt; const &amp;f)</argsstring>
        <name>identity</name>
        <param>
          <type>bin_op&lt; <ref refid="structll" kindref="compound">ll</ref> &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="272" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a09af32a8d21cf0ca5017ce40502a2a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(plus&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>plus&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="276" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1acc5a0ae67ef6a3bd347c85cab4a15313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(multiplies&lt;&gt;, ll)</argsstring>
        <name>identity</name>
        <param>
          <type>multiplies&lt;&gt;</type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="277" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a19000e539a20acfdcd7e8fdce1d970f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Max, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="structMax" kindref="compound">Max</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="281" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1aa9ba94adf14b5b5566e3a750fa5255b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structll" kindref="compound">ll</ref></type>
        <definition>ll identity</definition>
        <argsstring>(Min, ll)</argsstring>
        <name>identity</name>
        <param>
          <type><ref refid="structMin" kindref="compound">Min</ref></type>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="285" column="7" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1ab13ab1059a1675ee7a774c4524b84d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto operator&lt;&lt;</definition>
        <argsstring>(R &amp;r, const T &amp;x) -&gt; decltype(r.in &gt;&gt; const_cast&lt; T &amp; &gt;(x), declval&lt; enable_if_t&lt; is_same&lt; R, rin &gt;::value, rin &amp; &gt;&gt;())</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>R &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="348" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="348" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a7df52f31e81b51a76e8f8699accaf3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>enable_if_t&lt; is_same&lt; T, istream &gt;::value, <ref refid="structrin" kindref="compound">rin</ref> &gt;</type>
        <definition>enable_if_t&lt;is_same&lt;T, istream&gt;::value, rin&gt; operator&gt;&gt;</definition>
        <argsstring>(Stream &amp;is, T &amp;x)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="355" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1affce1f2cffc83e9e4ecc9203fdd32d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto&amp; operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, tuple&lt; T... &gt; t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>tuple&lt; T... &gt;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="360" column="4" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="360" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a1b122fd1e3de03a421d98f4bbb1473d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto print</definition>
        <argsstring>(const T1 &amp;arg1, const Ts &amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="370" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="370" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a99887d7be335593672a7bc2c02b1612d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt;</type>
        <definition>Polynomial&lt;T&gt; operator+</definition>
        <argsstring>(const Polynomial&lt; T &gt; &amp;a, const Polynomial&lt; T &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="772" column="27" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="772" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a46fc0d6fc28acfd3ee6e1e14b25b8a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt;</type>
        <definition>Polynomial&lt;T&gt; operator*</definition>
        <argsstring>(const Polynomial&lt; T &gt; &amp;a, const Polynomial&lt; T &gt; &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="780" column="27" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a42749f0e5bce0c863216022054c4c674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Polynomial&lt; T &gt; &amp;a, const Polynomial&lt; T &gt; &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="787" column="21" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="787" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1af2bc40d890a9156a90107a9ff3b0260c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_polynomial</definition>
        <argsstring>()</argsstring>
        <name>test_polynomial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="794" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="794" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1af095a232149097b5605064623a9345ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void main2</definition>
        <argsstring>()</argsstring>
        <name>main2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="1509" column="9" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="1509" bodyend="1530" declfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" declline="1470" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="program__listing__file__d__compiled_8cpp_8rst_8txt_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" line="1478" column="8" bodyfile="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt" bodystart="1478" bodyend="1506"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">..<sp/>_program_listing_file_d_compiled.cpp:</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">Program<sp/>Listing<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>File<sp/>d_compiled.cpp</highlight></codeline>
<codeline lineno="5"><highlight class="normal">=======================================</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">|exhale_lsh|<sp/>:ref:`Return<sp/>to<sp/>documentation<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>&lt;file_d_compiled.cpp&gt;`<sp/>(``d_compiled.cpp``)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">..<sp/>|exhale_lsh|<sp/>unicode::<sp/>U+021B0<sp/>..<sp/>UPWARDS<sp/>ARROW<sp/>WITH<sp/>TIP<sp/>LEFTWARDS</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">..<sp/>code-block::<sp/>cpp</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>#pragma<sp/>once</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/>#ifndef<sp/>PRE</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/>#define<sp/>REALGCC</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/>#ifdef<sp/>REALGCC</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;bits/extc++.h&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;bits/stdc++.h&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;experimental/iterator&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>#include<sp/>&lt;experimental/source_location&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>#<sp/>1<sp/></highlight><highlight class="stringliteral">&quot;d.cpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/>#<sp/>1<sp/></highlight><highlight class="stringliteral">&quot;graph_theory.hpp&quot;</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>#<sp/>1<sp/></highlight><highlight class="stringliteral">&quot;core.hpp&quot;</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>#<sp/>26<sp/></highlight><highlight class="stringliteral">&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug_mode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>43<sp/>&quot;core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>vector&lt;pair&lt;string,<sp/>string&gt;&gt;<sp/>lets{{</highlight><highlight class="stringliteral">&quot;__debug::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;const<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;__cxx11::basic_string&lt;char&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlets__add" kindref="compound">lets_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/>lets.push_back({a,<sp/>b});<sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::priority_queue;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l0{</highlight><highlight class="stringliteral">&quot;std&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::make_ostream_joiner;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::ostream_joiner;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>experimental::source_location;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">chrono;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l1{</highlight><highlight class="stringliteral">&quot;chrono&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">literals;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l2{</highlight><highlight class="stringliteral">&quot;literals&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">placeholders;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l3{</highlight><highlight class="stringliteral">&quot;placeholders&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>lli<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l4{</highlight><highlight class="stringliteral">&quot;long<sp/>long&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lli&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ull<sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l5{</highlight><highlight class="stringliteral">&quot;unsigned<sp/>long<sp/>long&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ull&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l6{</highlight><highlight class="stringliteral">&quot;long<sp/>long&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ll&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vl<sp/>=<sp/>vector&lt;ll&gt;;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l7{</highlight><highlight class="stringliteral">&quot;vector&lt;ll&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vl&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ld<sp/>=<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l8{</highlight><highlight class="stringliteral">&quot;long<sp/>double&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ld&quot;</highlight><highlight class="normal">};<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pr<sp/>=<sp/>pair&lt;ll,<sp/>ll&gt;;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l9{</highlight><highlight class="stringliteral">&quot;pair&lt;ll,<sp/>ll&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pr&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>com<sp/>=<sp/>complex&lt;double&gt;;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l10{</highlight><highlight class="stringliteral">&quot;complex&lt;double&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;com&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>point<sp/>=<sp/>complex&lt;ll&gt;;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l11{</highlight><highlight class="stringliteral">&quot;complex&lt;ll&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;point&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ull<sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l12{</highlight><highlight class="stringliteral">&quot;unsigned<sp/>long<sp/>long&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ull&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bt<sp/>=<sp/>bitset&lt;numeric_limits&lt;ll&gt;::digits&gt;;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Comp&gt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>prio_queue_t<sp/>=<sp/>std::priority_queue&lt;T,<sp/>vector&lt;T&gt;,<sp/>Comp&gt;;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>clock_<sp/>=<sp/>high_resolution_clock;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l13{</highlight><highlight class="stringliteral">&quot;high_resolution_clock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;clock_&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">this_thread;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l14{</highlight><highlight class="stringliteral">&quot;this_thread&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>um<sp/>=<sp/>unordered_map&lt;ll,<sp/>ll&gt;;<sp/><ref refid="structlets__add" kindref="compound">lets_add</ref><sp/>_l15{</highlight><highlight class="stringliteral">&quot;unordered_map&lt;ll,<sp/>ll&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;um&quot;</highlight><highlight class="normal">};;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>inf<sp/>=<sp/><ref refid="structll" kindref="compound">ll</ref>(numeric_limits&lt;ll&gt;::max())<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>delim<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">s;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>tau<sp/>=<sp/>2<sp/>*<sp/>3.1415926535897932384626433L;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multitest;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;io.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;debug.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;operations.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;range.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structit__base" kindref="compound">it_base</ref><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>T<sp/>&amp;;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">difference_type</ref><sp/>=<sp/><ref refid="structll" kindref="compound">ll</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__it" kindref="compound">int_it</ref><sp/>:<sp/><ref refid="structit__base" kindref="compound">it_base</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>random_access_iterator_tag;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>x,<sp/>m;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integer&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref>(Integer<sp/>x_,<sp/>T<sp/>m_<sp/>=<sp/>1)<sp/>:<sp/>x(x_),<sp/>m(m_)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>x_stat;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x_stat<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator+(<ref refid="structll" kindref="compound">ll</ref><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>m<sp/>*<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator-(<ref refid="structll" kindref="compound">ll</ref><sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>m<sp/>*<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>operator-(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>-<sp/>y.x)<sp/>/<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator++()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+=<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator--()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-=<sp/>m;<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator--(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>--x;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__it" kindref="compound">int_it</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>++x;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>==<sp/>b.x;<sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>&lt;<sp/>b.x;<sp/>};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrange" kindref="compound">range</ref><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>bg,<sp/>ed;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range</ref>(T<sp/>ed_)<sp/>:<sp/><ref refid="structrange" kindref="compound">range</ref>(0LL,<sp/>ed_)<sp/>{}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrange" kindref="compound">range</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;bg_,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ed_)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bg(bg_),<sp/>ed(max(bg,<sp/>static_cast&lt;T&gt;(ed_)))<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bg;<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ed;<sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ed<sp/>-<sp/>bg;<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.bg<sp/>==<sp/>b.bg<sp/>?<sp/>a.ed<sp/>&gt;<sp/>b.ed<sp/>:<sp/>a.bg<sp/>&lt;<sp/>b.bg;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&amp;(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref>{max(a.bg,<sp/>b.bg),<sp/>min(a.ed,<sp/>b.ed)};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Range<sp/>&amp;r)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rev_it<sp/>=<sp/>reverse_iterator&lt;decltype(begin(r))&gt;;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">range</ref>{rev_it{end(r)},<sp/>rev_it{begin(r)}};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structrange" kindref="compound">ra</ref><sp/>=<sp/><ref refid="structrange" kindref="compound">range&lt;int_it&lt;ll&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/>operator+(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>+<sp/>b.x;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/>operator-(<ref refid="structint__it" kindref="compound">int_it&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-a.x;<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>isect<sp/>{<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>dis,<sp/>over,<sp/>cont,<sp/>eq<sp/>};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>intersect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isect::eq;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[1]<sp/>&lt;=<sp/>b[0])<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isect::dis;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[0]<sp/>&lt;=<sp/>b[0]<sp/>&amp;&amp;<sp/>b[1]<sp/>&lt;=<sp/>a[1])<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isect::cont;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[0]<sp/>&lt;=<sp/>b[0]<sp/>&amp;&amp;<sp/>a[1]<sp/>&lt;=<sp/>b[1])<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isect::over;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isect::null;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator^(<ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structrange" kindref="compound">range&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(intersect(a,<sp/>b),<sp/>intersect(b,<sp/>a));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filter(vector&lt;ra&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(begin(v),<sp/>end(v));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ra&gt;<sp/>sg;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sg.empty()<sp/>||<sp/>sg.back().ed<sp/>&lt;<sp/>p.ed)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sg.push_back(p);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>3<sp/>&quot;operations.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>+=(T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>a<sp/>+<sp/>b;<sp/>};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>-=(T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>a<sp/>-<sp/>b;<sp/>};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>*=(T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>a<sp/>*<sp/>b;<sp/>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>/=(T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>a<sp/>/<sp/>b;<sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>enable_if_t&lt;is_floating_point_v&lt;T&gt;,<sp/>T&gt;<sp/>invert(multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>/<sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Group&gt;<sp/>Group<sp/>operator/(Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>Group<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>invert(multiplies{},<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>-b;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constexpr<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(b<sp/>&lt;<sp/>a);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;=<sp/>a;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>&lt;<sp/>a;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uset<sp/>=<sp/>unordered_set&lt;T&gt;;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>um<sp/>operator+(um<sp/>a,<sp/>um<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>a[p.first]<sp/>+=<sp/>p.second;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>47<sp/>&quot;operations.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>bg;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.insert(begin(sm),<sp/>end(sm));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&amp;(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[sm,<sp/>bg]<sp/>=<sp/>minmax(a,<sp/>b);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>sm)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bg.count(x))<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sub_set(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>&amp;ret)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!b.count(x))<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.insert(x);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator-(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_set(a,<sp/>b,<sp/>ret);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator^(unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/>unordered_set&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_set&lt;T&gt;<sp/>ret<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>sub_set(b,<sp/>a,<sp/>ret);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator*(vector&lt;T&gt;<sp/>a,<sp/>vector&lt;T&gt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>c(a.size());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.size()})<sp/>{<sp/>c[i]<sp/>=<sp/>a[i]<sp/>*<sp/>b[i];<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+(Iterator<sp/>it,<sp/>enable_if_t&lt;!is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator_traits&lt;decltype(it)&gt;::iterator_category,<sp/>random_access_iterator_tag&gt;::value,<sp/><ref refid="structll" kindref="compound">ll</ref>&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>advance(it,<sp/>n);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bin_op<sp/>=<sp/>T(*)(T,<sp/>T);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>constexpr<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(bin_op&lt;ll<sp/>const<sp/>&amp;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(f)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max&lt;ll&gt;))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-inf;<sp/>};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(f)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min&lt;ll&gt;))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;<sp/>};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>constexpr<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(bin_op&lt;ll&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(f)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(gcd&lt;ll&gt;))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(plus&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(multiplies&lt;&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMax" kindref="compound">Max</ref><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(T<sp/>a,<sp/>T<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(<ref refid="structMax" kindref="compound">Max</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-inf;<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structMin" kindref="compound">Min</ref><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(T<sp/>a,<sp/>T<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>identity(<ref refid="structMin" kindref="compound">Min</ref>,<sp/><ref refid="structll" kindref="compound">ll</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>3<sp/>&quot;debug.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>12<sp/>&quot;debug.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedebug__tools" kindref="compound">debug_tools</ref><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a991f9f01ab3a0e664fabf0bd17fab95c" kindref="member">type_name</ref>([[maybe_unused]]<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>__PRETTY_FUNCTION__,<sp/>tar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>st<sp/>=<sp/>s.find(tar)<sp/>+<sp/>tar.size();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.substr(st,<sp/>s.find(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>st)<sp/>-<sp/>st);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a2b613fd4caa0fb48d04eb7e6f3bf6dff" kindref="member">replace</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>loc;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((loc<sp/>=<sp/>s.find(a))<sp/>!=<sp/>string::npos)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.substr(0,<sp/>loc)<sp/>+<sp/>b<sp/>+<sp/>s.substr(loc<sp/>+<sp/>a.size());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="namespacedebug__tools_1a991f9f01ab3a0e664fabf0bd17fab95c" kindref="member">type_name</ref>(v);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>lets)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="namespacedebug__tools_1a2b613fd4caa0fb48d04eb7e6f3bf6dff" kindref="member">replace</ref>(s,<sp/>p.first,<sp/>p.second);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>depth<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacedebug__tools_1a4190b5d045c8cfeb1e9a7332d55d9374" kindref="member">debug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;name,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_location<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;loc<sp/>=<sp/>source_location::current())<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug_mode)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{depth})<sp/>{<sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>loc.function_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>loc.line()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>--depth;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedebug__tools" kindref="compound">debug_tools</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>3<sp/>&quot;io.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrin" kindref="compound">rin</ref><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>istream<sp/>&amp;in;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrin" kindref="compound">rin</ref>(istream<sp/>&amp;in_)<sp/>:<sp/>in(in_)<sp/>{}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.empty())<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;operator&gt;&gt;(T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(*this)<sp/>&lt;&lt;<sp/>x;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;&lt;(R<sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;x)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(r.in<sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>declval&lt;enable_if_t&lt;is_same&lt;R,<sp/>rin&gt;::value,<sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;&gt;&gt;())<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>r.in<sp/>&gt;&gt;<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>enable_if_t&lt;is_same&lt;T,<sp/>istream&gt;::value,<sp/><ref refid="structrin" kindref="compound">rin</ref>&gt;<sp/>operator&gt;&gt;(Stream<sp/>&amp;is,<sp/>T<sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrin" kindref="compound">rin</ref><sp/>r{is};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&gt;&gt;<sp/>x;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/>tuple&lt;T...&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>apply(</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;f,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;...<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>f;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((os<sp/>&lt;&lt;<sp/>delim<sp/>&lt;&lt;<sp/>x),<sp/>...);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1<sp/>&amp;arg1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts<sp/>&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>arg1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>((cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>args),<sp/>...);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/>pair&lt;T...&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(p)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p.first<sp/>&lt;&lt;<sp/>delim<sp/>&lt;&lt;<sp/>p.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;&lt;(Stream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;v)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(begin(v),<sp/>declval&lt;decltype(os)&gt;())<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ed<sp/>=<sp/>begin(v);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>big<sp/>=<sp/>v.size()<sp/>&gt;<sp/>20;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(big)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>advance(ed,<sp/>20);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ed<sp/>=<sp/>end(v);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(v)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(begin(v),<sp/>ed,<sp/>make_ostream_joiner(os,<sp/>delim));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(big)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>delim<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;&lt;(<ref refid="structrin" kindref="compound">rin</ref><sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(begin(v),<sp/>declval&lt;decltype(os)&gt;())<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;elem<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>elem;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>89<sp/>&quot;core.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;utility.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utility<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">[[nodiscard]]<sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>old;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>&amp;v;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tp&gt;<sp/><ref refid="structutility_1_1with" kindref="compound">with</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tp<sp/>new_,<sp/>T<sp/>&amp;v_)<sp/>:<sp/>old(v_),<sp/>v(v_)<sp/>{<sp/>v<sp/>=<sp/>new_;<sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="structutility_1_1with" kindref="compound">with</ref>()<sp/>{<sp/>v<sp/>=<sp/>old;<sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_with()<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>var<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inner_func<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_w(23,<sp/>var);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>23);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>var<sp/>=<sp/>45;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>inner_func();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(var<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1fix" kindref="compound">fix</ref><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>Func<sp/>func;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func_)<sp/>:<sp/>func(func_)<sp/>{}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>operator()(Args<sp/>&amp;&amp;...<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>forward&lt;Args&gt;(args)...);<sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_eq(T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>max(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_eq(T<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;y)<sp/>{<sp/>x<sp/>=<sp/>min(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cache(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ch;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arg)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch.find(arg)<sp/>==<sp/>end(ch))<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg]<sp/>=<sp/>f(arg);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch[arg];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eq<sp/>=<sp/>equal_to&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uniq(Cont<sp/>v,<sp/>Eq<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;up<sp/>=<sp/>Eq{},<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;sp<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(begin(v),<sp/>end(v),<sp/>sp);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(unique(begin(v),<sp/>end(v),<sp/>up)<sp/>-<sp/>begin(v));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_uniq()<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((uniq(vl{2,<sp/>-1,<sp/>3,<sp/>-1,<sp/>2,<sp/>3})<sp/>==<sp/>vl{-1,<sp/>2,<sp/>3}));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((uniq&lt;equal_to&lt;&gt;,<sp/>greater&lt;&gt;&gt;(vl{1,<sp/>-3,<sp/>5})<sp/>==<sp/>vl{5,<sp/>1,<sp/>-3}));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>less&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>key_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;f,<sp/>T<sp/>g<sp/>=<sp/>T{})<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/>decltype(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g(f(forward&lt;decltype(args)&gt;(args))...);<sp/>};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_key_compare()<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>a{24,<sp/>25};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(key_compare&lt;greater&lt;&gt;&gt;([&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a[i];<sp/>})(1,<sp/>0));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prev_less(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>l(n,<sp/>-1);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>stack&lt;ll&gt;<sp/>s;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.size()<sp/>&amp;&amp;<sp/>!(s.top()<sp/>&lt;<sp/>v[i]))<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.pop();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.size())<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l[i]<sp/>=<sp/>s.top();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>s.push(v[i]);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>bit_ceil(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1LL<sp/>&lt;&lt;<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structll" kindref="compound">ll</ref>)<sp/>*<sp/>CHAR_BIT<sp/>-<sp/>__builtin_clzll(x<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_bit_ceil()<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(3)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(4)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil(5)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil((1LL<sp/>&lt;&lt;<sp/>45)<sp/>-<sp/>100)<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bit_ceil((1LL<sp/>&lt;&lt;<sp/>45))<sp/>==<sp/>1LL<sp/>&lt;&lt;<sp/>45);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>power_ceil(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pw;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>log_ceil(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>pw<sp/>=<sp/>1,<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pw<sp/>&lt;<sp/>x;<sp/>pw<sp/>*=<sp/>base,<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/>[[nodiscard]]<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>next_comb(<ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>tz<sp/>=<sp/>__builtin_ctzll(x);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y<sp/>=<sp/>x<sp/>+<sp/>(<ref refid="structll" kindref="compound">ll</ref>{1}<sp/>&lt;&lt;<sp/>tz);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>y<sp/>|<sp/>(y<sp/>^<sp/>x)<sp/>&gt;&gt;<sp/>(2<sp/>+<sp/>tz);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret<sp/>&gt;<sp/>x);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(__builtin_popcountll(ret)<sp/>==<sp/>__builtin_popcountll(x));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_next_comb()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x<sp/>=<sp/>0b111;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1011);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1101);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b1110);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0b1;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b10);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>next_comb(x);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>==<sp/>0b100);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap2(T<sp/>&amp;a,<sp/>T<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Func<sp/>&amp;func)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func(a)<sp/>&gt;<sp/>func(b))<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>swap(a,<sp/>b);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Cont&gt;<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>ssize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Cont<sp/>&amp;cont)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size(cont);<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ar_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ar&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>ll<sp/>n&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1ar" kindref="compound">ar</ref>&lt;T[n]&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>array&lt;ar_t&lt;T&gt;,<sp/>n&gt;;<sp/>};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_ar()<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;ar_t&lt;<ref refid="structll" kindref="compound">ll</ref>[2][3]&gt;,<sp/>array&lt;array&lt;ll,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(is_same_v&lt;ar_t&lt;array&lt;ll,<sp/>200&gt;[2][3]&gt;,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;array&lt;array&lt;ll,<sp/>200&gt;,<sp/>3&gt;,<sp/>2&gt;&gt;);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock_::now().time_since_epoch().count();<sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>entropy()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structutility_1_1Empty" kindref="compound">Empty</ref><sp/>{};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref><sp/>=<sp/><ref refid="structutility_1_1random__device__patch" kindref="compound">random_device_patch</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>default_random_engine<sp/>reng{<ref refid="structutility_1_1random__device__patch" kindref="compound">random_device</ref>{}()};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_utility()<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>test_with();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>test_uniq();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>test_next_comb();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>test_ar();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bit_ceil();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>test_key_compare();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">utility;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>92<sp/>&quot;core.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>3<sp/>&quot;graph_theory.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;dsu.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dsu_ds<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>vl<sp/>parent;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>size_;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>:<sp/>parent(n),<sp/>size_(n,<sp/>1)<sp/>{<sp/>iota(begin(parent),<sp/>end(parent),<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>find(<ref refid="structll" kindref="compound">ll</ref><sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>parent[x]<sp/>?<sp/>x<sp/>:<sp/>parent[x]<sp/>=<sp/>(*this).find(parent[x]);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>join(<ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(*this).find(x);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(*this).find(y);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>swap2(x,<sp/>y,<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_[idx];<sp/>});</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>size_[y]<sp/>+=<sp/>size_[x];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>parent[x]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dsu{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{d.<ref refid="structdsu__ds_1_1dsu_1a4cb38e70b100ef23db7b89dc51016273" kindref="member">parent</ref>.size()})<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>delim;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>d.find(i);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_dsu()<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>d{100};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{100})<sp/>{<sp/>assert(d.find(i)<sp/>==<sp/>i);<sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.join(3,<sp/>4));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.join(6,<sp/>10));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!d.join(6,<sp/>6));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(d.join(10,<sp/>3));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!d.join(6,<sp/>3));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>idx{d.find(3),<sp/>d.find(4),<sp/>d.find(6),<sp/>d.find(10)};</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(all_of(begin(idx),<sp/>end(idx),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>idx[0];<sp/>}));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{99})<sp/>{<sp/>d.join(i,<sp/>i<sp/>+<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{100})<sp/>{<sp/>assert(d.find(i)<sp/>==<sp/>d.find(0));<sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">dsu_ds;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>4<sp/>&quot;graph_theory.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;linear_algebra.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;modulo.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">modulo_namespace<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>invert_t<sp/>=<sp/>decltype(invert(std::declval&lt;Args&gt;()...));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>power(T<sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(experimental::is_detected_v&lt;invert_t,<sp/>multiplies&lt;&gt;,<sp/>decltype(a)&gt;)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>invert(multiplies{},<sp/>a);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="stringliteral">&quot;b<sp/>&lt;<sp/>0<sp/>but<sp/>unable<sp/>to<sp/>inverse<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret<sp/>=<sp/>identity(multiplies&lt;&gt;{},<sp/>a);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>b;<sp/>b<sp/>&gt;&gt;=<sp/>1,<sp/>a<sp/>*=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mod(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>%=<sp/>b;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>mod_eq(<ref refid="structll" kindref="compound">ll</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>mod(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref><sp/>{};</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>modulus<sp/>=</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e9<sp/>+</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>()<sp/>:<sp/>x{0LL}<sp/>{}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>enable_if_t&lt;is_integral&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(T<sp/>x_)<sp/>:<sp/>x(mod(x_,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>::modulus))<sp/>{}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>x_,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>)<sp/>:<sp/>x(x_)<sp/>{}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(plus&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>identity(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator+(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>a.x<sp/>+<sp/>b.x;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{sum<sp/>&gt;=<sp/>modulo::modulus<sp/>?<sp/>sum<sp/>-<sp/>modulo::modulus<sp/>:<sp/>sum,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator++(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator-(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{modulo::modulus<sp/>-<sp/>a.x,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};<sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/>using<sp/>::operator-;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.x<sp/>==<sp/>b.x;<sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>operator*(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ull<sp/>quot<sp/>=<sp/>ld(a.x)<sp/>*<sp/>ld(b.x)<sp/>/<sp/>ld(modulo::modulus);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rem<sp/>=<sp/>ull(a.x)<sp/>*<sp/>ull(b.x)<sp/>-<sp/>ull(modulo::modulus)<sp/>*<sp/>quot;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>+<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rem<sp/>&gt;=<sp/>modulo::modulus)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem<sp/>-<sp/>modulo::modulus,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{rem,<sp/><ref refid="structmodulo__namespace_1_1no__mod" kindref="compound">no_mod</ref>{}};</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>invert(multiplies&lt;&gt;,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(b<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>power(b,<sp/>modulo::modulus<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/>using<sp/>::operator/;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>m.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_power()<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(2,<sp/>3)<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(3,<sp/>10)<sp/>==<sp/>59049);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{56888193});</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>-1000)<sp/>*<sp/>power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3},<sp/>1000)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(power(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{1},<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_md()<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{7,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{34}<sp/>/<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{-2}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{4});</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{2}<sp/>-<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{6}<sp/>==<sp/><ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>{3});</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_modulo()<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>test_power();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>test_md();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">modulo_namespace;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>operator()(<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.<ref refid="structmodulo__namespace_1_1modulo_1a591193273f92e7de504df59a34ec921f" kindref="member">x</ref>;<sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>4<sp/>&quot;linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;polynomial.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPolynomial" kindref="compound">Polynomial</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vector&lt;T&gt;::vector;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shrink()<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(*this).empty()<sp/>&amp;&amp;<sp/>(*this).back()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this).pop_back();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.size()<sp/>&lt;=<sp/>b.size()))<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.size()})<sp/>{<sp/>sum[i]<sp/>+=<sp/>a[i];<sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>prod(a.size()<sp/>-<sp/>1<sp/>+<sp/>b.size()<sp/>-<sp/>1<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.size()})<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{b.size()})<sp/>{<sp/>prod[i<sp/>+<sp/>j]<sp/>+=<sp/>a[i]<sp/>*<sp/>b[j];<sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prod;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.size()<sp/>&lt;=<sp/>b.size()))<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>==<sp/>a;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>equal(begin(a),<sp/>end(a),<sp/>b.begin(),<sp/>b.begin()<sp/>+<sp/>a.size())<sp/>&amp;&amp;<sp/>all_of(b.begin()<sp/>+<sp/>a.size(),<sp/>b.end(),<sp/>[](T<sp/>x)<sp/>{<sp/>return<sp/>x<sp/>==<sp/>0;<sp/>});</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_polynomial()<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;ll&gt;</ref><sp/>p1{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;ll&gt;</ref><sp/>p2{2,<sp/>-3};</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>*<sp/>p1<sp/>==<sp/>p1<sp/>*<sp/>p2<sp/>&amp;&amp;<sp/>p1<sp/>*<sp/>p2<sp/>==<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;ll&gt;</ref>{2,<sp/>1,<sp/>0,<sp/>-9,<sp/>0,<sp/>0}));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>+<sp/>p1<sp/>==<sp/>p1<sp/>+<sp/>p2<sp/>&amp;&amp;<sp/>p1<sp/>+<sp/>p2<sp/>==<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;ll&gt;</ref>{3,<sp/>-1,<sp/>3,<sp/>0}));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p1<sp/>+<sp/>p2<sp/>!=<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;ll&gt;</ref>{3,<sp/>-1,<sp/>3,<sp/>1}));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>5<sp/>&quot;linear_algebra.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">linear_algebra<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>rows_n,<sp/>cols_n;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>a;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>r_,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c_,<sp/>remove_const_t&lt;decltype(0LL)&gt;<sp/>v<sp/>=<sp/>0LL)</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>rows_n(r_),<sp/>cols_n(c_),<sp/>a(rows_n<sp/>*<sp/>cols_n,<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(rows_n<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>cols_n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(T<sp/>d)<sp/>:<sp/>rows_n(1),<sp/>cols_n(1),<sp/>a{d}<sp/>{}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(vector&lt;vector&lt;pr&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;g)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(g.size(),<sp/>g.size(),<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{rows_n})<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>g[i])<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[x,<sp/>w]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[i][x]<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{rows_n})<sp/>{<sp/>(*this)[i][i]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>initializer_list&lt;initializer_list&lt;ll&gt;&gt;<sp/>&amp;vals)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(size(vals),<sp/>size(begin(vals)[0]))<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{rows_n})<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(size(begin(vals)[i])<sp/>==<sp/>cols_n);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{cols_n})<sp/>{<sp/>(*this)[i][j]<sp/>=<sp/>begin(begin(vals)[i])[j];<sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*this))[i]);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;a[i<sp/>*<sp/>cols_n];<sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>identity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>plus&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>identity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>id(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>})<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[i][i]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.rows_n<sp/>==<sp/>b.rows_n<sp/>&amp;&amp;<sp/>a.rows_n<sp/>==<sp/>b.rows_n);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.rows_n,<sp/>a.cols_n);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.rows_n})<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.col_n})<sp/>{<sp/>c[i][j]<sp/>=<sp/>a[i][j]<sp/>+<sp/>b[i][j];<sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.rows_n,<sp/>a.cols_n);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.rows_n})<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.col_n})<sp/>{<sp/>c[i][j]<sp/>=<sp/>-a[i][j];<sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>T&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.rows_n<sp/>==<sp/>b.rows_n<sp/>&amp;&amp;<sp/>a.cols_n<sp/>==<sp/>b.cols_n<sp/>&amp;&amp;<sp/>a.a<sp/>==<sp/>b.a;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator*(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.cols_n<sp/>==<sp/>b.rows_n);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;T...&gt;<sp/>c{a.rows_n,<sp/>b.cols_n};</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{c.rows_n})<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.cols_n})<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{c.cols_n})<sp/>{<sp/>c[i][k]<sp/>+=<sp/>a[i][j]<sp/>*<sp/>b[j][k];<sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>pair&lt;matrix&lt;T&gt;<sp/>&amp;&amp;,<sp/>T&gt;<sp/>gauss(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>b,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.rows_n<sp/>==<sp/>a.cols_n);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.rows_n<sp/>==<sp/>b.rows_n);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>det{1};</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.rows_n})<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>a[i][i];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>det<sp/>*=<sp/>div;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{<ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n})<sp/>{<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>/=<sp/>div;<sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{a.rows_n})<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>a[j][i];</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{<ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n})<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[j][k]<sp/>-=<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{move(b),<sp/>det};</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;Ts...&gt;<sp/>invert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>identity(multiplies&lt;&gt;{},<sp/>a)<sp/>/<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_invert_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(invert(a)<sp/>*<sp/>a<sp/>==<sp/>identity(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/>invert(a)<sp/>==<sp/>identity(multiplies&lt;&gt;{},<sp/>a));</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_invert()<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="structll" kindref="compound">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>test_invert_impl(a);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>test_invert_impl(b);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gauss(b,<sp/>a).first;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>det(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gauss(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref>(a.rows_n,<sp/>1),<sp/>a).second;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(m)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{m.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>})<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>copy(m[i],<sp/>m[i]<sp/>+<sp/>m.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>,<sp/>make_ostream_joiner(os,<sp/>delim));</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_matrix()<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{<ref refid="structll" kindref="compound">ll</ref>(1e9<sp/>+<sp/>7),<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>a{{2,<sp/>3,<sp/>5},<sp/>{3,<sp/>6,<sp/>10},<sp/>{5,<sp/>9,<sp/>16}};</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;modulo&gt;</ref><sp/>b{{1,<sp/>2,<sp/>3},<sp/>{4,<sp/>5,<sp/>6},<sp/>{9,<sp/>7,<sp/>8}};</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a<sp/>*<sp/>(b<sp/>/<sp/>a)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lin_recur(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>m(size(c),<sp/>size(c));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(begin(c),<sp/>end(c),<sp/>m[0]);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{1,<sp/>size(c)})<sp/>{<sp/>m[i][i<sp/>-<sp/>1]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>power(m,<sp/>n)[0][0];</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_lin_recur()<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(lin_recur(vl{1,<sp/>2},<sp/>5)<sp/>==<sp/>21);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(lin_recur(vl{2,<sp/>3,<sp/>1},<sp/>4)<sp/>==<sp/>65);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classPolynomial" kindref="compound">Polynomial&lt;T&gt;</ref><sp/>lin_recur_coef(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c)<sp/>{}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_linear_algebra()<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>test_matrix();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>test_lin_recur();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>test_invert();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">linear_algebra;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>5<sp/>&quot;graph_theory.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">graph_theory<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>weight,<sp/>a,<sp/>b;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_tuple()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple{weight,<sp/>a,<sp/>b};<sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.to_tuple()<sp/>&lt;<sp/>b.to_tuple();</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.to_tuple()<sp/>==<sp/>b.to_tuple();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;operator&lt;&lt;(Stream<sp/>&amp;os,<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;edge{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.a<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.weight<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add_edge(vector&lt;vl&gt;<sp/>&amp;graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[u].push_back(v);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>graph[v].push_back(u);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shortest_dist(vector&lt;vector&lt;pr&gt;&gt;<sp/>graph,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>d(graph.size(),<sp/>inf),<sp/>pv(graph.size(),<sp/>-1);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>prio_queue_t&lt;pr,<sp/>greater&lt;&gt;&gt;<sp/>q;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>d[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{d.size()})<sp/>{<sp/>q.push({d[i],<sp/>i});<sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q.size())<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[di,<sp/>a]<sp/>=<sp/>q.top();</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>q.pop();</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(di<sp/>!=<sp/>d[a])<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref><sp/>:<sp/>graph[a])<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;[b,<sp/>w]<sp/>=<sp/><ref refid="structgraph__theory_1_1edge" kindref="compound">edge</ref>;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[b];</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nw<sp/>=<sp/>di<sp/>+<sp/>w;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nw<sp/>&lt;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pv[b]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.push({x,<sp/>b});</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array&lt;vl,<sp/>2&gt;{d,<sp/>pv};</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shortest_dist(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(graph.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>graph.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>graph.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>graph;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>=<sp/>d[i][j];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>min(x,<sp/>d[i][k]<sp/>+<sp/>d[k][j]);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_shortest_dist()<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>g{{7,<sp/>2,<sp/>5},<sp/>{2,<sp/>4,<sp/>1},<sp/>{3,<sp/>2,<sp/>5}};</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;ll&gt;</ref><sp/>short_dist{{4,<sp/>2,<sp/>3},<sp/>{2,<sp/>3,<sp/>1},<sp/>{3,<sp/>2,<sp/>3}};</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(shortest_dist(g)<sp/>==<sp/>short_dist);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>g.rows_n;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vector&lt;pr&gt;&gt;<sp/>adj(n);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>n})<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>n})<sp/>{<sp/>adj[i].push_back({j,<sp/>g[i][j]});<sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>n})<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dijkstra<sp/>=<sp/>shortest_dist(adj,<sp/>s)[0];</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>floyd<sp/>=<sp/>vl(short_dist[s],<sp/>short_dist[s]<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>floyd[s]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((dijkstra<sp/>==<sp/>floyd));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mst(vector&lt;edge&gt;<sp/>edges,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(begin(edges),<sp/>end(edges));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdsu__ds_1_1dsu" kindref="compound">dsu</ref><sp/>d{n};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;edge&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;e<sp/>:<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d.join(e.a,<sp/>e.b))<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ret.push_back(e);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_mst()<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;edge&gt;<sp/>edges{{5,<sp/>0,<sp/>3},<sp/>{2,<sp/>1,<sp/>2},<sp/>{3,<sp/>1,<sp/>3},<sp/>{1,<sp/>3,<sp/>2}};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>mst(edges,<sp/>6);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(begin(ret),<sp/>end(ret));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ret<sp/>==<sp/>vector&lt;edge&gt;{edges[3],<sp/>edges[1],<sp/>edges[0]}));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1gsearch" kindref="compound">gsearch</ref><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;graph;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;char&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>deque&lt;ll&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>parent;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>distance;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1gsearch" kindref="compound">gsearch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>&amp;g_)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>graph(g_),<sp/>visited(graph.size()),<sp/>parent(graph.size(),<sp/>-1),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance(graph.size(),<sp/>inf)<sp/>{}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="structll" kindref="compound">ll</ref>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{graph.size()})<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visited[i])<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)(i);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>child,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>par)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>distance[child]<sp/>=<sp/>distance[par]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>parent[child]<sp/>=<sp/>par;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Searcher&gt;<sp/>vector&lt;ll&gt;<sp/>get_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Searcher<sp/>&amp;search)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>sz(search.parent.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/>rev(search.q))<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search.parent[idx]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz[search.parent[idx]]<sp/>+=<sp/>sz[idx];</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1dfs" kindref="compound">dfs</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1gsearch" kindref="compound">gsearch</ref><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>gsearch::operator(),<sp/>gsearch::gsearch;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>visited[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>graph[source])<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[j])<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add(j,<sp/>source);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)(j);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>q.push_front(source);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgraph__theory_1_1gsearch" kindref="compound">gsearch</ref><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>gsearch::operator(),<sp/>gsearch::gsearch;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="structll" kindref="compound">ll</ref><sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>old_size<sp/>=<sp/>q.size();</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>q.push_back(source);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>visited[source]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>distance[source]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>idx<sp/>=<sp/>old_size;<sp/>idx<sp/>&lt;<sp/>q.size();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>q[idx];</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visited[j])<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q.push_back(j);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited[j]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add(j,<sp/>i);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_bfs()<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(4);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>b{g};</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>b(0);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((b.parent<sp/>==<sp/>vl{-1,<sp/>0,<sp/>1,<sp/>1}));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((b.distance<sp/>==<sp/>vl{0,<sp/>1,<sp/>2,<sp/>2}));</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trans(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vl&gt;<sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>size(graph);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>h(n);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h[j].push_back(i);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_trans()<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((trans(vector&lt;vl&gt;{{2,<sp/>3},<sp/>{2,<sp/>1},<sp/>{2},<sp/>{2,<sp/>3,<sp/>1}})<sp/>==</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;{{},<sp/>{1,<sp/>3},<sp/>{0,<sp/>1,<sp/>2,<sp/>3},<sp/>{0,<sp/>3}}));</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((trans(vector&lt;vl&gt;{})<sp/>==<sp/>vector&lt;vl&gt;{}));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vl&gt;<sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>trans(graph);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>cm(size(graph),<sp/>-1);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>assign<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;assign,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm[u]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cm[u]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>v<sp/>:<sp/>h[u])<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assign(v,<sp/>c);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1dfs" kindref="compound">dfs</ref><sp/>s{graph};</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>s();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>i<sp/>:<sp/>s.q)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assign(i,<sp/>i);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cm;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_scc()<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(5);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0].push_back(3);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>g[3].push_back(1);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>g[1].push_back(2);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>g[2].push_back(0);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0].push_back(4);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>g[2].push_back(4);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cm<sp/>=<sp/>scc(g);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>v{cm[0],<sp/>cm[1],<sp/>cm[2],<sp/>cm[3]};</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((all_of(begin(v),<sp/>end(v),<sp/>[&amp;](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>v[0];<sp/>})));</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(cm[4]<sp/>!=<sp/>cm[0]);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bipartite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vl&gt;<sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>b{graph};</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>b();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>size(graph);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>s(n);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>b.q)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>par<sp/>=<sp/>b.parent[i];<sp/>par<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>!s[par];</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bi<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bi<sp/>&amp;=<sp/>s[i]<sp/>!=<sp/>s[j];</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bi<sp/>?<sp/>optional{s}<sp/>:<sp/>nullopt;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_bipartite()<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(6);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>0);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>bipartite(g).value();</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>g.size()})<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>:<sp/>g[i])<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(col[i]<sp/>^<sp/>col[j]);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_match(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vl&gt;<sp/>&amp;graph)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>side<sp/>=<sp/>bipartite(graph).value();</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n<sp/>=<sp/>graph.size();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>vl<sp/>match(n,<sp/>-1);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>aug_path(n<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dummy_a<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dummy_b<sp/>=<sp/>n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>graph[i])<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>==<sp/>match[i])<sp/>==<sp/>side[i])<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[i].push_back(j);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n})<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match[i]<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(side[i])<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[i].push_back(dummy_b);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aug_path[dummy_a].push_back(i);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>b{aug_path};</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>b(dummy_a);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.distance[dummy_b]<sp/>==<sp/>inf)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vl<sp/>vis(aug_path.size());</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path<sp/>=<sp/><ref refid="structutility_1_1fix" kindref="compound">fix</ref>{[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;path,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vis[i])<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vis[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>dummy_b)<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structll" kindref="compound">ll</ref><sp/>j<sp/>:<sp/>aug_path[i])<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.distance[j]<sp/>==<sp/>b.distance[i]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path(j))<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[i]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match[j]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>path(dummy_a);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>matching_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vl<sp/>&amp;matching)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_if(begin(matching),<sp/>end(matching),<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>!=<sp/>-1;<sp/>});</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_max_match()<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(3);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>1));</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(4);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(6);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matching<sp/>=<sp/>max_match(g);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(6);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>3);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>3));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(6);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2,<sp/>5);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>1);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(10);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>g.size()<sp/>/<sp/>2})<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>i<sp/>-<sp/>1<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2<sp/>*<sp/>i,<sp/>2<sp/>*<sp/>i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>i<sp/>+<sp/>1<sp/>&lt;<sp/>g.size())<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>2<sp/>*<sp/>i,<sp/>2<sp/>*<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((matching_size(max_match(g))<sp/>==<sp/>2<sp/>*<sp/>g.size()<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_add_edge()<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(10);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>6,<sp/>4);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>add_edge(g,<sp/>9,<sp/>2);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sort(begin(x),<sp/>end(x));</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(g<sp/>==<sp/>vector&lt;vl&gt;{{},<sp/>{},<sp/>{9},<sp/>{4},<sp/>{3,<sp/>6},<sp/>{},<sp/>{4},<sp/>{},<sp/>{},<sp/>{2}}));</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>graph_in(vector&lt;vl&gt;<sp/>&amp;g,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{0,<sp/>m})<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>u;<sp/>cin<sp/>&gt;&gt;<sp/>u;;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>v;<sp/>cin<sp/>&gt;&gt;<sp/>v;;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(g,<sp/>--u,<sp/>--v);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/>pair&lt;array&lt;ll,<sp/>2&gt;,<sp/><ref refid="structll" kindref="compound">ll</ref>&gt;<sp/>tree_diameter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>&amp;g)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>b{g};</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>b();</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>b.q.back();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1bfs" kindref="compound">bfs</ref><sp/>b2{g};</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>b2(u);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>b2.q.back();</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{b2.distance[v]<sp/>/<sp/>2})<sp/>{<sp/>c<sp/>=<sp/>b2.parent[c];<sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{u,<sp/>v},<sp/>c};</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_tree_diameter()<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>graph(5);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>0,<sp/>4);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>tree_diameter(graph);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sort(begin(ret.first),<sp/>end(ret.first));</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert((ret.first<sp/>==<sp/>array&lt;ll,<sp/>2&gt;{1,<sp/>4}));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(ret.second<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;ll&gt;&gt;<sp/>graph(5);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>add_edge(graph,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>tree_diameter(graph).first;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sort(begin(ret),<sp/>end(ret));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(ret[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_graph_theory()<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>test_add_edge();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>test_trans();</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>test_shortest_dist();</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>test_mst();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bfs();</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bipartite();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>test_scc();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>test_max_match();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>test_tree_diameter();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">graph_theory;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>2<sp/>&quot;d.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;main.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>1<sp/>&quot;time.hpp&quot;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">time_tools<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(clock_::now())<sp/>t1;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref>()<sp/>:<sp/>t1(clock_::now())<sp/>{}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>duration:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>duration&lt;ld&gt;(clock_::now()<sp/>-<sp/>t1).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench(Func<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>_t;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(a)<sp/>ans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(decltype(a)<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(decltype(a)<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>a;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=<sp/>((-i)<sp/>%<sp/>(j));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>_unused<sp/>=<sp/>ans;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">time_tools;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>4<sp/>&quot;main.hpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main2();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;in<sp/>=<sp/>cin;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{argc})<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-q&quot;</highlight><highlight class="normal">s)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>debug_mode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>ios::sync_with_stdio(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!debug_mode)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cerr.rdbuf(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ios<sp/>&amp;os<sp/>:</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initializer_list&lt;reference_wrapper&lt;ios&gt;&gt;{in,<sp/>cout,<sp/>cerr,<sp/>clog})<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fixed(os);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(os.rdbuf())<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os.exceptions(ios::failbit<sp/>|<sp/>ios::badbit<sp/>|<sp/>ios::eofbit);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>os.precision(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>?<sp/>numeric_limits&lt;ld&gt;::max_digits10<sp/>:<sp/>5);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>cout.precision(numeric_limits&lt;ld&gt;::max_digits10);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtime__tools_1_1timer" kindref="compound">timer</ref><sp/>_t;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>t<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(multitest)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{t})<sp/>{<sp/>main2();<sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#<sp/>3<sp/>&quot;d.cpp&quot;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>multitest{};</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main2()<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n;<sp/>cin<sp/>&gt;&gt;<sp/>n;;<ref refid="structll" kindref="compound">ll</ref><sp/>m;<sp/>cin<sp/>&gt;&gt;<sp/>m;;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vl&gt;<sp/>g(n);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>u(m),<sp/>v(m),<sp/>col(m,<sp/>1);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{m}){</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin&gt;&gt;u[i]&gt;&gt;v[i];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--u[i];--v[i];</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[u[i]].push_back(v[i]);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgraph__theory_1_1dfs" kindref="compound">dfs</ref><sp/>d{g};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>d();</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vl<sp/>pos(n);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{n}){</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[d.q[i]]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/><ref refid="structrange" kindref="compound">ra</ref>{m}){</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col[i]<sp/>=<sp/>1+(pos[u[i]]<sp/>&gt;<sp/>pos[v[i]]);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;*max_element(begin(col),<sp/>end(col))&lt;&lt;endl;;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x:col){cout&lt;&lt;x&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="docs/_build/html/_sources/api/program_listing_file_d_compiled.cpp.rst.txt"/>
  </compounddef>
</doxygen>
