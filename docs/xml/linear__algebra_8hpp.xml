<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="linear__algebra_8hpp" kind="file" language="C++">
    <compoundname>linear_algebra.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includes refid="modulo_8hpp" local="yes">number_theory/modulo.hpp</includes>
    <includes refid="polynomial_8hpp" local="yes">polynomial.hpp</includes>
    <includedby refid="test__linear__algebra_8hpp" local="yes">/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp</includedby>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="graph_2all_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/all.hpp</includedby>
    <includedby refid="flow_8hpp" local="yes">/home/ram/OmniTemplate/src/graph/flow.hpp</includedby>
    <incdepgraph>
      <node id="11">
        <label>number_theory/modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bits/stdc++.h</label>
      </node>
      <node id="12">
        <label>polynomial.hpp</label>
        <link refid="polynomial_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/algebra/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/source_location</label>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>experimental/iterator</label>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>/home/ram/OmniTemplate/src/graph/test_all.hpp</label>
        <link refid="test__all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/ram/OmniTemplate/src/utility/test_graph_draw.hpp</label>
        <link refid="test__graph__draw_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/ram/OmniTemplate/src/graph/tree/test_hld.hpp</label>
        <link refid="test__hld_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/ram/OmniTemplate/src/graph/tree/hld.hpp</label>
        <link refid="hld_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/algebra/linear_algebra.hpp</label>
        <link refid="linear__algebra_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/algebra/test_linear_algebra.hpp</label>
        <link refid="test__linear__algebra_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/ram/OmniTemplate/src/graph/test_2sat.hpp</label>
        <link refid="test__2sat_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/ram/OmniTemplate/src/graph/test_flow.hpp</label>
        <link refid="test__flow_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/ram/OmniTemplate/src/graph/all.hpp</label>
        <link refid="graph_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/ram/OmniTemplate/src/graph/2sat.hpp</label>
        <link refid="2sat_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/ram/OmniTemplate/src/graph/flow.hpp</label>
        <link refid="flow_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/ram/OmniTemplate/src/utility/graph_draw.hpp</label>
        <link refid="graph__draw_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structlinear__algebra_1_1matrix" prot="public">linear_algebra::matrix</innerclass>
    <innernamespace refid="namespacelinear__algebra">linear_algebra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="modulo_8hpp" kindref="compound">number_theory/modulo.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="polynomial_8hpp" kindref="compound">polynomial.hpp</ref>&quot;</highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/>TODO<sp/>Tensors?<sp/>Also,<sp/>matrix_row<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>fix<sp/>default<sp/>constructor<sp/>causing<sp/>segfault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="namespacelinear__algebra" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacelinear__algebra" kindref="compound">linear_algebra</ref><sp/>{</highlight></codeline>
<codeline lineno="9" refid="structlinear__algebra_1_1matrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="11" refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>;<sp/></highlight></codeline>
<codeline lineno="12" refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/><ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref>;<sp/></highlight></codeline>
<codeline lineno="13" refid="structlinear__algebra_1_1matrix_1a44b1e37202c7dd6a6402b407b9ea2072" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a44b1e37202c7dd6a6402b407b9ea2072" kindref="member">matrix</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>r_,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>c_,<sp/>T<sp/>v<sp/>=<sp/>{})<sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>(r_),<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>(c_),<sp/><ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref>(<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>*<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>,<sp/>v)<sp/>{<sp/>assert(<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>&gt;=<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="14" refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a678b80bc52046d1a6827e14ea9b6af6e" kindref="member">matrix</ref>(T<sp/>d)<sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>(1),<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>(1),<sp/><ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref>{d}<sp/>{}</highlight></codeline>
<codeline lineno="15" refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a25e0594f850d04a7102d59392df2bdbc" kindref="member">matrix</ref>(vector&lt;vector&lt;pr&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;g)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(g.size(),<sp/>g.size(),<sp/><ref refid="core_2all_8hpp_1ab89b6ceb8bf54011eedd872b54361eca" kindref="member">inf</ref>)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>g[i])<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[x,<sp/>w]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">[i][x]<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">[i][i]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25" refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a1c8d8e45107bea445551c6189263768d" kindref="member">matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>initializer_list&lt;initializer_list&lt;ll&gt;&gt;<sp/>&amp;vals)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(size(vals),<sp/>size(begin(vals)[0]))<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(size(begin(vals)[i])<sp/>==<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">[i][j]<sp/>=<sp/>begin(begin(vals)[i])[j];<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32" refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1ae41650872d737bf7aff8a62c2b5bfad5" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i]);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35" refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1aa56292eb8f2f032e41fc598e1302dacd" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref>[i<sp/>*<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>];<sp/>}</highlight></codeline>
<codeline lineno="36" refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/><ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>;<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38" refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>plus&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41" refid="namespacelinear__algebra_1a30be90e8c8b57bcd04237e9b1d5b2fe9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>multiplies&lt;&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;mat)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mat.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>id(mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>mat.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">[i][i]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="48" refid="namespacelinear__algebra_1a297c703d12bd9b758de47e299044d8f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1a297c703d12bd9b758de47e299044d8f2" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.col_n)<sp/>{<sp/>c[i][j]<sp/>=<sp/>a[i][j]<sp/>+<sp/>b[i][j];<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56" refid="namespacelinear__algebra_1a2585fee5a1476634e4acdd3a76e8d606" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1a2585fee5a1476634e4acdd3a76e8d606" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref><sp/>c(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.col_n)<sp/>{<sp/>c[i][j]<sp/>=<sp/>-a[i][j];<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63" refid="namespacelinear__algebra_1a4d4a740fc0f97e6c2d867fdee2ebf6ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1a4d4a740fc0f97e6c2d867fdee2ebf6ab" kindref="member">operator==</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a417f6b2bcd0bae5ec57612f6b228b879" kindref="member">a</ref>;<sp/>}</highlight></codeline>
<codeline lineno="64" refid="namespacelinear__algebra_1a0d0136db9933ef3b6a0d91efe567df28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1a0d0136db9933ef3b6a0d91efe567df28" kindref="member">operator*</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;a,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;Ts...&gt;<sp/>c{a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>c.rows_n)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/>c.cols_n)<sp/>{<sp/>c[i][k]<sp/>+=<sp/>a[i][j]<sp/>*<sp/>b[j][k];<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76" refid="namespacelinear__algebra_1aae153cb33e635039a84c8f6ebeed9b04" refkind="member"><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="namespacelinear__algebra_1aae153cb33e635039a84c8f6ebeed9b04" kindref="member">foo</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="80" refid="namespacelinear__algebra_1aa35d330ed1d66664b874fc261902c7b5" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>pair&lt;matrix&lt;T&gt;,<sp/>T&gt;<sp/><ref refid="namespacelinear__algebra_1aa35d330ed1d66664b874fc261902c7b5" kindref="member">gauss</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>b,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1ad02294881d9dd92ee77b417d416bed33" kindref="member">is_square</ref>());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref><sp/>==<sp/>b.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>{1};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>div<sp/>=<sp/>a[i][i];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref><sp/>*=<sp/>div;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n)<sp/>{<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>/=<sp/>div;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mul<sp/>=<sp/>a[j][i];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="structutility_1_1ar" kindref="compound">ar</ref><sp/>:<sp/>{ref(a),<sp/>ref(b)})<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(k,<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get().cols_n)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[j][k]<sp/>-=<sp/><ref refid="structutility_1_1ar" kindref="compound">ar</ref>.get()[i][k]<sp/>*<sp/>mul;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{move(b),<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104" refid="namespacelinear__algebra_1ac5881f67135c45bc7c2b2a3de9cec5da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt;Ts...&gt;<sp/><ref refid="namespacelinear__algebra_1ac5881f67135c45bc7c2b2a3de9cec5da" kindref="member">invert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(multiplies&lt;&gt;{},<sp/>a)<sp/>/<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="105" refid="namespacelinear__algebra_1a5b3d96b2e622f3682c9e5b91ba0a319b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1a5b3d96b2e622f3682c9e5b91ba0a319b" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aa35d330ed1d66664b874fc261902c7b5" kindref="member">gauss</ref>(b,<sp/>a).first;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109" refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/><ref refid="namespacelinear__algebra_1ab7a7f1a8ba225710625d5af10f317b6a" kindref="member">det</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>&amp;a)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aa35d330ed1d66664b874fc261902c7b5" kindref="member">gauss</ref>(<ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref>(a.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>,<sp/>1),<sp/>a).second;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113" refid="namespacelinear__algebra_1a453fd75a1c2a470143f42979d102abe1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespacelinear__algebra_1a453fd75a1c2a470143f42979d102abe1" kindref="member">operator&lt;&lt;</ref>(Stream<sp/>&amp;os,<sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;Ts...&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;m)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacedebug__tools_1a3aa6fe2ec65b64f87ad431efde3822c7" kindref="member">simple_tp</ref>(m)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>m.<ref refid="structlinear__algebra_1_1matrix_1a4cfdcefa6c7acb00a47c68d78a05082e" kindref="member">rows_n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy(m[i],<sp/>m[i]<sp/>+<sp/>m.<ref refid="structlinear__algebra_1_1matrix_1a4b8d6b65104e322826ecf447078cb953" kindref="member">cols_n</ref>,<sp/>make_ostream_joiner(os,<sp/><ref refid="core_2all_8hpp_1a6a2dbe8e1a58258f9060682cf7ea063b" kindref="member">delim</ref>));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122" refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1ad80debbf481bb22b5347633cd83e2c77" kindref="member">lin_recur</ref>(vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>support<sp/>constant<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix&lt;T&gt;</ref><sp/>m(size(c),<sp/>size(c));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(<ref refid="core_2all_8hpp_1a2f9ddbc7133cc3a48efbc824006bd3cb" kindref="member">al</ref>(c),<sp/>m[0]);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>1,<sp/>size(c))<sp/>{<sp/>m[i][i<sp/>-<sp/>1]<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(m,<sp/>n)[0][0];</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linear_algebra</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/algebra/linear_algebra.hpp"/>
  </compounddef>
</doxygen>
