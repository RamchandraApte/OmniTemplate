<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__dict__search_8hpp" kind="file" language="C++">
    <compoundname>test_dict_search.hpp</compoundname>
    <includes refid="dict__search_8hpp" local="yes">dict_search.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="14">
        <label>queue</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="24">
        <label>experimental/source_location</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="26">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>unordered_set</label>
      </node>
      <node id="23">
        <label>experimental/iterator</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/string/test_dict_search.hpp</label>
        <link refid="test__dict__search_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>random</label>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="2">
        <label>dict_search.hpp</label>
        <link refid="dict__search_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="28">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>climits</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>thread</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/string/test_dict_search.hpp</label>
        <link refid="test__dict__search_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacestring__tools">string_tools</innernamespace>
    <innernamespace refid="namespacestring__tools_1_1test">string_tools::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__search_8hpp" kindref="compound">dict_search.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2" refid="namespacestring__tools_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref><sp/>{</highlight></codeline>
<codeline lineno="3" refid="namespacestring__tools_1_1test_1a03b432c4506ad64b1db8ff0a6c897b49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Trie_Type&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a03b432c4506ad64b1db8ff0a6c897b49" kindref="member">test_dict_search_impl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trie<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Trie_Type{};</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;<sp/>good_words{</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hell&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;water&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wo&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;er&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;yyy&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;yyyy&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;<sp/>bad_words{</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;think&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;codeforces&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mike&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;worl&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hel&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;helloworld&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trie-&gt;insert(word);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(trie-&gt;find_leaf(word));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>bad_words)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!trie-&gt;find_leaf(word));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hello<sp/>=<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello-&gt;go(</highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">)<sp/>==<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello-&gt;go(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">)<sp/>==<sp/>trie);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lop&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;water&quot;</highlight><highlight class="normal">)-&gt;exit_link()<sp/>==<sp/>trie-&gt;find_node(</highlight><highlight class="stringliteral">&quot;er&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;zhelloperzzasdfnpokncopdeforcesofoajcodeforcessyyyyyyyyyzzz&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(trie-&gt;search({}))<sp/>expected;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(j,<sp/>str.size())<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;word<sp/>:<sp/>good_words)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.substr(i,<sp/>j<sp/>-<sp/>i)<sp/>==<sp/>word)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected.push_back({{i,<sp/>j},<sp/>trie-&gt;find_leaf(word)});</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(trie-&gt;search(str)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37" refid="namespacestring__tools_1_1test_1a5165ff514ae968de6c81aedd2ce599ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacestring__tools_1_1test_1a5165ff514ae968de6c81aedd2ce599ab" kindref="member">test_dict_search</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>test_dict_search_impl&lt;Trie&lt;&gt;&gt;();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>test_dict_search_impl&lt;Trie&lt;&apos;\0&apos;,<sp/>256&gt;&gt;();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_tools::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestring__tools_1_1test" kindref="compound">string_tools::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/string/test_dict_search.hpp"/>
  </compounddef>
</doxygen>
