<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__number__theory_8hpp" kind="file" language="C++">
    <compoundname>test_number_theory.hpp</compoundname>
    <includes refid="number__theory_8hpp" local="yes">number_theory.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="30">
        <label>modulo.hpp</label>
        <link refid="modulo_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="14">
        <label>queue</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="24">
        <label>experimental/source_location</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="26">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>unordered_set</label>
      </node>
      <node id="23">
        <label>experimental/iterator</label>
      </node>
      <node id="2">
        <label>number_theory.hpp</label>
        <link refid="number__theory_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>random</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp</label>
        <link refid="test__number__theory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
      <node id="17">
        <label>stack</label>
      </node>
      <node id="29">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="28">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>climits</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>thread</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp</label>
        <link refid="test__number__theory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__number__theory_8hpp_1a87d7c3ba2489977a16ec40544a918e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_prime</definition>
        <argsstring>()</argsstring>
        <name>test_prime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="2" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="2" bodyend="9"/>
        <references refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" compoundref="number__theory_8hpp" startline="6" endline="32">prime</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_divisors</definition>
        <argsstring>()</argsstring>
        <name>test_divisors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="10" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="10" bodyend="17"/>
        <references refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" compoundref="number__theory_8hpp" startline="34" endline="49">divisors</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a8956d5feae5d2dd01656f6f960d568c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sieve</definition>
        <argsstring>()</argsstring>
        <name>test_sieve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="18" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="18" bodyend="18"/>
        <references refid="number__theory_8hpp_1ae8dd217fd3a3de037c6a1031aef548aa" compoundref="number__theory_8hpp" startline="56" endline="71">sieve</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1afcfd3b1e3415393029bc6a496d825459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fac</definition>
        <argsstring>()</argsstring>
        <name>test_fac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="19" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="19" bodyend="27"/>
        <references refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" compoundref="number__theory_8hpp" startline="76" endline="98">fac</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_egcd</definition>
        <argsstring>(ll a, ll b)</argsstring>
        <name>test_egcd</name>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structll" kindref="compound">ll</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="28" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="28" bodyend="32"/>
        <references refid="number__theory_8hpp_1aa6039763e84c50eb24fdee392c581898" compoundref="number__theory_8hpp" startline="100" endline="102">egcd</references>
        <referencedby refid="test__number__theory_8hpp_1a1764567e56d415f536db0a4aa89e782f" compoundref="test__number__theory_8hpp" startline="33" endline="39">test_egcd</referencedby>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a1764567e56d415f536db0a4aa89e782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_egcd</definition>
        <argsstring>()</argsstring>
        <name>test_egcd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="33" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="33" bodyend="39"/>
        <references refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" compoundref="test__number__theory_8hpp" startline="28" endline="32">test_egcd</references>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_totient</definition>
        <argsstring>()</argsstring>
        <name>test_totient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="40" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="40" bodyend="43"/>
        <references refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" compoundref="number__theory_8hpp" startline="106" endline="113">totient</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a7aac53ce82614d79c7098a1de32ed1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_dlog</definition>
        <argsstring>()</argsstring>
        <name>test_dlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="44" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="44" bodyend="59"/>
        <references refid="number__theory_8hpp_1a67527905c2b2c027c8b458902db2d05a" compoundref="number__theory_8hpp" startline="117" endline="138">dlog</references>
        <references refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" compoundref="core_2all_8hpp" startline="55">fo</references>
        <references refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" compoundref="permutation_8hpp" startline="81" endline="83">permutation::power</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1a0ff115471f41e78245b5dc48eaf8032f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_primitive_root</definition>
        <argsstring>()</argsstring>
        <name>test_primitive_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="60" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="60" bodyend="69"/>
        <references refid="number__theory_8hpp_1a6542b189f3759f43899a8b1978d58e2c" compoundref="number__theory_8hpp" startline="141" endline="164">primitive_root</references>
        <referencedby refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" compoundref="test__number__theory_8hpp" startline="70" endline="79">test_number_theory</referencedby>
      </memberdef>
      <memberdef kind="function" id="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_number_theory</definition>
        <argsstring>()</argsstring>
        <name>test_number_theory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" line="70" column="6" bodyfile="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp" bodystart="70" bodyend="79"/>
        <references refid="test__number__theory_8hpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" compoundref="test__number__theory_8hpp" startline="10" endline="17">test_divisors</references>
        <references refid="test__number__theory_8hpp_1a7aac53ce82614d79c7098a1de32ed1e7" compoundref="test__number__theory_8hpp" startline="44" endline="59">test_dlog</references>
        <references refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" compoundref="test__number__theory_8hpp" startline="28" endline="32">test_egcd</references>
        <references refid="test__number__theory_8hpp_1afcfd3b1e3415393029bc6a496d825459" compoundref="test__number__theory_8hpp" startline="19" endline="27">test_fac</references>
        <references refid="test__number__theory_8hpp_1a87d7c3ba2489977a16ec40544a918e00" compoundref="test__number__theory_8hpp" startline="2" endline="9">test_prime</references>
        <references refid="test__number__theory_8hpp_1a0ff115471f41e78245b5dc48eaf8032f" compoundref="test__number__theory_8hpp" startline="60" endline="69">test_primitive_root</references>
        <references refid="test__number__theory_8hpp_1a8956d5feae5d2dd01656f6f960d568c7" compoundref="test__number__theory_8hpp" startline="18" endline="18">test_sieve</references>
        <references refid="test__number__theory_8hpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" compoundref="test__number__theory_8hpp" startline="40" endline="43">test_totient</references>
        <referencedby refid="test_8cpp_1af095a232149097b5605064623a9345ac" compoundref="test_8cpp" startline="31" endline="61">main2</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="number__theory_8hpp" kindref="compound">number_theory.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2" refid="test__number__theory_8hpp_1a87d7c3ba2489977a16ec40544a918e00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a87d7c3ba2489977a16ec40544a918e00" kindref="member">test_prime</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(2));</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(3));</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(4));</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(5));</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>6)));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1a02e886c6eb18cd3b8894ea2ba9ca9784" kindref="member">prime</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structll" kindref="compound">ll</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1e9<sp/>+<sp/>7)));</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10" refid="test__number__theory_8hpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" kindref="member">test_divisors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(1)<sp/>==<sp/>vector&lt;ll&gt;{1}));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(2)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2}));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(3)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>3}));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(4)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2,<sp/>4}));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(36)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>2,<sp/>3,<sp/>4,<sp/>6,<sp/>9,<sp/>12,<sp/>18,<sp/>36}));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a1dba9e869972ca1e250a48ddd5f8f72b" kindref="member">divisors</ref>(49)<sp/>==<sp/>vector&lt;ll&gt;{1,<sp/>7,<sp/>49}));</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18" refid="test__number__theory_8hpp_1a8956d5feae5d2dd01656f6f960d568c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a8956d5feae5d2dd01656f6f960d568c7" kindref="member">test_sieve</ref>()<sp/>{<sp/>assert((<ref refid="number__theory_8hpp_1ae8dd217fd3a3de037c6a1031aef548aa" kindref="member">sieve</ref>(11)<sp/>==<sp/>vector&lt;ll&gt;{0,<sp/>0,<sp/>2,<sp/>3,<sp/>2,<sp/>5,<sp/>2,<sp/>7,<sp/>2,<sp/>3,<sp/>2}));<sp/>}</highlight></codeline>
<codeline lineno="19" refid="test__number__theory_8hpp_1afcfd3b1e3415393029bc6a496d825459" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1afcfd3b1e3415393029bc6a496d825459" kindref="member">test_fac</ref>()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(1)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{}));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(1)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{}));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(2)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>1}}));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(3)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{3,<sp/>1}}));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(4)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>2}}));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(36)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{2,<sp/>2},<sp/>{3,<sp/>2}}));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((<ref refid="number__theory_8hpp_1a2be64a5779e00fe36e74d3496e92e64b" kindref="member">fac</ref>(49)<sp/>==<sp/>unordered_map&lt;ll,<sp/>ll&gt;{{7,<sp/>2}}));</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28" refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(<ref refid="structll" kindref="compound">ll</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="number__theory_8hpp_1aa6039763e84c50eb24fdee392c581898" kindref="member">egcd</ref>(a,<sp/>b,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(x<sp/>*<sp/>a<sp/>+<sp/>y<sp/>*<sp/>b<sp/>==<sp/>gcd(a,<sp/>b));</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33" refid="test__number__theory_8hpp_1a1764567e56d415f536db0a4aa89e782f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(6,<sp/>15);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(3,<sp/>4);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(6,<sp/>6);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(2,<sp/>1);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>(63,<sp/>12);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40" refid="test__number__theory_8hpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" kindref="member">test_totient</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(1)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(2)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(6)<sp/>==<sp/>2<sp/>&amp;&amp;<sp/><ref refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(84)<sp/>==<sp/>24<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="number__theory_8hpp_1af0753ff92c84e6924e1fd6461e77b16f" kindref="member">totient</ref>(127)<sp/>==<sp/>126);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44" refid="test__number__theory_8hpp_1a7aac53ce82614d79c7098a1de32ed1e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a7aac53ce82614d79c7098a1de32ed1e7" kindref="member">test_dlog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[](<ref refid="structmodulo__namespace_1_1modulo" kindref="compound">modulo</ref><sp/>a,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{m,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/><ref refid="namespacepermutation_1ade64590f0931d6f5d80521cdf52e4bed" kindref="member">power</ref>(a,<sp/>x);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="number__theory_8hpp_1a67527905c2b2c027c8b458902db2d05a" kindref="member">dlog</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(a,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(x,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(m,<sp/>1,<sp/>20)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gcd(a,<sp/>m)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check(a,<sp/>x,<sp/>m);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60" refid="test__number__theory_8hpp_1a0ff115471f41e78245b5dc48eaf8032f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1a0ff115471f41e78245b5dc48eaf8032f" kindref="member">test_primitive_root</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check<sp/>=<sp/>[&amp;](<ref refid="structll" kindref="compound">ll</ref><sp/>m,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structutility_1_1with" kindref="compound">with</ref><sp/>_m{m,<sp/>modulo::modulus};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="number__theory_8hpp_1a6542b189f3759f43899a8b1978d58e2c" kindref="member">primitive_root</ref>()<sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>check(1,<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>check(3,<sp/>2);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>check(6,<sp/>5);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>check(7,<sp/>3);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70" refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__number__theory_8hpp_1aed36f6b8b9706133e9b5302b1618e9ef" kindref="member">test_number_theory</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a87d7c3ba2489977a16ec40544a918e00" kindref="member">test_prime</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a3e935b9aca6e9dfa6b0a8ef9a4c7e153" kindref="member">test_divisors</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1afcfd3b1e3415393029bc6a496d825459" kindref="member">test_fac</ref>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a8ae320acad5e35d58ca5ad7adc6ddd78" kindref="member">test_totient</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a7aac53ce82614d79c7098a1de32ed1e7" kindref="member">test_dlog</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a0ff115471f41e78245b5dc48eaf8032f" kindref="member">test_primitive_root</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1a8956d5feae5d2dd01656f6f960d568c7" kindref="member">test_sieve</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__number__theory_8hpp_1ae2f84cd254fbf1373fc273141ce470ed" kindref="member">test_egcd</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/number_theory/test_number_theory.hpp"/>
  </compounddef>
</doxygen>
