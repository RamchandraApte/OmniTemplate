<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="segment__tree_8hpp" kind="file" language="C++">
    <compoundname>segment_tree.hpp</compoundname>
    <includes refid="core_2all_8hpp" local="yes">core/all.hpp</includes>
    <includes refid="time_8hpp" local="yes">core/time.hpp</includes>
    <includedby refid="template_8hpp" local="yes">/home/ram/OmniTemplate/src/core/template.hpp</includedby>
    <includedby refid="test__segment__tree_8hpp" local="yes">/home/ram/OmniTemplate/src/ds/test_segment_tree.hpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="13">
        <label>queue</label>
      </node>
      <node id="29">
        <label>core/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="23">
        <label>experimental/source_location</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="25">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>unordered_set</label>
      </node>
      <node id="22">
        <label>experimental/iterator</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>random</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/segment_tree.hpp</label>
        <link refid="segment__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
      <node id="16">
        <label>stack</label>
      </node>
      <node id="28">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>utility</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>climits</label>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="17">
        <label>thread</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>set</label>
      </node>
      <node id="7">
        <label>complex</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="24">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/segment_tree.hpp</label>
        <link refid="segment__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/core/template.hpp</label>
        <link refid="template_8hpp"/>
      </node>
      <node id="3">
        <label>/home/ram/OmniTemplate/src/ds/test_segment_tree.hpp</label>
        <link refid="test__segment__tree_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsegment__tree_1_1SegmentTree" prot="public">segment_tree::SegmentTree</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1LazyPart" prot="public">segment_tree::SegmentTree::LazyPart</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1NodeCore" prot="public">segment_tree::SegmentTree::NodeCore</innerclass>
    <innerclass refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" prot="public">segment_tree::SegmentTree::NodeExp</innerclass>
    <innernamespace refid="namespacesegment__tree">segment_tree</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="core_2all_8hpp" kindref="compound">core/all.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="time_8hpp" kindref="compound">core/time.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="namespacesegment__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesegment__tree" kindref="compound">segment_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>non<sp/>commutative<sp/>monoids,<sp/>specify<sp/>the<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>multidimensional</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Query,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Update,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_lazy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_ptr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_pers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="structll" kindref="compound">ll</ref><sp/>base<sp/>=<sp/>2&gt;</highlight></codeline>
<codeline lineno="18" refid="classsegment__tree_1_1SegmentTree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20" refid="classsegment__tree_1_1SegmentTree_1addcc5c68b1d667b6a4f868e287dc9bbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1addcc5c68b1d667b6a4f868e287dc9bbf" kindref="member">SegmentTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>size_arg)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a0a3c79962f762f46cb1bb0197dd56fbc" kindref="member">size_</ref>{size_arg},<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref>{<ref refid="namespaceutility_1a14dc21f495425ccdc1ec35fe45d45591" kindref="member">power_ceil</ref>(size_arg,<sp/>base)},</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a26e5975caa51fd679fadc38ef7a48fbb" kindref="member">nodes</ref>(!has_ptr<sp/>?<sp/>base<sp/>*<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref><sp/>:<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NodeExp{};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29" refid="classsegment__tree_1_1SegmentTree_1a7b87087b2001e8a0f470a4e78f394502" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a7b87087b2001e8a0f470a4e78f394502" kindref="member">SegmentTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr)<sp/>:<sp/><ref refid="classsegment__tree_1_1SegmentTree" kindref="compound">SegmentTree</ref>(arr.size())<sp/>{<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(arr);<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(!has_pers<sp/>||<sp/>has_ptr,<sp/></highlight><highlight class="stringliteral">&quot;Pointers<sp/>required<sp/>for<sp/>persistency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(base<sp/>&gt;<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Base<sp/>must<sp/>be<sp/>at<sp/>least<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32" refid="structsegment__tree_1_1SegmentTree_1_1LazyPart" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsegment__tree_1_1SegmentTree_1_1LazyPart" kindref="compound">LazyPart</ref><sp/>{</highlight></codeline>
<codeline lineno="33" refid="structsegment__tree_1_1SegmentTree_1_1LazyPart_1a23a6ecc2e40bbe3d261dce229ebef13a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1LazyPart_1a23a6ecc2e40bbe3d261dce229ebef13a" kindref="member">lazy</ref>{<ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Update{},<sp/>T{})};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="35" refid="structsegment__tree_1_1SegmentTree_1_1NodeCore" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeCore" kindref="compound">NodeCore</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>conditional_t&lt;has_lazy,<sp/>LazyPart,<sp/>Empty&gt;<sp/>{</highlight></codeline>
<codeline lineno="36" refid="structsegment__tree_1_1SegmentTree_1_1NodeCore_1a4852cef24d043d15388e91826ca726e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeCore_1a4852cef24d043d15388e91826ca726e6" kindref="member">qsum</ref>{<ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{})};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="38" refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeCore" kindref="compound">NodeCore</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="structsegment__tree_1_1SegmentTree_1_1NodeExp_1a4523e07aa838284e536323455a6d948e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array&lt;NodeExp<sp/>*,<sp/>base&gt;<sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp_1a4523e07aa838284e536323455a6d948e" kindref="member">child</ref>{};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41" refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>=<sp/>conditional_t&lt;has_ptr,<sp/>NodeExp<sp/>*,<sp/>ll&gt;;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*obj;<sp/>}</highlight></codeline>
<codeline lineno="44" refid="classsegment__tree_1_1SegmentTree_1a7b3d2ec003c25e51626c78595ba53401" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1a7b3d2ec003c25e51626c78595ba53401" kindref="member">get_core</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a26e5975caa51fd679fadc38ef7a48fbb" kindref="member">nodes</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="45" refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj-&gt;<ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp_1a4523e07aa838284e536323455a6d948e" kindref="member">child</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="46" refid="classsegment__tree_1_1SegmentTree_1a6a4f7d2b00e4bc94806364ec0f999700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a6a4f7d2b00e4bc94806364ec0f999700" kindref="member">get_child</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base<sp/>*<sp/>idx<sp/>+<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="47" refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>df<sp/>=<sp/>(node_r<sp/>-<sp/>node_l)<sp/>/<sp/>base;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_l<sp/>+<sp/>df<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="51" refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr)<sp/>{<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(arr,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref>,<sp/>0,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref>);<sp/>}</highlight></codeline>
<codeline lineno="52" refid="classsegment__tree_1_1SegmentTree_1ad8b2ae5fb114f861e0dcc0fb5d370b8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad8b2ae5fb114f861e0dcc0fb5d370b8f" kindref="member">build</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;T&gt;<sp/>&amp;arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>-<sp/>node_l<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_l<sp/>&lt;<sp/>arr.size()<sp/>?<sp/>arr[node_l]<sp/>:<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ab4671ac300a724a5bbfdd92c68abcfcb" kindref="member">build</ref>(arr,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc),<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>Query{}(ret,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc)).qsum);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67" refid="classsegment__tree_1_1SegmentTree_1a800501714b462945aca69aef474dbfbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a800501714b462945aca69aef474dbfbc" kindref="member">down</ref>([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>leaf<sp/>=<sp/>node_r<sp/>-<sp/>node_l<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leaf)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ptr<sp/>:<sp/>idx-&gt;child)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref>{};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=<sp/>Update{}(<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!leaf)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(i,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>i)).lazy<sp/>+=<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy<sp/>=<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Update{},<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89" refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>&lt;=<sp/>l<sp/>||<sp/>r<sp/>&lt;=<sp/>node_l)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a800501714b462945aca69aef474dbfbc" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&lt;=<sp/>node_l<sp/>&amp;&amp;<sp/>node_r<sp/>&lt;=<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Query{}(ret,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" kindref="member">query</ref>(l,<sp/>r,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc),<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108" refid="classsegment__tree_1_1SegmentTree_1ad39bd604bb4dc65a3204865f578f6fd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad39bd604bb4dc65a3204865f578f6fd9" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>custom_root)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(0<sp/>&lt;=<sp/>l<sp/>&amp;&amp;<sp/>l<sp/>&lt;=<sp/>r<sp/>&amp;&amp;<sp/>r<sp/>&lt;=<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a0a3c79962f762f46cb1bb0197dd56fbc" kindref="member">size_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>out_of_range{</highlight><highlight class="stringliteral">&quot;Segment<sp/>tree<sp/>query<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1aee0899b7aed45c73f0142ce425937fde" kindref="member">query</ref>(l,<sp/>r,<sp/>custom_root,<sp/>0,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114" refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" kindref="member">query</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2c2369ddf9d9fb8ca78e367ff129839" kindref="member">query</ref>(l,<sp/>r,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref>);<sp/>}</highlight></codeline>
<codeline lineno="115" refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" kindref="member">update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_l,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>node_r)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_r<sp/>&lt;=<sp/>l<sp/>||<sp/>r<sp/>&lt;=<sp/>node_l)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a800501714b462945aca69aef474dbfbc" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structsegment__tree_1_1SegmentTree_1_1NodeExp" kindref="compound">NodeExp</ref>{*idx};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>&lt;=<sp/>node_l<sp/>&amp;&amp;<sp/>node_r<sp/>&lt;=<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy<sp/>=<sp/>Update{}(<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).lazy,<sp/>val);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a800501714b462945aca69aef474dbfbc" kindref="member">down</ref>(idx,<sp/>node_l,<sp/>node_r);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=<sp/>Update{}(<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum,<sp/>val);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_update<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" kindref="member">update</ref>(l,<sp/>r,<sp/>val,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a2bab4503b7a982cd822c2d5cb48c8e11" kindref="member">mid</ref>(node_l,<sp/>node_r,<sp/>inc<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_pers)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc)<sp/>=<sp/>get_update();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_update();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=<sp/><ref refid="namespacelinear__algebra_1aac11793366a8aa7d2396775fdb1ba8ca" kindref="member">identity</ref>(Query{},<sp/>T{});</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum<sp/>=</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Query{}(<ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(idx).qsum,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ac8ebb88c3ad2fedecb123e31552fde60" kindref="member">get_core</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(idx,<sp/>inc)).qsum);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155" refid="classsegment__tree_1_1SegmentTree_1ad2375790875e1231b39795e93d61e176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad2375790875e1231b39795e93d61e176" kindref="member">update</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structll" kindref="compound">ll</ref><sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(!has_lazy)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(l<sp/>+<sp/>1<sp/>==<sp/>r);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref><sp/>=<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a5207ffe18417463bef339fd6d3183b5c" kindref="member">update</ref>(l,<sp/>r,<sp/>val,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref>,<sp/>0,<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161" refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" kindref="member">destroy</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr<sp/>&amp;&amp;<sp/>!has_pers)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="core_2all_8hpp_1a9d597f42af7d85fd96c46aa17cc610d9" kindref="member">fo</ref>(inc,<sp/>base)<sp/>{<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" kindref="member">destroy</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1a3d4b3dd98355d9e414bc04cdcf5f5457" kindref="member">get_child</ref>(node,<sp/>inc));<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171" refid="classsegment__tree_1_1SegmentTree_1a9f3420768798bd5b372b6f6a079de487" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a9f3420768798bd5b372b6f6a079de487" kindref="member">~SegmentTree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(has_ptr<sp/>&amp;&amp;<sp/>!has_pers)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a4062ab69d3598b338ba182ca6ae17ffe" kindref="member">destroy</ref>(<ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179" refid="classsegment__tree_1_1SegmentTree_1a0a3c79962f762f46cb1bb0197dd56fbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a0a3c79962f762f46cb1bb0197dd56fbc" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="180" refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structll" kindref="compound">ll</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a53e7eb2ce3b43919d36510dc56b980b3" kindref="member">ceil_size</ref>;</highlight></codeline>
<codeline lineno="181" refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsegment__tree_1_1SegmentTree_1a50d361dc1883b3aaa88142238c091571" kindref="member">Node</ref><sp/><ref refid="classsegment__tree_1_1SegmentTree_1ad753751360f0d9cefe864d4fd22fec83" kindref="member">root</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Root<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classsegment__tree_1_1SegmentTree_1a26e5975caa51fd679fadc38ef7a48fbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;NodeCore&gt;<sp/><ref refid="classsegment__tree_1_1SegmentTree_1a26e5975caa51fd679fadc38ef7a48fbb" kindref="member">nodes</ref>;<sp/></highlight><highlight class="comment">/*&lt;<sp/>1-indexed<sp/>implicit<sp/>array<sp/>of<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>segment_tree</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/ds/segment_tree.hpp"/>
  </compounddef>
</doxygen>
