<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacelinear__algebra" kind="namespace" language="C++">
    <compoundname>linear_algebra</compoundname>
    <innerclass refid="structlinear__algebra_1_1matrix" prot="public">linear_algebra::matrix</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d__compiled_8cpp_1aac11793366a8aa7d2396775fdb1ba8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::identity</definition>
        <argsstring>(const plus&lt;&gt;, const matrix&lt; T &gt; &amp;mat)</argsstring>
        <name>identity</name>
        <param>
          <type>const plus&lt;&gt;</type>
        </param>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="824" column="18" bodyfile="d_compiled.cpp" bodystart="824" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a30be90e8c8b57bcd04237e9b1d5b2fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::identity</definition>
        <argsstring>(const multiplies&lt;&gt;, const matrix&lt; T &gt; &amp;mat)</argsstring>
        <name>identity</name>
        <param>
          <type>const multiplies&lt;&gt;</type>
        </param>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="827" column="18" bodyfile="d_compiled.cpp" bodystart="827" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a297c703d12bd9b758de47e299044d8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::operator+</definition>
        <argsstring>(const matrix&lt; Ts... &gt; &amp;a, const matrix&lt; Ts... &gt; &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="834" column="6" bodyfile="d_compiled.cpp" bodystart="834" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a2585fee5a1476634e4acdd3a76e8d606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::operator-</definition>
        <argsstring>(const matrix&lt; Ts... &gt; &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="842" column="18" bodyfile="d_compiled.cpp" bodystart="842" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a030fbbd0e40aa66bc02cb2d74ae80d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool linear_algebra::operator==</definition>
        <argsstring>(matrix&lt; T... &gt; const &amp;a, matrix&lt; T... &gt; const &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="849" column="19" bodyfile="d_compiled.cpp" bodystart="849" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a6233529d7882aa9ce30e9bb40fa6c865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::operator*</definition>
        <argsstring>(matrix&lt; T... &gt; const &amp;a, matrix&lt; T... &gt; const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the matrix product of a and b</para>
<para>Returns the matrix product of a and b</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="852" column="19" bodyfile="d_compiled.cpp" bodystart="852" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ad15ec6af6887423cb03ff23db2d94738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>pair&lt; <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;&amp;, T &gt;</type>
        <definition>pair&lt; matrix&lt; T &gt; &amp;&amp;, T &gt; linear_algebra::gauss</definition>
        <argsstring>(matrix&lt; T &gt; b, matrix&lt; T &gt; a)</argsstring>
        <name>gauss</name>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns matrix x such that <formula id="12">$ax = b$</formula> and the determinant of <formula id="13">$a$</formula> via Gaussian elimination.</para>
<para>Returns matrix x such that <formula id="12">$ax = b$</formula> and the determinant of <formula id="13">$a$</formula> via Gaussian elimination.</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="863" column="18" bodyfile="d_compiled.cpp" bodystart="863" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a9857489fa641b19465aed9647a854219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt;</type>
        <definition>matrix&lt; Ts... &gt; linear_algebra::invert</definition>
        <argsstring>(const matrix&lt; Ts... &gt; &amp;a)</argsstring>
        <name>invert</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="891" column="20" bodyfile="d_compiled.cpp" bodystart="891" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a374c06877fb866b1df88bd50c7ea4629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void linear_algebra::test_invert_impl</definition>
        <argsstring>(const matrix&lt; Ts... &gt; &amp;a)</argsstring>
        <name>test_invert_impl</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; Ts... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="892" column="18" bodyfile="d_compiled.cpp" bodystart="892" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a2da52bf2b92d06eeb430122c3ec209ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linear_algebra::test_invert</definition>
        <argsstring>()</argsstring>
        <name>test_invert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="896" column="6" bodyfile="d_compiled.cpp" bodystart="896" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a2b7036bfe170c860f3c08deea3fec213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::operator/</definition>
        <argsstring>(const matrix&lt; T... &gt; &amp;b, const matrix&lt; T... &gt; &amp;a)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns <formula id="14">$a^{-1}b$</formula></para>
<para>Returns <formula id="14">$a^{-1}b$</formula></para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="903" column="19" bodyfile="d_compiled.cpp" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ab7a7f1a8ba225710625d5af10f317b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T linear_algebra::det</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;a)</argsstring>
        <name>det</name>
        <param>
          <type>const <ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the determinant of matrix a</para>
<para>Returns the determinant of matrix a</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="907" column="15" bodyfile="d_compiled.cpp" bodystart="907" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a736cda2f4e9d62713f271320745b6d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; linear_algebra::operator&lt;&lt;</definition>
        <argsstring>(Stream &amp;os, matrix&lt; T... &gt; const &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>Stream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structlinear__algebra_1_1matrix" kindref="compound">matrix</ref>&lt; T... &gt; const &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Print the matrix rows, line by line</para>
<para>Print the matrix rows, line by line</para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="912" column="1" bodyfile="d_compiled.cpp" bodystart="912" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1a14b8a1cd669e604f8c4c121e723f17b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linear_algebra::test_matrix</definition>
        <argsstring>()</argsstring>
        <name>test_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="921" column="6" bodyfile="d_compiled.cpp" bodystart="921" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ad80debbf481bb22b5347633cd83e2c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto linear_algebra::lin_recur</definition>
        <argsstring>(vector&lt; T &gt; const &amp;c, const ll n)</argsstring>
        <name>lin_recur</name>
        <param>
          <type>vector&lt; T &gt; const &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structll" kindref="compound">ll</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns nth term of linear recurrence described by c. <formula id="15">$x(i) = x_{i-1}c_0 + x_{i-2}c_1 + \dots $</formula> and <formula id="16">$x(0) = 1$</formula></para>
<para>Returns nth term of linear recurrence described by c. <formula id="15">$x(i) = x_{i-1}c_0 + x_{i-2}c_1 + \dots $</formula> and <formula id="16">$x(0) = 1$</formula></para>
        </inbodydescription>
        <location file="d_compiled.cpp" line="927" column="18" bodyfile="d_compiled.cpp" bodystart="927" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ae1cd9afafb1f7ca00e88e73d262c0704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linear_algebra::test_lin_recur</definition>
        <argsstring>()</argsstring>
        <name>test_lin_recur</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="936" column="6" bodyfile="d_compiled.cpp" bodystart="936" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1abaec40e1e6a4ac4de9316a94f0516dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classPolynomial" kindref="compound">Polynomial</ref>&lt; T &gt;</type>
        <definition>Polynomial&lt; T &gt; linear_algebra::lin_recur_coef</definition>
        <argsstring>(vector&lt; T &gt; const &amp;c)</argsstring>
        <name>lin_recur_coef</name>
        <param>
          <type>vector&lt; T &gt; const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="941" column="24" bodyfile="d_compiled.cpp" bodystart="941" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="d__compiled_8cpp_1ad92ef518c8439f84b4414ff16ec2cdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linear_algebra::test_linear_algebra</definition>
        <argsstring>()</argsstring>
        <name>test_linear_algebra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="d_compiled.cpp" line="942" column="6" bodyfile="d_compiled.cpp" bodystart="942" bodyend="947"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="d_compiled.cpp" line="792" column="24"/>
  </compounddef>
</doxygen>
