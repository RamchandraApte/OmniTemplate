<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structSplayTree_1_1iterator" kind="struct" language="C++" prot="public">
    <compoundname>SplayTree::iterator</compoundname>
    <basecompoundref refid="structit__base" prot="public" virt="non-virtual">it_base&lt; T &gt;</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structSplayTree_1_1iterator_1ad051365ab1cf91a51228681ae68f3e2e" prot="public" static="no">
        <type>bidirectional_iterator_tag</type>
        <definition>using SplayTree&lt; T &gt;::iterator::iterator_category =  bidirectional_iterator_tag</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="72" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" prot="public" static="no" mutable="no">
        <type><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref> *</type>
        <definition>Node* SplayTree&lt; T &gt;::iterator::node</definition>
        <argsstring></argsstring>
        <name>node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="78" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structSplayTree_1_1iterator_1a97df329bdff57dc3a956cea177bd3624" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SplayTree&lt; T &gt;::iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="75" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structSplayTree_1_1iterator_1a16422ee75f155368e0186196ac89b43c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SplayTree&lt; T &gt;::iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="76" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structSplayTree_1_1iterator_1a5868c412547a4f0dfb7736193dd59369" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; SplayTree&lt; T &gt;::iterator::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="77" column="20" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structSplayTree_1_1iterator_1a657b0988d690e341ba0560d59b845143" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SplayTree&lt; T &gt;::iterator::iterator</definition>
        <argsstring>(Node *node_arg)</argsstring>
        <name>iterator</name>
        <param>
          <type><ref refid="structsplay__tree_1_1SplayNode" kindref="compound">Node</ref> *</type>
          <declname>node_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="79" column="12" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structSplayTree_1_1iterator_1aa7e5c04b48a15e8f3d7725fdc208572b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SplayTree&lt; T &gt;::iterator::operator==</definition>
        <argsstring>(const iterator oth) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structSplayTree_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>oth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="80" column="17" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="80" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structSplayTree_1_1iterator_1ab495f849095916f32ae0ebbfc15a9d11" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>dir</declname>
            <defname>dir</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SplayTree&lt; T &gt;::iterator::advance</definition>
        <argsstring>()</argsstring>
        <name>advance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="85" column="29" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="85" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>it_base&lt; T &gt;</label>
        <link refid="structit__base"/>
      </node>
      <node id="1">
        <label>SplayTree&lt; T &gt;::iterator</label>
        <link refid="structSplayTree_1_1iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>conditional_t&lt; false, PathParent&lt; SplayNode&lt; T, false &gt; &gt;, Empty &gt;</label>
      </node>
      <node id="2">
        <label>it_base&lt; T &gt;</label>
        <link refid="structit__base"/>
      </node>
      <node id="3">
        <label>splay_tree::SplayNode&lt; T, has_link_cut &gt;</label>
        <link refid="structsplay__tree_1_1SplayNode"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>SplayTree&lt; T &gt;::iterator</label>
        <link refid="structSplayTree_1_1iterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>node</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" line="71" column="38" bodyfile="docs/_build/html/_sources/api/program_listing_file_splay_tree.hpp.rst.txt" bodystart="71" bodyend="94"/>
    <listofallmembers>
      <member refid="structSplayTree_1_1iterator_1ab495f849095916f32ae0ebbfc15a9d11" prot="private" virt="non-virtual"><scope>SplayTree::iterator</scope><name>advance</name></member>
      <member refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>difference_type</name></member>
      <member refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>difference_type</name></member>
      <member refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>difference_type</name></member>
      <member refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>difference_type</name></member>
      <member refid="structit__base_1a2f441c3115c3b785aedc6816276d7511" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>difference_type</name></member>
      <member refid="structSplayTree_1_1iterator_1a657b0988d690e341ba0560d59b845143" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>iterator</name></member>
      <member refid="structSplayTree_1_1iterator_1ad051365ab1cf91a51228681ae68f3e2e" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>iterator_category</name></member>
      <member refid="structSplayTree_1_1iterator_1a570dbdcaec4a93b65f4ae518d71ca774" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>node</name></member>
      <member refid="structSplayTree_1_1iterator_1a5868c412547a4f0dfb7736193dd59369" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>operator*</name></member>
      <member refid="structSplayTree_1_1iterator_1a16422ee75f155368e0186196ac89b43c" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>operator++</name></member>
      <member refid="structSplayTree_1_1iterator_1a97df329bdff57dc3a956cea177bd3624" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>operator--</name></member>
      <member refid="structSplayTree_1_1iterator_1aa7e5c04b48a15e8f3d7725fdc208572b" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>operator==</name></member>
      <member refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>pointer</name></member>
      <member refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>pointer</name></member>
      <member refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>pointer</name></member>
      <member refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>pointer</name></member>
      <member refid="structit__base_1aff4e3754839c1106ced2e57a47d44425" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>pointer</name></member>
      <member refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>reference</name></member>
      <member refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>reference</name></member>
      <member refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>reference</name></member>
      <member refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>reference</name></member>
      <member refid="structit__base_1a65ea2a2492ba8ae44a336fd192f5ff2a" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>reference</name></member>
      <member refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>value_type</name></member>
      <member refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>value_type</name></member>
      <member refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>value_type</name></member>
      <member refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>value_type</name></member>
      <member refid="structit__base_1a750730b3baf6464b16f1483c656f5dce" prot="public" virt="non-virtual"><scope>SplayTree::iterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
