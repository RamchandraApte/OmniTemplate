<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__splay__tree_8hpp" kind="file" language="C++">
    <compoundname>test_splay_tree.hpp</compoundname>
    <includes refid="splay__tree_8hpp" local="yes">splay_tree.hpp</includes>
    <includedby refid="test_8cpp" local="yes">/home/ram/OmniTemplate/src/test/test.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>bits/stdc++.h</label>
      </node>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_splay_tree.hpp</label>
        <link refid="test__splay__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>experimental/source_location</label>
      </node>
      <node id="8">
        <label>operations.hpp</label>
        <link refid="operations_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>experimental/iterator</label>
      </node>
      <node id="3">
        <label>core/all.hpp</label>
        <link refid="core_2all_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>splay_tree.hpp</label>
        <link refid="splay__tree_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>debug.hpp</label>
        <link refid="debug_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/ram/OmniTemplate/src/ds/test_splay_tree.hpp</label>
        <link refid="test__splay__tree_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/ram/OmniTemplate/src/test/test.cpp</label>
        <link refid="test_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesplay__tree">splay_tree</innernamespace>
    <innernamespace refid="namespacesplay__tree_1_1test">splay_tree::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="splay__tree_8hpp" kindref="compound">splay_tree.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="namespacesplay__tree_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree_1_1test" kindref="compound">splay_tree::test</ref><sp/>{</highlight></codeline>
<codeline lineno="4" refid="namespacesplay__tree_1_1test_1a5aa5fd954b1cb0fb099a2310d2801e9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplay__tree_1_1test_1a5aa5fd954b1cb0fb099a2310d2801e9e" kindref="member">test_splay_tree</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsplay__tree_1_1SplayTree" kindref="compound">SplayTree&lt;int&gt;</ref><sp/>sp;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(4);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(3);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(5);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!sp.<ref refid="structsplay__tree_1_1SplayTree_1a91876a3a77e0f9c9c8550bf527a2f96f" kindref="member">empty</ref>());</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(4)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(3)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(5)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(2)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(6)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a967e320e3d33cad8b0a9c30cd51ed924" kindref="member">erase</ref>(3);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(3)<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(5)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(4)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(20);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(-2);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a80ab90fbd7be1405ae05399b0fc2f2f1" kindref="member">insert</ref>(6);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>expected{-2,<sp/>4,<sp/>5,<sp/>6,<sp/>20};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a9dc668b2583940705651fc11072d47da" kindref="member">size</ref>()<sp/>==<sp/>expected.size());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>:<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sp.<ref refid="structsplay__tree_1_1SplayTree_1a63ec7e70e6422bbf64cb0b2e1bf497a9" kindref="member">find</ref>(x)-&gt;<ref refid="structsplay__tree_1_1SplayNode_1aeb587346f51a8c188a0cf74da7770be4" kindref="member">value</ref><sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ll&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(sp.<ref refid="structsplay__tree_1_1SplayTree_1a2f4c63a201ae3d63d08229382dcbfc67" kindref="member">begin</ref>(),<sp/>sp.<ref refid="structsplay__tree_1_1SplayTree_1a45aa483490efb984be745d3847061eba" kindref="member">end</ref>(),<sp/>back_inserter(vec));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vec<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>splay_tree::test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplay__tree_1_1test" kindref="compound">splay_tree::test</ref>;</highlight></codeline>
    </programlisting>
    <location file="/home/ram/OmniTemplate/src/ds/test_splay_tree.hpp"/>
  </compounddef>
</doxygen>
