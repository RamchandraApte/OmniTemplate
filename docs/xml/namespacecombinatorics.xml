<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacecombinatorics" kind="namespace" language="C++">
    <compoundname>combinatorics</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecombinatorics_1a7c355be8fa586494f280768dc777dede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T combinatorics::perm</definition>
        <argsstring>(const T a, const T b)</argsstring>
        <name>perm</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return <formula id="0">$P(a,b)$</formula>, the falling factorial.</para>
        </inbodydescription>
        <location file="combinatorics.hpp" line="5" column="15" bodyfile="combinatorics.hpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a354a245ee1f57f4f0586318676040d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void combinatorics::test_perm</definition>
        <argsstring>()</argsstring>
        <name>test_perm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="combinatorics.hpp" line="10" column="6" bodyfile="combinatorics.hpp" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a20e5a1b40f76572aa1e18b228b6e4849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T combinatorics::fact</definition>
        <argsstring>(const T n)</argsstring>
        <name>fact</name>
        <param>
          <type>const T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Return the factorial of n, i.e. <formula id="1">$n!$</formula>.</para>
        </inbodydescription>
        <location file="combinatorics.hpp" line="18" column="15" bodyfile="combinatorics.hpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a49a9258d4d599545b41c0425b8c34aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void combinatorics::test_fact</definition>
        <argsstring>()</argsstring>
        <name>test_fact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="combinatorics.hpp" line="22" column="6" bodyfile="combinatorics.hpp" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a24ea271b6415a4679e019562f474d88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T combinatorics::choose</definition>
        <argsstring>(const T a, const T b)</argsstring>
        <name>choose</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns a choose b, i.e. <formula id="2">$\binom{a}{b}$</formula></para>
        </inbodydescription>
        <location file="combinatorics.hpp" line="28" column="15" bodyfile="combinatorics.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a4bb0c0ff8e23b9dfa30bdc71206a62be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void combinatorics::test_choose</definition>
        <argsstring>()</argsstring>
        <name>test_choose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="combinatorics.hpp" line="32" column="6" bodyfile="combinatorics.hpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacecombinatorics_1a4e91bb5e7575eceb8a1727698820b896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void combinatorics::test_combinatorics</definition>
        <argsstring>()</argsstring>
        <name>test_combinatorics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="combinatorics.hpp" line="42" column="6" bodyfile="combinatorics.hpp" bodystart="42" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Combinatorics header. </para>
    </detaileddescription>
    <location file="combinatorics.hpp" line="4" column="23"/>
  </compounddef>
</doxygen>
